/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnRequiredCellList {		public AsGenericCellIdInfo[] cell;	public sqnRequiredCellList() {		// Initialization	}	public static int marshall(byte[] buf, final sqnRequiredCellList p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		// cellQty		if(p.cell == null)			Util.Copy32ToBuffer(buf, 0, _offset);		else {			Util.Copy32ToBuffer(buf, p.cell.length, _offset);			// cellArray			for (int i = 0; i<p.cell.length; i++) {				if ( Status.STATUS_OK != (st = AsGenericCellIdInfo.marshall(buf, p.cell[i], _offset)) ) return st;			}		}		return st;	}	public static int unmarshall(final byte[] buf, sqnRequiredCellList p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		// Array		{			// cellQty			int arrSize = (int) Util.Copy32FromBuffer(buf, _offset);			// cellArray			p.cell = new AsGenericCellIdInfo[arrSize];			for (int i = 0; i<p.cell.length; i++) {				p.cell[i] = new AsGenericCellIdInfo();			}			for (int i = 0; i<p.cell.length; i++) {				if ( Status.STATUS_OK != (st = AsGenericCellIdInfo.unmarshall(buf, p.cell[i], _offset)) ) return st;			}		}		return st;	}}