/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnInterFreqCarrierFreq {	public short cellReselectionPriority;	public int dlCarrierFreq;	public short neighborCellConfig;	public int pMax;	public int qOffsetFreq;	public int rxLevMin;	public short threshXHigh;	public short threshXLow;	public int tReselectEutra;	public sqnFreqNeighborCell[] freqNeighborCell;	public sqnInterFreqCarrierFreq() {		// Initialization	}	public static int marshall(byte[] buf, final sqnInterFreqCarrierFreq p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+26)) return DccError.ERR_OVERFLOW;		// cellReselectionPriority		Util.Copy8ToBuffer(buf, p.cellReselectionPriority, _offset);		// dlCarrierFreq		Util.Copy16ToBuffer(buf, p.dlCarrierFreq, _offset);		// neighborCellConfig		Util.Copy8ToBuffer(buf, p.neighborCellConfig, _offset);		// pMax		Util.Copy32ToBuffer(buf, p.pMax, _offset);		// qOffsetFreq		Util.Copy32ToBuffer(buf, p.qOffsetFreq, _offset);		// rxLevMin		Util.Copy32ToBuffer(buf, p.rxLevMin, _offset);		// threshXHigh		Util.Copy8ToBuffer(buf, p.threshXHigh, _offset);		// threshXLow		Util.Copy8ToBuffer(buf, p.threshXLow, _offset);		// tReselectEutra		Util.Copy32ToBuffer(buf, p.tReselectEutra, _offset);		// freqNeighborCellQty		if(p.freqNeighborCell == null)			Util.Copy32ToBuffer(buf, 0, _offset);		else {			Util.Copy32ToBuffer(buf, p.freqNeighborCell.length, _offset);			// freqNeighborCellArray			for (int i = 0; i<p.freqNeighborCell.length; i++) {				if ( Status.STATUS_OK != (st = sqnFreqNeighborCell.marshall(buf, p.freqNeighborCell[i], _offset)) ) return st;			}		}		return st;	}	public static int unmarshall(final byte[] buf, sqnInterFreqCarrierFreq p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+26)) return DccError.ERR_OVERFLOW;		// cellReselectionPriority		p.cellReselectionPriority = (short) Util.Copy8FromBuffer(buf, _offset);		// dlCarrierFreq		p.dlCarrierFreq = (int) Util.Copy16FromBuffer(buf, _offset);		// neighborCellConfig		p.neighborCellConfig = (short) Util.Copy8FromBuffer(buf, _offset);		// pMax		p.pMax = (int) Util.Copy32FromBuffer(buf, _offset);		// qOffsetFreq		p.qOffsetFreq = (int) Util.Copy32FromBuffer(buf, _offset);		// rxLevMin		p.rxLevMin = (int) Util.Copy32FromBuffer(buf, _offset);		// threshXHigh		p.threshXHigh = (short) Util.Copy8FromBuffer(buf, _offset);		// threshXLow		p.threshXLow = (short) Util.Copy8FromBuffer(buf, _offset);		// tReselectEutra		p.tReselectEutra = (int) Util.Copy32FromBuffer(buf, _offset);		// Array		{			// freqNeighborCellQty			int arrSize = (int) Util.Copy32FromBuffer(buf, _offset);			// freqNeighborCellArray			p.freqNeighborCell = new sqnFreqNeighborCell[arrSize];			for (int i = 0; i<p.freqNeighborCell.length; i++) {				p.freqNeighborCell[i] = new sqnFreqNeighborCell();			}			for (int i = 0; i<p.freqNeighborCell.length; i++) {				if ( Status.STATUS_OK != (st = sqnFreqNeighborCell.unmarshall(buf, p.freqNeighborCell[i], _offset)) ) return st;			}		}		return st;	}}