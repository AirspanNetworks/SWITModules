/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnUserNetworkDescription {	public int rsrp;	public char[] networkName = new char[17];	public sqnAccessTechnology type;	public EpsPlmnIdTag plmnId;	public sqnUserNetworkDescription() {		// Initialization		// type		type = new sqnAccessTechnology();		// plmnId		plmnId = new EpsPlmnIdTag();	}	public static int marshall(byte[] buf, final sqnUserNetworkDescription p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+8)) return DccError.ERR_OVERFLOW;		// rsrp		Util.Copy32ToBuffer(buf, p.rsrp, _offset);		// networkName		for (int i = 0; i<17; i++) {			Util.Copy8ToBuffer(buf, p.networkName[i], _offset);		}		// type		if ( Status.STATUS_OK != (st = sqnAccessTechnology.marshall(buf, p.type, _offset)) ) return st;		// plmnId		if ( Status.STATUS_OK != (st = EpsPlmnIdTag.marshall(buf, p.plmnId, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnUserNetworkDescription p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+8)) return DccError.ERR_OVERFLOW;		// rsrp		p.rsrp = (int) Util.Copy32FromBuffer(buf, _offset);		// networkName		for (int i = 0; i<17; i++) {			p.networkName[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		// type		if ( Status.STATUS_OK != (st = sqnAccessTechnology.unmarshall(buf, p.type, _offset)) ) return st;		// plmnId		if ( Status.STATUS_OK != (st = EpsPlmnIdTag.unmarshall(buf, p.plmnId, _offset)) ) return st;		return st;	}}