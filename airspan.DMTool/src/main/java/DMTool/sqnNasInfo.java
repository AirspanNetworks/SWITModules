/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnNasInfo {	public sqnEmmPlmnSelectMode plmnSelectMode;	public EpsPdnAddress[] pdn;	public boolean emmRegistred;	public boolean rrcConnected;	public EpsIntegrityAlgorithmTag integrityAlgo;	public EpsCipheringAlgorithmTag cipheringAlgo;	public sqnNasInfo() {		// Initialization		// plmnSelectMode		plmnSelectMode = new sqnEmmPlmnSelectMode();		// integrityAlgo		integrityAlgo = new EpsIntegrityAlgorithmTag();		// cipheringAlgo		cipheringAlgo = new EpsCipheringAlgorithmTag();	}	public static int marshall(byte[] buf, final sqnNasInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+24)) return DccError.ERR_OVERFLOW;		// plmnSelectMode		if ( Status.STATUS_OK != (st = sqnEmmPlmnSelectMode.marshall(buf, p.plmnSelectMode, _offset)) ) return st;		// pdnQty		if(p.pdn == null)			Util.Copy32ToBuffer(buf, 0, _offset);		else {			Util.Copy32ToBuffer(buf, p.pdn.length, _offset);			// pdnArray			for (int i = 0; i<p.pdn.length; i++) {				if ( Status.STATUS_OK != (st = EpsPdnAddress.marshall(buf, p.pdn[i], _offset)) ) return st;			}		}		// emmRegistred		Util.Copy32ToBuffer(buf, p.emmRegistred, _offset);		// rrcConnected		Util.Copy32ToBuffer(buf, p.rrcConnected, _offset);		// integrityAlgo		if ( Status.STATUS_OK != (st = EpsIntegrityAlgorithmTag.marshall(buf, p.integrityAlgo, _offset)) ) return st;		// cipheringAlgo		if ( Status.STATUS_OK != (st = EpsCipheringAlgorithmTag.marshall(buf, p.cipheringAlgo, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnNasInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+24)) return DccError.ERR_OVERFLOW;		// plmnSelectMode		if ( Status.STATUS_OK != (st = sqnEmmPlmnSelectMode.unmarshall(buf, p.plmnSelectMode, _offset)) ) return st;		// Array		{			// pdnQty			int arrSize = (int) Util.Copy32FromBuffer(buf, _offset);			// pdnArray			p.pdn = new EpsPdnAddress[arrSize];			for (int i = 0; i<p.pdn.length; i++) {				p.pdn[i] = new EpsPdnAddress();			}			for (int i = 0; i<p.pdn.length; i++) {				if ( Status.STATUS_OK != (st = EpsPdnAddress.unmarshall(buf, p.pdn[i], _offset)) ) return st;			}		}		// emmRegistred		p.emmRegistred = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// rrcConnected		p.rrcConnected = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// integrityAlgo		if ( Status.STATUS_OK != (st = EpsIntegrityAlgorithmTag.unmarshall(buf, p.integrityAlgo, _offset)) ) return st;		// cipheringAlgo		if ( Status.STATUS_OK != (st = EpsCipheringAlgorithmTag.unmarshall(buf, p.cipheringAlgo, _offset)) ) return st;		return st;	}}