/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscUeImpl extends DccClient {	public void initialize(final UeClient c) {		_use = c;		name = "ue";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscUeSetT3402._name.equalsIgnoreCase(name)) {			agscUeSetT3402._id = id;			return Status.STATUS_OK;		}		if (agscUePdnDisconnectRequest._name.equalsIgnoreCase(name)) {			agscUePdnDisconnectRequest._id = id;			return Status.STATUS_OK;		}		if (agscUePdnDisconnectResponse._name.equalsIgnoreCase(name)) {			agscUePdnDisconnectResponse._id = id;			return Status.STATUS_OK;		}		if (agscUeDetachRequest._name.equalsIgnoreCase(name)) {			agscUeDetachRequest._id = id;			return Status.STATUS_OK;		}		if (agscUeDetachConfirm._name.equalsIgnoreCase(name)) {			agscUeDetachConfirm._id = id;			return Status.STATUS_OK;		}		if (agscUeAuthenticationRejectReceived._name.equalsIgnoreCase(name)) {			agscUeAuthenticationRejectReceived._id = id;			return Status.STATUS_OK;		}		if (agscUeSetUeConfiguration._name.equalsIgnoreCase(name)) {			agscUeSetUeConfiguration._id = id;			return Status.STATUS_OK;		}		if (agscUeSetEpsBearerAuthenticationProtocol._name.equalsIgnoreCase(name)) {			agscUeSetEpsBearerAuthenticationProtocol._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEpsBearerAuthenticationProtocol._name.equalsIgnoreCase(name)) {			agscUeGetEpsBearerAuthenticationProtocol._id = id;			return Status.STATUS_OK;		}		if (agscUeGetCfunLevel._name.equalsIgnoreCase(name)) {			agscUeGetCfunLevel._id = id;			return Status.STATUS_OK;		}		if (agscUeEnterAirPlaneMode._name.equalsIgnoreCase(name)) {			agscUeEnterAirPlaneMode._id = id;			return Status.STATUS_OK;		}		if (agscUeSetAutoAttach._name.equalsIgnoreCase(name)) {			agscUeSetAutoAttach._id = id;			return Status.STATUS_OK;		}		if (agscUeGetAutoAttach._name.equalsIgnoreCase(name)) {			agscUeGetAutoAttach._id = id;			return Status.STATUS_OK;		}		if (agscUeEpsAttach._name.equalsIgnoreCase(name)) {			agscUeEpsAttach._id = id;			return Status.STATUS_OK;		}		if (agscUeEpsDetach._name.equalsIgnoreCase(name)) {			agscUeEpsDetach._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEpsBearerIdList._name.equalsIgnoreCase(name)) {			agscUeGetEpsBearerIdList._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEpsBearerInfo._name.equalsIgnoreCase(name)) {			agscUeGetEpsBearerInfo._id = id;			return Status.STATUS_OK;		}		if (agscUeEpsBearerReleased._name.equalsIgnoreCase(name)) {			agscUeEpsBearerReleased._id = id;			return Status.STATUS_OK;		}		if (agscUeEpsBearerEstablished._name.equalsIgnoreCase(name)) {			agscUeEpsBearerEstablished._id = id;			return Status.STATUS_OK;		}		if (agscUeEpsBearerModified._name.equalsIgnoreCase(name)) {			agscUeEpsBearerModified._id = id;			return Status.STATUS_OK;		}		if (agscUeGetPlmnList._name.equalsIgnoreCase(name)) {			agscUeGetPlmnList._id = id;			return Status.STATUS_OK;		}		if (agscUePlmnListUpdated._name.equalsIgnoreCase(name)) {			agscUePlmnListUpdated._id = id;			return Status.STATUS_OK;		}		if (agscUeGetTrackingAreaIdList._name.equalsIgnoreCase(name)) {			agscUeGetTrackingAreaIdList._id = id;			return Status.STATUS_OK;		}		if (agscUeTrackingAreaIdListChanged._name.equalsIgnoreCase(name)) {			agscUeTrackingAreaIdListChanged._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEmmStateInfo._name.equalsIgnoreCase(name)) {			agscUeGetEmmStateInfo._id = id;			return Status.STATUS_OK;		}		if (agscUeEmmState._name.equalsIgnoreCase(name)) {			agscUeEmmState._id = id;			return Status.STATUS_OK;		}		if (agscUeGetNasInfo._name.equalsIgnoreCase(name)) {			agscUeGetNasInfo._id = id;			return Status.STATUS_OK;		}		if (agscUeSetPlmnSelectionMode._name.equalsIgnoreCase(name)) {			agscUeSetPlmnSelectionMode._id = id;			return Status.STATUS_OK;		}		if (agscUePlmnSelectionResponse._name.equalsIgnoreCase(name)) {			agscUePlmnSelectionResponse._id = id;			return Status.STATUS_OK;		}		if (agscUeGetAvailablePlmnList._name.equalsIgnoreCase(name)) {			agscUeGetAvailablePlmnList._id = id;			return Status.STATUS_OK;		}		if (agscUeAvailablePlmnList._name.equalsIgnoreCase(name)) {			agscUeAvailablePlmnList._id = id;			return Status.STATUS_OK;		}		if (agscUeAvailablePlmn._name.equalsIgnoreCase(name)) {			agscUeAvailablePlmn._id = id;			return Status.STATUS_OK;		}		if (agscUeGetPlmnSelectionMode._name.equalsIgnoreCase(name)) {			agscUeGetPlmnSelectionMode._id = id;			return Status.STATUS_OK;		}		if (agscUeSetAttachReqEpsBearerInfo._name.equalsIgnoreCase(name)) {			agscUeSetAttachReqEpsBearerInfo._id = id;			return Status.STATUS_OK;		}		if (agscUeGetAttachReqEpsBearerInfo._name.equalsIgnoreCase(name)) {			agscUeGetAttachReqEpsBearerInfo._id = id;			return Status.STATUS_OK;		}		if (agscUeGetNetworkStatus._name.equalsIgnoreCase(name)) {			agscUeGetNetworkStatus._id = id;			return Status.STATUS_OK;		}		if (agscUePdnEstablished._name.equalsIgnoreCase(name)) {			agscUePdnEstablished._id = id;			return Status.STATUS_OK;		}		if (agscUePdnEstablishedConfirm._name.equalsIgnoreCase(name)) {			agscUePdnEstablishedConfirm._id = id;			return Status.STATUS_OK;		}		if (agscUePdnEstablishedExt._name.equalsIgnoreCase(name)) {			agscUePdnEstablishedExt._id = id;			return Status.STATUS_OK;		}		if (agscUeRouterAdvertisementReceived._name.equalsIgnoreCase(name)) {			agscUeRouterAdvertisementReceived._id = id;			return Status.STATUS_OK;		}		if (agscUePdnRejected._name.equalsIgnoreCase(name)) {			agscUePdnRejected._id = id;			return Status.STATUS_OK;		}		if (agscUePdnReleased._name.equalsIgnoreCase(name)) {			agscUePdnReleased._id = id;			return Status.STATUS_OK;		}		if (agscUePdnDisconnectRejectRcd._name.equalsIgnoreCase(name)) {			agscUePdnDisconnectRejectRcd._id = id;			return Status.STATUS_OK;		}		if (agscUeGetPdnList._name.equalsIgnoreCase(name)) {			agscUeGetPdnList._id = id;			return Status.STATUS_OK;		}		if (agscUeGetPdnListExt._name.equalsIgnoreCase(name)) {			agscUeGetPdnListExt._id = id;			return Status.STATUS_OK;		}		if (agscUeSetEpsNetworkRegistrationStatus._name.equalsIgnoreCase(name)) {			agscUeSetEpsNetworkRegistrationStatus._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEpsNetworkRegistrationStatus._name.equalsIgnoreCase(name)) {			agscUeGetEpsNetworkRegistrationStatus._id = id;			return Status.STATUS_OK;		}		if (agscUeEpsNetworkRegistrationStatus._name.equalsIgnoreCase(name)) {			agscUeEpsNetworkRegistrationStatus._id = id;			return Status.STATUS_OK;		}		if (agscUeSystemMode._name.equalsIgnoreCase(name)) {			agscUeSystemMode._id = id;			return Status.STATUS_OK;		}		if (agscUeSetDefaultEpsBearerConfiguration._name.equalsIgnoreCase(name)) {			agscUeSetDefaultEpsBearerConfiguration._id = id;			return Status.STATUS_OK;		}		if (agscUeUnsetDefaultEpsBearerConfiguration._name.equalsIgnoreCase(name)) {			agscUeUnsetDefaultEpsBearerConfiguration._id = id;			return Status.STATUS_OK;		}		if (agscUeGetDefaultEpsBearerConfiguration._name.equalsIgnoreCase(name)) {			agscUeGetDefaultEpsBearerConfiguration._id = id;			return Status.STATUS_OK;		}		if (agscUeSetDedicatedEpsBearerConfiguration._name.equalsIgnoreCase(name)) {			agscUeSetDedicatedEpsBearerConfiguration._id = id;			return Status.STATUS_OK;		}		if (agscUeUnsetDedicatedEpsBearerConfiguration._name.equalsIgnoreCase(name)) {			agscUeUnsetDedicatedEpsBearerConfiguration._id = id;			return Status.STATUS_OK;		}		if (agscUeGetDedicatedEpsBearerConfiguration._name.equalsIgnoreCase(name)) {			agscUeGetDedicatedEpsBearerConfiguration._id = id;			return Status.STATUS_OK;		}		if (agscUeSetEpsBearerContextQos._name.equalsIgnoreCase(name)) {			agscUeSetEpsBearerContextQos._id = id;			return Status.STATUS_OK;		}		if (agscUeUnsetEpsBearerContextQos._name.equalsIgnoreCase(name)) {			agscUeUnsetEpsBearerContextQos._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEpsBearerContextQos._name.equalsIgnoreCase(name)) {			agscUeGetEpsBearerContextQos._id = id;			return Status.STATUS_OK;		}		if (agscUeSetEpsBearerContextTft._name.equalsIgnoreCase(name)) {			agscUeSetEpsBearerContextTft._id = id;			return Status.STATUS_OK;		}		if (agscUeUnsetEpsBearerContextTft._name.equalsIgnoreCase(name)) {			agscUeUnsetEpsBearerContextTft._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEpsBearerContextTft._name.equalsIgnoreCase(name)) {			agscUeGetEpsBearerContextTft._id = id;			return Status.STATUS_OK;		}		if (agscUeSetEpsBearerContextStatus._name.equalsIgnoreCase(name)) {			agscUeSetEpsBearerContextStatus._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEpsBearerContextStatus._name.equalsIgnoreCase(name)) {			agscUeGetEpsBearerContextStatus._id = id;			return Status.STATUS_OK;		}		if (agscUeSetDefaultPdnCid._name.equalsIgnoreCase(name)) {			agscUeSetDefaultPdnCid._id = id;			return Status.STATUS_OK;		}		if (agscUeGetDefaultPdnCid._name.equalsIgnoreCase(name)) {			agscUeGetDefaultPdnCid._id = id;			return Status.STATUS_OK;		}		if (agscUeConfigureSimAccess._name.equalsIgnoreCase(name)) {			agscUeConfigureSimAccess._id = id;			return Status.STATUS_OK;		}		if (agscUeRemoteSimPresent._name.equalsIgnoreCase(name)) {			agscUeRemoteSimPresent._id = id;			return Status.STATUS_OK;		}		if (agscUeRemoteSimAbsent._name.equalsIgnoreCase(name)) {			agscUeRemoteSimAbsent._id = id;			return Status.STATUS_OK;		}		if (agscUeRemoteSimPinUnlocked._name.equalsIgnoreCase(name)) {			agscUeRemoteSimPinUnlocked._id = id;			return Status.STATUS_OK;		}		if (agscUeRemoteSimCommandReq._name.equalsIgnoreCase(name)) {			agscUeRemoteSimCommandReq._id = id;			return Status.STATUS_OK;		}		if (agscUeRemoteSimCommandRsp._name.equalsIgnoreCase(name)) {			agscUeRemoteSimCommandRsp._id = id;			return Status.STATUS_OK;		}		if (agscUeLockSimInterface._name.equalsIgnoreCase(name)) {			agscUeLockSimInterface._id = id;			return Status.STATUS_OK;		}		if (agscUeSendSimCommand._name.equalsIgnoreCase(name)) {			agscUeSendSimCommand._id = id;			return Status.STATUS_OK;		}		if (agscUeSimResponse._name.equalsIgnoreCase(name)) {			agscUeSimResponse._id = id;			return Status.STATUS_OK;		}		if (agscUeSendCrsmCommand._name.equalsIgnoreCase(name)) {			agscUeSendCrsmCommand._id = id;			return Status.STATUS_OK;		}		if (agscUeCrsmResponse._name.equalsIgnoreCase(name)) {			agscUeCrsmResponse._id = id;			return Status.STATUS_OK;		}		if (agscUeGetSimPresence._name.equalsIgnoreCase(name)) {			agscUeGetSimPresence._id = id;			return Status.STATUS_OK;		}		if (agscUeGetPinStatus._name.equalsIgnoreCase(name)) {			agscUeGetPinStatus._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEnabledPinStatus._name.equalsIgnoreCase(name)) {			agscUeGetEnabledPinStatus._id = id;			return Status.STATUS_OK;		}		if (agscUePinStatus._name.equalsIgnoreCase(name)) {			agscUePinStatus._id = id;			return Status.STATUS_OK;		}		if (agscUeEnterPin._name.equalsIgnoreCase(name)) {			agscUeEnterPin._id = id;			return Status.STATUS_OK;		}		if (agscUeEnterPuk._name.equalsIgnoreCase(name)) {			agscUeEnterPuk._id = id;			return Status.STATUS_OK;		}		if (agscUeChangePin._name.equalsIgnoreCase(name)) {			agscUeChangePin._id = id;			return Status.STATUS_OK;		}		if (agscUeEnablePin._name.equalsIgnoreCase(name)) {			agscUeEnablePin._id = id;			return Status.STATUS_OK;		}		if (agscUeGetPinPukRetries._name.equalsIgnoreCase(name)) {			agscUeGetPinPukRetries._id = id;			return Status.STATUS_OK;		}		if (agscUeGetUsimEfBinary._name.equalsIgnoreCase(name)) {			agscUeGetUsimEfBinary._id = id;			return Status.STATUS_OK;		}		if (agscUeGetUsimEfRecord._name.equalsIgnoreCase(name)) {			agscUeGetUsimEfRecord._id = id;			return Status.STATUS_OK;		}		if (agscUeGetUsimEf._name.equalsIgnoreCase(name)) {			agscUeGetUsimEf._id = id;			return Status.STATUS_OK;		}		if (agscUeGetUsimEfPath._name.equalsIgnoreCase(name)) {			agscUeGetUsimEfPath._id = id;			return Status.STATUS_OK;		}		if (agscUeGetServiceTimerValue._name.equalsIgnoreCase(name)) {			agscUeGetServiceTimerValue._id = id;			return Status.STATUS_OK;		}		if (agscUeSetServiceTimerValue._name.equalsIgnoreCase(name)) {			agscUeSetServiceTimerValue._id = id;			return Status.STATUS_OK;		}		if (agscUeSetSimCachedMode._name.equalsIgnoreCase(name)) {			agscUeSetSimCachedMode._id = id;			return Status.STATUS_OK;		}		if (agscUeGetSimCachedMode._name.equalsIgnoreCase(name)) {			agscUeGetSimCachedMode._id = id;			return Status.STATUS_OK;		}		if (agscUeSimPhysicalAccessNeeded._name.equalsIgnoreCase(name)) {			agscUeSimPhysicalAccessNeeded._id = id;			return Status.STATUS_OK;		}		if (agscUeIccId._name.equalsIgnoreCase(name)) {			agscUeIccId._id = id;			return Status.STATUS_OK;		}		if (agscUeGetIccId._name.equalsIgnoreCase(name)) {			agscUeGetIccId._id = id;			return Status.STATUS_OK;		}		if (agscUeRrcStateInfo._name.equalsIgnoreCase(name)) {			agscUeRrcStateInfo._id = id;			return Status.STATUS_OK;		}		if (agscUeGetCellReselectionInfo._name.equalsIgnoreCase(name)) {			agscUeGetCellReselectionInfo._id = id;			return Status.STATUS_OK;		}		if (agscUeGetCampCellInfo._name.equalsIgnoreCase(name)) {			agscUeGetCampCellInfo._id = id;			return Status.STATUS_OK;		}		if (agscUeSetCellScanConfig._name.equalsIgnoreCase(name)) {			agscUeSetCellScanConfig._id = id;			return Status.STATUS_OK;		}		if (agscUeCellScanReport._name.equalsIgnoreCase(name)) {			agscUeCellScanReport._id = id;			return Status.STATUS_OK;		}		if (agscUeSetRequiredCellList._name.equalsIgnoreCase(name)) {			agscUeSetRequiredCellList._id = id;			return Status.STATUS_OK;		}		if (agscUeCellMeasReport._name.equalsIgnoreCase(name)) {			agscUeCellMeasReport._id = id;			return Status.STATUS_OK;		}		if (agscUeSetInitialCellSelectionConfig._name.equalsIgnoreCase(name)) {			agscUeSetInitialCellSelectionConfig._id = id;			return Status.STATUS_OK;		}		if (agscUeGetInitialCellSelectionConfig._name.equalsIgnoreCase(name)) {			agscUeGetInitialCellSelectionConfig._id = id;			return Status.STATUS_OK;		}		if (agscUeAddInitialCellSelectionBand._name.equalsIgnoreCase(name)) {			agscUeAddInitialCellSelectionBand._id = id;			return Status.STATUS_OK;		}		if (agscUeAddInitialCellSelectionFreq._name.equalsIgnoreCase(name)) {			agscUeAddInitialCellSelectionFreq._id = id;			return Status.STATUS_OK;		}		if (agscUeAddInitialCellSelectionFreqRange._name.equalsIgnoreCase(name)) {			agscUeAddInitialCellSelectionFreqRange._id = id;			return Status.STATUS_OK;		}		if (agscUeRemoveInitialCellSelectionFreq._name.equalsIgnoreCase(name)) {			agscUeRemoveInitialCellSelectionFreq._id = id;			return Status.STATUS_OK;		}		if (agscUeRemoveAllInitialCellSelectionFreq._name.equalsIgnoreCase(name)) {			agscUeRemoveAllInitialCellSelectionFreq._id = id;			return Status.STATUS_OK;		}		if (agscUeSetPlmnSelectParam._name.equalsIgnoreCase(name)) {			agscUeSetPlmnSelectParam._id = id;			return Status.STATUS_OK;		}		if (agscUeGetPlmnSelectParam._name.equalsIgnoreCase(name)) {			agscUeGetPlmnSelectParam._id = id;			return Status.STATUS_OK;		}		if (agscUeSetSpecificDrxCycle._name.equalsIgnoreCase(name)) {			agscUeSetSpecificDrxCycle._id = id;			return Status.STATUS_OK;		}		if (agscUeGetSpecificDrxCycle._name.equalsIgnoreCase(name)) {			agscUeGetSpecificDrxCycle._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEntityThroughput._name.equalsIgnoreCase(name)) {			agscUeGetEntityThroughput._id = id;			return Status.STATUS_OK;		}		if (agscUeGetLayerThroughput._name.equalsIgnoreCase(name)) {			agscUeGetLayerThroughput._id = id;			return Status.STATUS_OK;		}		if (agscUeGetEntityPdcpParams._name.equalsIgnoreCase(name)) {			agscUeGetEntityPdcpParams._id = id;			return Status.STATUS_OK;		}		if (agscUePdcpEntityParamsChanged._name.equalsIgnoreCase(name)) {			agscUePdcpEntityParamsChanged._id = id;			return Status.STATUS_OK;		}		if (agscUeGetRbParams._name.equalsIgnoreCase(name)) {			agscUeGetRbParams._id = id;			return Status.STATUS_OK;		}		if (agscUeRbParamsChanged._name.equalsIgnoreCase(name)) {			agscUeRbParamsChanged._id = id;			return Status.STATUS_OK;		}		if (agscUeGetLchEntityParams._name.equalsIgnoreCase(name)) {			agscUeGetLchEntityParams._id = id;			return Status.STATUS_OK;		}		if (agscUeLchEntityParamsChanged._name.equalsIgnoreCase(name)) {			agscUeLchEntityParamsChanged._id = id;			return Status.STATUS_OK;		}		if (agscUeGetMacStats._name.equalsIgnoreCase(name)) {			agscUeGetMacStats._id = id;			return Status.STATUS_OK;		}		if (agscUeGetBlockErrorRateStats._name.equalsIgnoreCase(name)) {			agscUeGetBlockErrorRateStats._id = id;			return Status.STATUS_OK;		}		if (agscUeGetBufferStatusReport._name.equalsIgnoreCase(name)) {			agscUeGetBufferStatusReport._id = id;			return Status.STATUS_OK;		}		if (agscUeGetHarqStats._name.equalsIgnoreCase(name)) {			agscUeGetHarqStats._id = id;			return Status.STATUS_OK;		}		if (agscUeGetCqiConfig._name.equalsIgnoreCase(name)) {			agscUeGetCqiConfig._id = id;			return Status.STATUS_OK;		}		if (agscUeGetDlMcsConfig._name.equalsIgnoreCase(name)) {			agscUeGetDlMcsConfig._id = id;			return Status.STATUS_OK;		}		if (agscUeGetUlMcsConfig._name.equalsIgnoreCase(name)) {			agscUeGetUlMcsConfig._id = id;			return Status.STATUS_OK;		}		if (agscUeGetRadioResourceControlInfo._name.equalsIgnoreCase(name)) {			agscUeGetRadioResourceControlInfo._id = id;			return Status.STATUS_OK;		}		if (agscUeGetCinr._name.equalsIgnoreCase(name)) {			agscUeGetCinr._id = id;			return Status.STATUS_OK;		}		if (agscUeGetPhyStats._name.equalsIgnoreCase(name)) {			agscUeGetPhyStats._id = id;			return Status.STATUS_OK;		}		if (agscUeGetPhyRxStats._name.equalsIgnoreCase(name)) {			agscUeGetPhyRxStats._id = id;			return Status.STATUS_OK;		}		if (agscUeGetPhyTxStats._name.equalsIgnoreCase(name)) {			agscUeGetPhyTxStats._id = id;			return Status.STATUS_OK;		}		if (agscUeGetIdentities._name.equalsIgnoreCase(name)) {			agscUeGetIdentities._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		if (agscUePdnDisconnectRequest._id == id) return agscUePdnDisconnectRequest.notify(buf);		if (agscUeDetachRequest._id == id) return agscUeDetachRequest.notify(buf);		if (agscUeAuthenticationRejectReceived._id == id) return agscUeAuthenticationRejectReceived.notify(buf);		if (agscUeEpsBearerReleased._id == id) return agscUeEpsBearerReleased.notify(buf);		if (agscUeEpsBearerEstablished._id == id) return agscUeEpsBearerEstablished.notify(buf);		if (agscUeEpsBearerModified._id == id) return agscUeEpsBearerModified.notify(buf);		if (agscUePlmnListUpdated._id == id) return agscUePlmnListUpdated.notify(buf);		if (agscUeTrackingAreaIdListChanged._id == id) return agscUeTrackingAreaIdListChanged.notify(buf);		if (agscUeEmmState._id == id) return agscUeEmmState.notify(buf);		if (agscUePlmnSelectionResponse._id == id) return agscUePlmnSelectionResponse.notify(buf);		if (agscUeAvailablePlmnList._id == id) return agscUeAvailablePlmnList.notify(buf);		if (agscUeAvailablePlmn._id == id) return agscUeAvailablePlmn.notify(buf);		if (agscUePdnEstablished._id == id) return agscUePdnEstablished.notify(buf);		if (agscUePdnEstablishedExt._id == id) return agscUePdnEstablishedExt.notify(buf);		if (agscUeRouterAdvertisementReceived._id == id) return agscUeRouterAdvertisementReceived.notify(buf);		if (agscUePdnRejected._id == id) return agscUePdnRejected.notify(buf);		if (agscUePdnReleased._id == id) return agscUePdnReleased.notify(buf);		if (agscUePdnDisconnectRejectRcd._id == id) return agscUePdnDisconnectRejectRcd.notify(buf);		if (agscUeEpsNetworkRegistrationStatus._id == id) return agscUeEpsNetworkRegistrationStatus.notify(buf);		if (agscUeSystemMode._id == id) return agscUeSystemMode.notify(buf);		if (agscUeRemoteSimCommandReq._id == id) return agscUeRemoteSimCommandReq.notify(buf);		if (agscUeSimResponse._id == id) return agscUeSimResponse.notify(buf);		if (agscUeCrsmResponse._id == id) return agscUeCrsmResponse.notify(buf);		if (agscUePinStatus._id == id) return agscUePinStatus.notify(buf);		if (agscUeSimPhysicalAccessNeeded._id == id) return agscUeSimPhysicalAccessNeeded.notify(buf);		if (agscUeIccId._id == id) return agscUeIccId.notify(buf);		if (agscUeRrcStateInfo._id == id) return agscUeRrcStateInfo.notify(buf);		if (agscUeCellScanReport._id == id) return agscUeCellScanReport.notify(buf);		if (agscUeCellMeasReport._id == id) return agscUeCellMeasReport.notify(buf);		if (agscUePdcpEntityParamsChanged._id == id) return agscUePdcpEntityParamsChanged.notify(buf);		if (agscUeRbParamsChanged._id == id) return agscUeRbParamsChanged.notify(buf);		if (agscUeLchEntityParamsChanged._id == id) return agscUeLchEntityParamsChanged.notify(buf);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 135;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			name._value = agscUeSetT3402._name;			id._value = agscUeSetT3402._id;			return Status.STATUS_OK;		}		if (index==1) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUePdnDisconnectRequest._name;			id._value = agscUePdnDisconnectRequest._id;			return Status.STATUS_OK;		}		if (index==2) {			name._value = agscUePdnDisconnectResponse._name;			id._value = agscUePdnDisconnectResponse._id;			return Status.STATUS_OK;		}		if (index==3) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeDetachRequest._name;			id._value = agscUeDetachRequest._id;			return Status.STATUS_OK;		}		if (index==4) {			name._value = agscUeDetachConfirm._name;			id._value = agscUeDetachConfirm._id;			return Status.STATUS_OK;		}		if (index==5) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeAuthenticationRejectReceived._name;			id._value = agscUeAuthenticationRejectReceived._id;			return Status.STATUS_OK;		}		if (index==6) {			name._value = agscUeSetUeConfiguration._name;			id._value = agscUeSetUeConfiguration._id;			return Status.STATUS_OK;		}		if (index==7) {			name._value = agscUeSetEpsBearerAuthenticationProtocol._name;			id._value = agscUeSetEpsBearerAuthenticationProtocol._id;			return Status.STATUS_OK;		}		if (index==8) {			name._value = agscUeGetEpsBearerAuthenticationProtocol._name;			id._value = agscUeGetEpsBearerAuthenticationProtocol._id;			return Status.STATUS_OK;		}		if (index==9) {			name._value = agscUeGetCfunLevel._name;			id._value = agscUeGetCfunLevel._id;			return Status.STATUS_OK;		}		if (index==10) {			name._value = agscUeEnterAirPlaneMode._name;			id._value = agscUeEnterAirPlaneMode._id;			return Status.STATUS_OK;		}		if (index==11) {			name._value = agscUeSetAutoAttach._name;			id._value = agscUeSetAutoAttach._id;			return Status.STATUS_OK;		}		if (index==12) {			name._value = agscUeGetAutoAttach._name;			id._value = agscUeGetAutoAttach._id;			return Status.STATUS_OK;		}		if (index==13) {			name._value = agscUeEpsAttach._name;			id._value = agscUeEpsAttach._id;			return Status.STATUS_OK;		}		if (index==14) {			name._value = agscUeEpsDetach._name;			id._value = agscUeEpsDetach._id;			return Status.STATUS_OK;		}		if (index==15) {			name._value = agscUeGetEpsBearerIdList._name;			id._value = agscUeGetEpsBearerIdList._id;			return Status.STATUS_OK;		}		if (index==16) {			name._value = agscUeGetEpsBearerInfo._name;			id._value = agscUeGetEpsBearerInfo._id;			return Status.STATUS_OK;		}		if (index==17) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeEpsBearerReleased._name;			id._value = agscUeEpsBearerReleased._id;			return Status.STATUS_OK;		}		if (index==18) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeEpsBearerEstablished._name;			id._value = agscUeEpsBearerEstablished._id;			return Status.STATUS_OK;		}		if (index==19) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeEpsBearerModified._name;			id._value = agscUeEpsBearerModified._id;			return Status.STATUS_OK;		}		if (index==20) {			name._value = agscUeGetPlmnList._name;			id._value = agscUeGetPlmnList._id;			return Status.STATUS_OK;		}		if (index==21) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUePlmnListUpdated._name;			id._value = agscUePlmnListUpdated._id;			return Status.STATUS_OK;		}		if (index==22) {			name._value = agscUeGetTrackingAreaIdList._name;			id._value = agscUeGetTrackingAreaIdList._id;			return Status.STATUS_OK;		}		if (index==23) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeTrackingAreaIdListChanged._name;			id._value = agscUeTrackingAreaIdListChanged._id;			return Status.STATUS_OK;		}		if (index==24) {			name._value = agscUeGetEmmStateInfo._name;			id._value = agscUeGetEmmStateInfo._id;			return Status.STATUS_OK;		}		if (index==25) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeEmmState._name;			id._value = agscUeEmmState._id;			return Status.STATUS_OK;		}		if (index==26) {			name._value = agscUeGetNasInfo._name;			id._value = agscUeGetNasInfo._id;			return Status.STATUS_OK;		}		if (index==27) {			name._value = agscUeSetPlmnSelectionMode._name;			id._value = agscUeSetPlmnSelectionMode._id;			return Status.STATUS_OK;		}		if (index==28) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUePlmnSelectionResponse._name;			id._value = agscUePlmnSelectionResponse._id;			return Status.STATUS_OK;		}		if (index==29) {			name._value = agscUeGetAvailablePlmnList._name;			id._value = agscUeGetAvailablePlmnList._id;			return Status.STATUS_OK;		}		if (index==30) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeAvailablePlmnList._name;			id._value = agscUeAvailablePlmnList._id;			return Status.STATUS_OK;		}		if (index==31) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeAvailablePlmn._name;			id._value = agscUeAvailablePlmn._id;			return Status.STATUS_OK;		}		if (index==32) {			name._value = agscUeGetPlmnSelectionMode._name;			id._value = agscUeGetPlmnSelectionMode._id;			return Status.STATUS_OK;		}		if (index==33) {			name._value = agscUeSetAttachReqEpsBearerInfo._name;			id._value = agscUeSetAttachReqEpsBearerInfo._id;			return Status.STATUS_OK;		}		if (index==34) {			name._value = agscUeGetAttachReqEpsBearerInfo._name;			id._value = agscUeGetAttachReqEpsBearerInfo._id;			return Status.STATUS_OK;		}		if (index==35) {			name._value = agscUeGetNetworkStatus._name;			id._value = agscUeGetNetworkStatus._id;			return Status.STATUS_OK;		}		if (index==36) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUePdnEstablished._name;			id._value = agscUePdnEstablished._id;			return Status.STATUS_OK;		}		if (index==37) {			name._value = agscUePdnEstablishedConfirm._name;			id._value = agscUePdnEstablishedConfirm._id;			return Status.STATUS_OK;		}		if (index==38) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUePdnEstablishedExt._name;			id._value = agscUePdnEstablishedExt._id;			return Status.STATUS_OK;		}		if (index==39) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeRouterAdvertisementReceived._name;			id._value = agscUeRouterAdvertisementReceived._id;			return Status.STATUS_OK;		}		if (index==40) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUePdnRejected._name;			id._value = agscUePdnRejected._id;			return Status.STATUS_OK;		}		if (index==41) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUePdnReleased._name;			id._value = agscUePdnReleased._id;			return Status.STATUS_OK;		}		if (index==42) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUePdnDisconnectRejectRcd._name;			id._value = agscUePdnDisconnectRejectRcd._id;			return Status.STATUS_OK;		}		if (index==43) {			name._value = agscUeGetPdnList._name;			id._value = agscUeGetPdnList._id;			return Status.STATUS_OK;		}		if (index==44) {			name._value = agscUeGetPdnListExt._name;			id._value = agscUeGetPdnListExt._id;			return Status.STATUS_OK;		}		if (index==45) {			name._value = agscUeSetEpsNetworkRegistrationStatus._name;			id._value = agscUeSetEpsNetworkRegistrationStatus._id;			return Status.STATUS_OK;		}		if (index==46) {			name._value = agscUeGetEpsNetworkRegistrationStatus._name;			id._value = agscUeGetEpsNetworkRegistrationStatus._id;			return Status.STATUS_OK;		}		if (index==47) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeEpsNetworkRegistrationStatus._name;			id._value = agscUeEpsNetworkRegistrationStatus._id;			return Status.STATUS_OK;		}		if (index==48) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeSystemMode._name;			id._value = agscUeSystemMode._id;			return Status.STATUS_OK;		}		if (index==49) {			name._value = agscUeSetDefaultEpsBearerConfiguration._name;			id._value = agscUeSetDefaultEpsBearerConfiguration._id;			return Status.STATUS_OK;		}		if (index==50) {			name._value = agscUeUnsetDefaultEpsBearerConfiguration._name;			id._value = agscUeUnsetDefaultEpsBearerConfiguration._id;			return Status.STATUS_OK;		}		if (index==51) {			name._value = agscUeGetDefaultEpsBearerConfiguration._name;			id._value = agscUeGetDefaultEpsBearerConfiguration._id;			return Status.STATUS_OK;		}		if (index==52) {			name._value = agscUeSetDedicatedEpsBearerConfiguration._name;			id._value = agscUeSetDedicatedEpsBearerConfiguration._id;			return Status.STATUS_OK;		}		if (index==53) {			name._value = agscUeUnsetDedicatedEpsBearerConfiguration._name;			id._value = agscUeUnsetDedicatedEpsBearerConfiguration._id;			return Status.STATUS_OK;		}		if (index==54) {			name._value = agscUeGetDedicatedEpsBearerConfiguration._name;			id._value = agscUeGetDedicatedEpsBearerConfiguration._id;			return Status.STATUS_OK;		}		if (index==55) {			name._value = agscUeSetEpsBearerContextQos._name;			id._value = agscUeSetEpsBearerContextQos._id;			return Status.STATUS_OK;		}		if (index==56) {			name._value = agscUeUnsetEpsBearerContextQos._name;			id._value = agscUeUnsetEpsBearerContextQos._id;			return Status.STATUS_OK;		}		if (index==57) {			name._value = agscUeGetEpsBearerContextQos._name;			id._value = agscUeGetEpsBearerContextQos._id;			return Status.STATUS_OK;		}		if (index==58) {			name._value = agscUeSetEpsBearerContextTft._name;			id._value = agscUeSetEpsBearerContextTft._id;			return Status.STATUS_OK;		}		if (index==59) {			name._value = agscUeUnsetEpsBearerContextTft._name;			id._value = agscUeUnsetEpsBearerContextTft._id;			return Status.STATUS_OK;		}		if (index==60) {			name._value = agscUeGetEpsBearerContextTft._name;			id._value = agscUeGetEpsBearerContextTft._id;			return Status.STATUS_OK;		}		if (index==61) {			name._value = agscUeSetEpsBearerContextStatus._name;			id._value = agscUeSetEpsBearerContextStatus._id;			return Status.STATUS_OK;		}		if (index==62) {			name._value = agscUeGetEpsBearerContextStatus._name;			id._value = agscUeGetEpsBearerContextStatus._id;			return Status.STATUS_OK;		}		if (index==63) {			name._value = agscUeSetDefaultPdnCid._name;			id._value = agscUeSetDefaultPdnCid._id;			return Status.STATUS_OK;		}		if (index==64) {			name._value = agscUeGetDefaultPdnCid._name;			id._value = agscUeGetDefaultPdnCid._id;			return Status.STATUS_OK;		}		if (index==65) {			name._value = agscUeConfigureSimAccess._name;			id._value = agscUeConfigureSimAccess._id;			return Status.STATUS_OK;		}		if (index==66) {			name._value = agscUeRemoteSimPresent._name;			id._value = agscUeRemoteSimPresent._id;			return Status.STATUS_OK;		}		if (index==67) {			name._value = agscUeRemoteSimAbsent._name;			id._value = agscUeRemoteSimAbsent._id;			return Status.STATUS_OK;		}		if (index==68) {			name._value = agscUeRemoteSimPinUnlocked._name;			id._value = agscUeRemoteSimPinUnlocked._id;			return Status.STATUS_OK;		}		if (index==69) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeRemoteSimCommandReq._name;			id._value = agscUeRemoteSimCommandReq._id;			return Status.STATUS_OK;		}		if (index==70) {			name._value = agscUeRemoteSimCommandRsp._name;			id._value = agscUeRemoteSimCommandRsp._id;			return Status.STATUS_OK;		}		if (index==71) {			name._value = agscUeLockSimInterface._name;			id._value = agscUeLockSimInterface._id;			return Status.STATUS_OK;		}		if (index==72) {			name._value = agscUeSendSimCommand._name;			id._value = agscUeSendSimCommand._id;			return Status.STATUS_OK;		}		if (index==73) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeSimResponse._name;			id._value = agscUeSimResponse._id;			return Status.STATUS_OK;		}		if (index==74) {			name._value = agscUeSendCrsmCommand._name;			id._value = agscUeSendCrsmCommand._id;			return Status.STATUS_OK;		}		if (index==75) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeCrsmResponse._name;			id._value = agscUeCrsmResponse._id;			return Status.STATUS_OK;		}		if (index==76) {			name._value = agscUeGetSimPresence._name;			id._value = agscUeGetSimPresence._id;			return Status.STATUS_OK;		}		if (index==77) {			name._value = agscUeGetPinStatus._name;			id._value = agscUeGetPinStatus._id;			return Status.STATUS_OK;		}		if (index==78) {			name._value = agscUeGetEnabledPinStatus._name;			id._value = agscUeGetEnabledPinStatus._id;			return Status.STATUS_OK;		}		if (index==79) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUePinStatus._name;			id._value = agscUePinStatus._id;			return Status.STATUS_OK;		}		if (index==80) {			name._value = agscUeEnterPin._name;			id._value = agscUeEnterPin._id;			return Status.STATUS_OK;		}		if (index==81) {			name._value = agscUeEnterPuk._name;			id._value = agscUeEnterPuk._id;			return Status.STATUS_OK;		}		if (index==82) {			name._value = agscUeChangePin._name;			id._value = agscUeChangePin._id;			return Status.STATUS_OK;		}		if (index==83) {			name._value = agscUeEnablePin._name;			id._value = agscUeEnablePin._id;			return Status.STATUS_OK;		}		if (index==84) {			name._value = agscUeGetPinPukRetries._name;			id._value = agscUeGetPinPukRetries._id;			return Status.STATUS_OK;		}		if (index==85) {			name._value = agscUeGetUsimEfBinary._name;			id._value = agscUeGetUsimEfBinary._id;			return Status.STATUS_OK;		}		if (index==86) {			name._value = agscUeGetUsimEfRecord._name;			id._value = agscUeGetUsimEfRecord._id;			return Status.STATUS_OK;		}		if (index==87) {			name._value = agscUeGetUsimEf._name;			id._value = agscUeGetUsimEf._id;			return Status.STATUS_OK;		}		if (index==88) {			name._value = agscUeGetUsimEfPath._name;			id._value = agscUeGetUsimEfPath._id;			return Status.STATUS_OK;		}		if (index==89) {			name._value = agscUeGetServiceTimerValue._name;			id._value = agscUeGetServiceTimerValue._id;			return Status.STATUS_OK;		}		if (index==90) {			name._value = agscUeSetServiceTimerValue._name;			id._value = agscUeSetServiceTimerValue._id;			return Status.STATUS_OK;		}		if (index==91) {			name._value = agscUeSetSimCachedMode._name;			id._value = agscUeSetSimCachedMode._id;			return Status.STATUS_OK;		}		if (index==92) {			name._value = agscUeGetSimCachedMode._name;			id._value = agscUeGetSimCachedMode._id;			return Status.STATUS_OK;		}		if (index==93) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeSimPhysicalAccessNeeded._name;			id._value = agscUeSimPhysicalAccessNeeded._id;			return Status.STATUS_OK;		}		if (index==94) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeIccId._name;			id._value = agscUeIccId._id;			return Status.STATUS_OK;		}		if (index==95) {			name._value = agscUeGetIccId._name;			id._value = agscUeGetIccId._id;			return Status.STATUS_OK;		}		if (index==96) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeRrcStateInfo._name;			id._value = agscUeRrcStateInfo._id;			return Status.STATUS_OK;		}		if (index==97) {			name._value = agscUeGetCellReselectionInfo._name;			id._value = agscUeGetCellReselectionInfo._id;			return Status.STATUS_OK;		}		if (index==98) {			name._value = agscUeGetCampCellInfo._name;			id._value = agscUeGetCampCellInfo._id;			return Status.STATUS_OK;		}		if (index==99) {			name._value = agscUeSetCellScanConfig._name;			id._value = agscUeSetCellScanConfig._id;			return Status.STATUS_OK;		}		if (index==100) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeCellScanReport._name;			id._value = agscUeCellScanReport._id;			return Status.STATUS_OK;		}		if (index==101) {			name._value = agscUeSetRequiredCellList._name;			id._value = agscUeSetRequiredCellList._id;			return Status.STATUS_OK;		}		if (index==102) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeCellMeasReport._name;			id._value = agscUeCellMeasReport._id;			return Status.STATUS_OK;		}		if (index==103) {			name._value = agscUeSetInitialCellSelectionConfig._name;			id._value = agscUeSetInitialCellSelectionConfig._id;			return Status.STATUS_OK;		}		if (index==104) {			name._value = agscUeGetInitialCellSelectionConfig._name;			id._value = agscUeGetInitialCellSelectionConfig._id;			return Status.STATUS_OK;		}		if (index==105) {			name._value = agscUeAddInitialCellSelectionBand._name;			id._value = agscUeAddInitialCellSelectionBand._id;			return Status.STATUS_OK;		}		if (index==106) {			name._value = agscUeAddInitialCellSelectionFreq._name;			id._value = agscUeAddInitialCellSelectionFreq._id;			return Status.STATUS_OK;		}		if (index==107) {			name._value = agscUeAddInitialCellSelectionFreqRange._name;			id._value = agscUeAddInitialCellSelectionFreqRange._id;			return Status.STATUS_OK;		}		if (index==108) {			name._value = agscUeRemoveInitialCellSelectionFreq._name;			id._value = agscUeRemoveInitialCellSelectionFreq._id;			return Status.STATUS_OK;		}		if (index==109) {			name._value = agscUeRemoveAllInitialCellSelectionFreq._name;			id._value = agscUeRemoveAllInitialCellSelectionFreq._id;			return Status.STATUS_OK;		}		if (index==110) {			name._value = agscUeSetPlmnSelectParam._name;			id._value = agscUeSetPlmnSelectParam._id;			return Status.STATUS_OK;		}		if (index==111) {			name._value = agscUeGetPlmnSelectParam._name;			id._value = agscUeGetPlmnSelectParam._id;			return Status.STATUS_OK;		}		if (index==112) {			name._value = agscUeSetSpecificDrxCycle._name;			id._value = agscUeSetSpecificDrxCycle._id;			return Status.STATUS_OK;		}		if (index==113) {			name._value = agscUeGetSpecificDrxCycle._name;			id._value = agscUeGetSpecificDrxCycle._id;			return Status.STATUS_OK;		}		if (index==114) {			name._value = agscUeGetEntityThroughput._name;			id._value = agscUeGetEntityThroughput._id;			return Status.STATUS_OK;		}		if (index==115) {			name._value = agscUeGetLayerThroughput._name;			id._value = agscUeGetLayerThroughput._id;			return Status.STATUS_OK;		}		if (index==116) {			name._value = agscUeGetEntityPdcpParams._name;			id._value = agscUeGetEntityPdcpParams._id;			return Status.STATUS_OK;		}		if (index==117) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUePdcpEntityParamsChanged._name;			id._value = agscUePdcpEntityParamsChanged._id;			return Status.STATUS_OK;		}		if (index==118) {			name._value = agscUeGetRbParams._name;			id._value = agscUeGetRbParams._id;			return Status.STATUS_OK;		}		if (index==119) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeRbParamsChanged._name;			id._value = agscUeRbParamsChanged._id;			return Status.STATUS_OK;		}		if (index==120) {			name._value = agscUeGetLchEntityParams._name;			id._value = agscUeGetLchEntityParams._id;			return Status.STATUS_OK;		}		if (index==121) {			serviceType.value = (agscUeImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscUeLchEntityParamsChanged._name;			id._value = agscUeLchEntityParamsChanged._id;			return Status.STATUS_OK;		}		if (index==122) {			name._value = agscUeGetMacStats._name;			id._value = agscUeGetMacStats._id;			return Status.STATUS_OK;		}		if (index==123) {			name._value = agscUeGetBlockErrorRateStats._name;			id._value = agscUeGetBlockErrorRateStats._id;			return Status.STATUS_OK;		}		if (index==124) {			name._value = agscUeGetBufferStatusReport._name;			id._value = agscUeGetBufferStatusReport._id;			return Status.STATUS_OK;		}		if (index==125) {			name._value = agscUeGetHarqStats._name;			id._value = agscUeGetHarqStats._id;			return Status.STATUS_OK;		}		if (index==126) {			name._value = agscUeGetCqiConfig._name;			id._value = agscUeGetCqiConfig._id;			return Status.STATUS_OK;		}		if (index==127) {			name._value = agscUeGetDlMcsConfig._name;			id._value = agscUeGetDlMcsConfig._id;			return Status.STATUS_OK;		}		if (index==128) {			name._value = agscUeGetUlMcsConfig._name;			id._value = agscUeGetUlMcsConfig._id;			return Status.STATUS_OK;		}		if (index==129) {			name._value = agscUeGetRadioResourceControlInfo._name;			id._value = agscUeGetRadioResourceControlInfo._id;			return Status.STATUS_OK;		}		if (index==130) {			name._value = agscUeGetCinr._name;			id._value = agscUeGetCinr._id;			return Status.STATUS_OK;		}		if (index==131) {			name._value = agscUeGetPhyStats._name;			id._value = agscUeGetPhyStats._id;			return Status.STATUS_OK;		}		if (index==132) {			name._value = agscUeGetPhyRxStats._name;			id._value = agscUeGetPhyRxStats._id;			return Status.STATUS_OK;		}		if (index==133) {			name._value = agscUeGetPhyTxStats._name;			id._value = agscUeGetPhyTxStats._id;			return Status.STATUS_OK;		}		if (index==134) {			name._value = agscUeGetIdentities._name;			id._value = agscUeGetIdentities._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int SetT3402(int t3402s) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetT3402.marshall(marshallBuf, 16000, _offset, t3402s);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetT3402._id, agscUeSetT3402._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetT3402.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int PdnDisconnectResponse(long cid) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUePdnDisconnectResponse.marshall(marshallBuf, 16000, _offset, cid);		if (st != Status.STATUS_OK) return st;			byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification			System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);			byte[] returnBuf = DeviceController.invoke(agscUePdnDisconnectResponse._id, agscUePdnDisconnectResponse._name, queryBuf, false);		return Status.STATUS_OK;	}	public static int DetachConfirm() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeDetachConfirm.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;			byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification			System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);			byte[] returnBuf = DeviceController.invoke(agscUeDetachConfirm._id, agscUeDetachConfirm._name, queryBuf, false);		return Status.STATUS_OK;	}	public static int SetUeConfiguration(final sqnUeConfiguration ueConfig) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetUeConfiguration.marshall(marshallBuf, 16000, _offset, ueConfig);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetUeConfiguration._id, agscUeSetUeConfiguration._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetUeConfiguration.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetEpsBearerAuthenticationProtocol(final sqnAuthenticationParam authParam) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetEpsBearerAuthenticationProtocol.marshall(marshallBuf, 16000, _offset, authParam);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetEpsBearerAuthenticationProtocol._id, agscUeSetEpsBearerAuthenticationProtocol._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetEpsBearerAuthenticationProtocol.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEpsBearerAuthenticationProtocol(OutArray<sqnAuthenticationParam> authCtx) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEpsBearerAuthenticationProtocol.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEpsBearerAuthenticationProtocol._id, agscUeGetEpsBearerAuthenticationProtocol._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEpsBearerAuthenticationProtocol.unmarshall(returnBuf, returnBuf.length, _offset, authCtx);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetCfunLevel(OutValue<sqnModemFunctionalityLevel> cfunLevel) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetCfunLevel.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetCfunLevel._id, agscUeGetCfunLevel._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetCfunLevel.unmarshall(returnBuf, returnBuf.length, _offset, cfunLevel);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EnterAirPlaneMode() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeEnterAirPlaneMode.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeEnterAirPlaneMode._id, agscUeEnterAirPlaneMode._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeEnterAirPlaneMode.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetAutoAttach(boolean enable) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetAutoAttach.marshall(marshallBuf, 16000, _offset, enable);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetAutoAttach._id, agscUeSetAutoAttach._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetAutoAttach.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetAutoAttach(OutValue<Boolean> enable) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetAutoAttach.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetAutoAttach._id, agscUeGetAutoAttach._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetAutoAttach.unmarshall(returnBuf, returnBuf.length, _offset, enable);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EpsAttach() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeEpsAttach.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeEpsAttach._id, agscUeEpsAttach._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeEpsAttach.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EpsDetach(boolean startT3402) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeEpsDetach.marshall(marshallBuf, 16000, _offset, startT3402);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeEpsDetach._id, agscUeEpsDetach._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeEpsDetach.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEpsBearerIdList(OutArray<Short> epsBearerId) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEpsBearerIdList.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEpsBearerIdList._id, agscUeGetEpsBearerIdList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEpsBearerIdList.unmarshall(returnBuf, returnBuf.length, _offset, epsBearerId);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEpsBearerInfo(short epsBearerId, OutValue<sqnEpsBearerInfo> info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEpsBearerInfo.marshall(marshallBuf, 16000, _offset, epsBearerId);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEpsBearerInfo._id, agscUeGetEpsBearerInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEpsBearerInfo.unmarshall(returnBuf, returnBuf.length, _offset, info);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPlmnList(OutValue<EpsPlmnIdList> equivalentPlmnList, OutValue<EpsPlmnIdList> forbiddenPlmnList) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetPlmnList.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetPlmnList._id, agscUeGetPlmnList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetPlmnList.unmarshall(returnBuf, returnBuf.length, _offset, equivalentPlmnList, forbiddenPlmnList);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetTrackingAreaIdList(sqnTaiListType type, OutValue<EpsTaiList> taiList) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetTrackingAreaIdList.marshall(marshallBuf, 16000, _offset, type);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetTrackingAreaIdList._id, agscUeGetTrackingAreaIdList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetTrackingAreaIdList.unmarshall(returnBuf, returnBuf.length, _offset, taiList);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEmmStateInfo(OutValue<sqnEmmStateInfo> info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEmmStateInfo.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEmmStateInfo._id, agscUeGetEmmStateInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEmmStateInfo.unmarshall(returnBuf, returnBuf.length, _offset, info);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetNasInfo(OutValue<sqnNasInfo> info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetNasInfo.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetNasInfo._id, agscUeGetNasInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetNasInfo.unmarshall(returnBuf, returnBuf.length, _offset, info);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetPlmnSelectionMode(final sqnPlmnSelectMode mode, final sqnPlmnFormat format, final String pPlmn, final sqnAct act) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetPlmnSelectionMode.marshall(marshallBuf, 16000, _offset, mode, format, pPlmn, act);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetPlmnSelectionMode._id, agscUeSetPlmnSelectionMode._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetPlmnSelectionMode.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetAvailablePlmnList() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetAvailablePlmnList.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetAvailablePlmnList._id, agscUeGetAvailablePlmnList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetAvailablePlmnList.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPlmnSelectionMode(OutValue<sqnPlmnSelectMode> plmnSelMode) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetPlmnSelectionMode.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetPlmnSelectionMode._id, agscUeGetPlmnSelectionMode._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetPlmnSelectionMode.unmarshall(returnBuf, returnBuf.length, _offset, plmnSelMode);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetAttachReqEpsBearerInfo(final sqnAttachReqEpsBearerInfo info, OutValue<Integer> status) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetAttachReqEpsBearerInfo.marshall(marshallBuf, 16000, _offset, info);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetAttachReqEpsBearerInfo._id, agscUeSetAttachReqEpsBearerInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetAttachReqEpsBearerInfo.unmarshall(returnBuf, returnBuf.length, _offset, status);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetAttachReqEpsBearerInfo(OutValue<sqnAttachReqEpsBearerInfo> info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetAttachReqEpsBearerInfo.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetAttachReqEpsBearerInfo._id, agscUeGetAttachReqEpsBearerInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetAttachReqEpsBearerInfo.unmarshall(returnBuf, returnBuf.length, _offset, info);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetNetworkStatus(OutValue<MmUeState> registrationState) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetNetworkStatus.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetNetworkStatus._id, agscUeGetNetworkStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetNetworkStatus.unmarshall(returnBuf, returnBuf.length, _offset, registrationState);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int PdnEstablishedConfirm(long cid) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUePdnEstablishedConfirm.marshall(marshallBuf, 16000, _offset, cid);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUePdnEstablishedConfirm._id, agscUePdnEstablishedConfirm._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUePdnEstablishedConfirm.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPdnList(OutArray<sqnPdnConfig> pdn) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetPdnList.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetPdnList._id, agscUeGetPdnList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetPdnList.unmarshall(returnBuf, returnBuf.length, _offset, pdn);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPdnListExt(OutArray<sqnPdnConfigExt> pdn) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetPdnListExt.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetPdnListExt._id, agscUeGetPdnListExt._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetPdnListExt.unmarshall(returnBuf, returnBuf.length, _offset, pdn);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetEpsNetworkRegistrationStatus(boolean enable) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetEpsNetworkRegistrationStatus.marshall(marshallBuf, 16000, _offset, enable);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetEpsNetworkRegistrationStatus._id, agscUeSetEpsNetworkRegistrationStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetEpsNetworkRegistrationStatus.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEpsNetworkRegistrationStatus(OutValue<Boolean> enable, OutValue<sqnNetworkRegistrationInfo> networkRegistrationInfo) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEpsNetworkRegistrationStatus.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEpsNetworkRegistrationStatus._id, agscUeGetEpsNetworkRegistrationStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEpsNetworkRegistrationStatus.unmarshall(returnBuf, returnBuf.length, _offset, enable, networkRegistrationInfo);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetDefaultEpsBearerConfiguration(final sqnDefaultEpsBearerCtxInfo info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetDefaultEpsBearerConfiguration.marshall(marshallBuf, 16000, _offset, info);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetDefaultEpsBearerConfiguration._id, agscUeSetDefaultEpsBearerConfiguration._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetDefaultEpsBearerConfiguration.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int UnsetDefaultEpsBearerConfiguration(long cid) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeUnsetDefaultEpsBearerConfiguration.marshall(marshallBuf, 16000, _offset, cid);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeUnsetDefaultEpsBearerConfiguration._id, agscUeUnsetDefaultEpsBearerConfiguration._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeUnsetDefaultEpsBearerConfiguration.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetDefaultEpsBearerConfiguration(OutArray<sqnDefaultEpsBearerCtxInfo> ctx) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetDefaultEpsBearerConfiguration.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetDefaultEpsBearerConfiguration._id, agscUeGetDefaultEpsBearerConfiguration._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetDefaultEpsBearerConfiguration.unmarshall(returnBuf, returnBuf.length, _offset, ctx);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetDedicatedEpsBearerConfiguration(final sqnDedicatedEpsBearerCtxInfo info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetDedicatedEpsBearerConfiguration.marshall(marshallBuf, 16000, _offset, info);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetDedicatedEpsBearerConfiguration._id, agscUeSetDedicatedEpsBearerConfiguration._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetDedicatedEpsBearerConfiguration.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int UnsetDedicatedEpsBearerConfiguration(long cid) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeUnsetDedicatedEpsBearerConfiguration.marshall(marshallBuf, 16000, _offset, cid);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeUnsetDedicatedEpsBearerConfiguration._id, agscUeUnsetDedicatedEpsBearerConfiguration._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeUnsetDedicatedEpsBearerConfiguration.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetDedicatedEpsBearerConfiguration(OutArray<sqnDedicatedEpsBearerCtxInfo> ctx) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetDedicatedEpsBearerConfiguration.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetDedicatedEpsBearerConfiguration._id, agscUeGetDedicatedEpsBearerConfiguration._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetDedicatedEpsBearerConfiguration.unmarshall(returnBuf, returnBuf.length, _offset, ctx);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetEpsBearerContextQos(final sqnEpsBearerCtxQos qos) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetEpsBearerContextQos.marshall(marshallBuf, 16000, _offset, qos);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetEpsBearerContextQos._id, agscUeSetEpsBearerContextQos._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetEpsBearerContextQos.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int UnsetEpsBearerContextQos(long cid) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeUnsetEpsBearerContextQos.marshall(marshallBuf, 16000, _offset, cid);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeUnsetEpsBearerContextQos._id, agscUeUnsetEpsBearerContextQos._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeUnsetEpsBearerContextQos.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEpsBearerContextQos(OutArray<sqnEpsBearerCtxQos> qos) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEpsBearerContextQos.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEpsBearerContextQos._id, agscUeGetEpsBearerContextQos._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEpsBearerContextQos.unmarshall(returnBuf, returnBuf.length, _offset, qos);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetEpsBearerContextTft(final sqnEpsBearerCtxTft tft) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetEpsBearerContextTft.marshall(marshallBuf, 16000, _offset, tft);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetEpsBearerContextTft._id, agscUeSetEpsBearerContextTft._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetEpsBearerContextTft.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int UnsetEpsBearerContextTft(long cid) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeUnsetEpsBearerContextTft.marshall(marshallBuf, 16000, _offset, cid);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeUnsetEpsBearerContextTft._id, agscUeUnsetEpsBearerContextTft._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeUnsetEpsBearerContextTft.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEpsBearerContextTft(long cid, OutValue<Boolean> tftPresent, OutValue<EpsTft> tft) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEpsBearerContextTft.marshall(marshallBuf, 16000, _offset, cid);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEpsBearerContextTft._id, agscUeGetEpsBearerContextTft._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEpsBearerContextTft.unmarshall(returnBuf, returnBuf.length, _offset, tftPresent, tft);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetEpsBearerContextStatus(long cid, boolean activate, boolean incThrottling) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetEpsBearerContextStatus.marshall(marshallBuf, 16000, _offset, cid, activate, incThrottling);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetEpsBearerContextStatus._id, agscUeSetEpsBearerContextStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetEpsBearerContextStatus.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEpsBearerContextStatus(OutArray<sqnActivationStatus> ctx) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEpsBearerContextStatus.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEpsBearerContextStatus._id, agscUeGetEpsBearerContextStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEpsBearerContextStatus.unmarshall(returnBuf, returnBuf.length, _offset, ctx);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetDefaultPdnCid(final long cid) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetDefaultPdnCid.marshall(marshallBuf, 16000, _offset, cid);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetDefaultPdnCid._id, agscUeSetDefaultPdnCid._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetDefaultPdnCid.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetDefaultPdnCid(OutValue<Long> cid) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetDefaultPdnCid.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetDefaultPdnCid._id, agscUeGetDefaultPdnCid._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetDefaultPdnCid.unmarshall(returnBuf, returnBuf.length, _offset, cid);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ConfigureSimAccess(final boolean remote) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeConfigureSimAccess.marshall(marshallBuf, 16000, _offset, remote);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeConfigureSimAccess._id, agscUeConfigureSimAccess._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeConfigureSimAccess.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int RemoteSimPresent() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeRemoteSimPresent.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeRemoteSimPresent._id, agscUeRemoteSimPresent._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeRemoteSimPresent.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int RemoteSimAbsent() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeRemoteSimAbsent.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeRemoteSimAbsent._id, agscUeRemoteSimAbsent._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeRemoteSimAbsent.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int RemoteSimPinUnlocked() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeRemoteSimPinUnlocked.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeRemoteSimPinUnlocked._id, agscUeRemoteSimPinUnlocked._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeRemoteSimPinUnlocked.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int RemoteSimCommandRsp(final String response, boolean isSuccess) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeRemoteSimCommandRsp.marshall(marshallBuf, 16000, _offset, response, isSuccess);		if (st != Status.STATUS_OK) return st;			byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification			System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);			byte[] returnBuf = DeviceController.invoke(agscUeRemoteSimCommandRsp._id, agscUeRemoteSimCommandRsp._name, queryBuf, false);		return Status.STATUS_OK;	}	public static int LockSimInterface(final boolean status) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeLockSimInterface.marshall(marshallBuf, 16000, _offset, status);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeLockSimInterface._id, agscUeLockSimInterface._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeLockSimInterface.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SendSimCommand(final sqnSimCommandReq cmdReq) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSendSimCommand.marshall(marshallBuf, 16000, _offset, cmdReq);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSendSimCommand._id, agscUeSendSimCommand._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSendSimCommand.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SendCrsmCommand(final sqnCrsmCommandReq cmdReq) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSendCrsmCommand.marshall(marshallBuf, 16000, _offset, cmdReq);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSendCrsmCommand._id, agscUeSendCrsmCommand._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSendCrsmCommand.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetSimPresence(OutValue<Boolean> simPresent) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetSimPresence.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetSimPresence._id, agscUeGetSimPresence._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetSimPresence.unmarshall(returnBuf, returnBuf.length, _offset, simPresent);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPinStatus(OutValue<sqnPinStatus> pinStatus, OutValue<Short> remainingAttempts) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetPinStatus.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetPinStatus._id, agscUeGetPinStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetPinStatus.unmarshall(returnBuf, returnBuf.length, _offset, pinStatus, remainingAttempts);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEnabledPinStatus(OutValue<Boolean> enabled) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEnabledPinStatus.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEnabledPinStatus._id, agscUeGetEnabledPinStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEnabledPinStatus.unmarshall(returnBuf, returnBuf.length, _offset, enabled);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EnterPin(final String pin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeEnterPin.marshall(marshallBuf, 16000, _offset, pin);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeEnterPin._id, agscUeEnterPin._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeEnterPin.unmarshall(returnBuf, returnBuf.length, _offset, status, remainingAttempts);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EnterPuk(final String puk, final String newPin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeEnterPuk.marshall(marshallBuf, 16000, _offset, puk, newPin);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeEnterPuk._id, agscUeEnterPuk._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeEnterPuk.unmarshall(returnBuf, returnBuf.length, _offset, status, remainingAttempts);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ChangePin(final String oldPin, final String newPin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeChangePin.marshall(marshallBuf, 16000, _offset, oldPin, newPin);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeChangePin._id, agscUeChangePin._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeChangePin.unmarshall(returnBuf, returnBuf.length, _offset, status, remainingAttempts);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EnablePin(final String pin, boolean enable, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeEnablePin.marshall(marshallBuf, 16000, _offset, pin, enable);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeEnablePin._id, agscUeEnablePin._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeEnablePin.unmarshall(returnBuf, returnBuf.length, _offset, status, remainingAttempts);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPinPukRetries(OutValue<Short> pinRetries, OutValue<Short> pinDefaultRetries, OutValue<Short> pukRetries, OutValue<Short> pukDefaultRetries) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetPinPukRetries.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetPinPukRetries._id, agscUeGetPinPukRetries._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetPinPukRetries.unmarshall(returnBuf, returnBuf.length, _offset, pinRetries, pinDefaultRetries, pukRetries, pukDefaultRetries);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetUsimEfBinary(final sqnUsimEfPath path, int offset, short length, OutValue<sqnReafEfStatus> status, OutValue<sqnUsimEfBinary> binaryData) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetUsimEfBinary.marshall(marshallBuf, 16000, _offset, path, offset, length);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetUsimEfBinary._id, agscUeGetUsimEfBinary._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetUsimEfBinary.unmarshall(returnBuf, returnBuf.length, _offset, status, binaryData);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetUsimEfRecord(final sqnUsimEfPath path, long recordId, OutValue<sqnReafEfStatus> status, OutValue<sqnUsimEfRecord> record) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetUsimEfRecord.marshall(marshallBuf, 16000, _offset, path, recordId);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetUsimEfRecord._id, agscUeGetUsimEfRecord._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetUsimEfRecord.unmarshall(returnBuf, returnBuf.length, _offset, status, record);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetUsimEf(final sqnUsimEfPath path, OutValue<sqnReafEfStatus> status, OutValue<sqnUsimEf> ef) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetUsimEf.marshall(marshallBuf, 16000, _offset, path);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetUsimEf._id, agscUeGetUsimEf._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetUsimEf.unmarshall(returnBuf, returnBuf.length, _offset, status, ef);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetUsimEfPath(sqnUsimEfType efType, OutValue<sqnUsimEfPath> efPath) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetUsimEfPath.marshall(marshallBuf, 16000, _offset, efType);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetUsimEfPath._id, agscUeGetUsimEfPath._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetUsimEfPath.unmarshall(returnBuf, returnBuf.length, _offset, efPath);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetServiceTimerValue(OutValue<Integer> valueInSeconds) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetServiceTimerValue.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetServiceTimerValue._id, agscUeGetServiceTimerValue._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetServiceTimerValue.unmarshall(returnBuf, returnBuf.length, _offset, valueInSeconds);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetServiceTimerValue(int valueInSeconds) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetServiceTimerValue.marshall(marshallBuf, 16000, _offset, valueInSeconds);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetServiceTimerValue._id, agscUeSetServiceTimerValue._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetServiceTimerValue.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetSimCachedMode(long isCached) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetSimCachedMode.marshall(marshallBuf, 16000, _offset, isCached);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetSimCachedMode._id, agscUeSetSimCachedMode._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetSimCachedMode.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetSimCachedMode(OutValue<Boolean> isCached) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetSimCachedMode.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetSimCachedMode._id, agscUeGetSimCachedMode._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetSimCachedMode.unmarshall(returnBuf, returnBuf.length, _offset, isCached);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetIccId(OutValue<String> id) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetIccId.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetIccId._id, agscUeGetIccId._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetIccId.unmarshall(returnBuf, returnBuf.length, _offset, id);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetCellReselectionInfo(OutValue<sqnCellReselectionInfo> info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetCellReselectionInfo.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetCellReselectionInfo._id, agscUeGetCellReselectionInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetCellReselectionInfo.unmarshall(returnBuf, returnBuf.length, _offset, info);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetCampCellInfo(OutValue<sqnCampedCellInfo> info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetCampCellInfo.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetCampCellInfo._id, agscUeGetCampCellInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetCampCellInfo.unmarshall(returnBuf, returnBuf.length, _offset, info);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetCellScanConfig(final sqnCellScanConfig config) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetCellScanConfig.marshall(marshallBuf, 16000, _offset, config);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetCellScanConfig._id, agscUeSetCellScanConfig._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetCellScanConfig.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetRequiredCellList(final sqnRequiredCellList config) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetRequiredCellList.marshall(marshallBuf, 16000, _offset, config);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetRequiredCellList._id, agscUeSetRequiredCellList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetRequiredCellList.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetInitialCellSelectionConfig(final sqnInitialCellSelectionConfig cfg) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetInitialCellSelectionConfig.marshall(marshallBuf, 16000, _offset, cfg);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetInitialCellSelectionConfig._id, agscUeSetInitialCellSelectionConfig._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetInitialCellSelectionConfig.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetInitialCellSelectionConfig(OutValue<sqnInitialCellSelectionConfig> info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetInitialCellSelectionConfig.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetInitialCellSelectionConfig._id, agscUeGetInitialCellSelectionConfig._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetInitialCellSelectionConfig.unmarshall(returnBuf, returnBuf.length, _offset, info);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int AddInitialCellSelectionBand(final sqnBandInfo band) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeAddInitialCellSelectionBand.marshall(marshallBuf, 16000, _offset, band);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeAddInitialCellSelectionBand._id, agscUeAddInitialCellSelectionBand._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeAddInitialCellSelectionBand.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int AddInitialCellSelectionFreq(short band, int earfcn) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeAddInitialCellSelectionFreq.marshall(marshallBuf, 16000, _offset, band, earfcn);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeAddInitialCellSelectionFreq._id, agscUeAddInitialCellSelectionFreq._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeAddInitialCellSelectionFreq.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int AddInitialCellSelectionFreqRange(short band, int earfcnMin, int earfcnMax) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeAddInitialCellSelectionFreqRange.marshall(marshallBuf, 16000, _offset, band, earfcnMin, earfcnMax);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeAddInitialCellSelectionFreqRange._id, agscUeAddInitialCellSelectionFreqRange._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeAddInitialCellSelectionFreqRange.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int RemoveInitialCellSelectionFreq(short bandNumber, int earfcn) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeRemoveInitialCellSelectionFreq.marshall(marshallBuf, 16000, _offset, bandNumber, earfcn);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeRemoveInitialCellSelectionFreq._id, agscUeRemoveInitialCellSelectionFreq._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeRemoveInitialCellSelectionFreq.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int RemoveAllInitialCellSelectionFreq() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeRemoveAllInitialCellSelectionFreq.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeRemoveAllInitialCellSelectionFreq._id, agscUeRemoveAllInitialCellSelectionFreq._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeRemoveAllInitialCellSelectionFreq.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetPlmnSelectParam(final sqnPlmnSelectParam param) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetPlmnSelectParam.marshall(marshallBuf, 16000, _offset, param);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetPlmnSelectParam._id, agscUeSetPlmnSelectParam._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetPlmnSelectParam.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPlmnSelectParam(OutValue<sqnPlmnSelectParam> info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetPlmnSelectParam.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetPlmnSelectParam._id, agscUeGetPlmnSelectParam._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetPlmnSelectParam.unmarshall(returnBuf, returnBuf.length, _offset, info);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetSpecificDrxCycle(sqnDrxCycleParameterMs specDrxCycle) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeSetSpecificDrxCycle.marshall(marshallBuf, 16000, _offset, specDrxCycle);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeSetSpecificDrxCycle._id, agscUeSetSpecificDrxCycle._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeSetSpecificDrxCycle.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetSpecificDrxCycle(OutValue<sqnDrxCycleParameterMs> specDrxCycle) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetSpecificDrxCycle.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetSpecificDrxCycle._id, agscUeGetSpecificDrxCycle._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetSpecificDrxCycle.unmarshall(returnBuf, returnBuf.length, _offset, specDrxCycle);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEntityThroughput(OutValue<sqnThroughput> throughput) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEntityThroughput.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEntityThroughput._id, agscUeGetEntityThroughput._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEntityThroughput.unmarshall(returnBuf, returnBuf.length, _offset, throughput);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetLayerThroughput(OutValue<sqnThroughputPerLayer> throughput) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetLayerThroughput.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetLayerThroughput._id, agscUeGetLayerThroughput._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetLayerThroughput.unmarshall(returnBuf, returnBuf.length, _offset, throughput);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEntityPdcpParams(OutArray<sqnPdcpEntityParams> entity) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetEntityPdcpParams.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetEntityPdcpParams._id, agscUeGetEntityPdcpParams._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetEntityPdcpParams.unmarshall(returnBuf, returnBuf.length, _offset, entity);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetRbParams(OutArray<sqnRlcRbEntityParams> entity) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetRbParams.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetRbParams._id, agscUeGetRbParams._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetRbParams.unmarshall(returnBuf, returnBuf.length, _offset, entity);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetLchEntityParams(OutArray<sqnMacLchEntityParams> entity) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetLchEntityParams.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetLchEntityParams._id, agscUeGetLchEntityParams._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetLchEntityParams.unmarshall(returnBuf, returnBuf.length, _offset, entity);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetMacStats(OutValue<sqnMacStatistics> stats) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetMacStats.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetMacStats._id, agscUeGetMacStats._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetMacStats.unmarshall(returnBuf, returnBuf.length, _offset, stats);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetBlockErrorRateStats(OutValue<sqnBlockErrorRateStats> bler) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetBlockErrorRateStats.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetBlockErrorRateStats._id, agscUeGetBlockErrorRateStats._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetBlockErrorRateStats.unmarshall(returnBuf, returnBuf.length, _offset, bler);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetBufferStatusReport(OutValue<sqnBufferStatusReport> bsr) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetBufferStatusReport.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetBufferStatusReport._id, agscUeGetBufferStatusReport._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetBufferStatusReport.unmarshall(returnBuf, returnBuf.length, _offset, bsr);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetHarqStats(OutValue<sqnHarqStatistics> stats) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetHarqStats.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetHarqStats._id, agscUeGetHarqStats._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetHarqStats.unmarshall(returnBuf, returnBuf.length, _offset, stats);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetCqiConfig(OutValue<sqnCqiConfig> config) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetCqiConfig.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetCqiConfig._id, agscUeGetCqiConfig._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetCqiConfig.unmarshall(returnBuf, returnBuf.length, _offset, config);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetDlMcsConfig(OutArray<sqnMcsConfig> entity) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetDlMcsConfig.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetDlMcsConfig._id, agscUeGetDlMcsConfig._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetDlMcsConfig.unmarshall(returnBuf, returnBuf.length, _offset, entity);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetUlMcsConfig(OutArray<sqnMcsUlConfig> entity) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetUlMcsConfig.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetUlMcsConfig._id, agscUeGetUlMcsConfig._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetUlMcsConfig.unmarshall(returnBuf, returnBuf.length, _offset, entity);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetRadioResourceControlInfo(OutValue<sqnRadioResourceControlInfo> config) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetRadioResourceControlInfo.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetRadioResourceControlInfo._id, agscUeGetRadioResourceControlInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetRadioResourceControlInfo.unmarshall(returnBuf, returnBuf.length, _offset, config);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetCinr(OutValue<sqnCinr> cinr) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetCinr.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetCinr._id, agscUeGetCinr._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetCinr.unmarshall(returnBuf, returnBuf.length, _offset, cinr);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPhyStats(OutValue<sqnPhyStats> pPhyStats) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetPhyStats.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetPhyStats._id, agscUeGetPhyStats._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetPhyStats.unmarshall(returnBuf, returnBuf.length, _offset, pPhyStats);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPhyRxStats(OutValue<sqnPhyStats> pPhyRxStats) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetPhyRxStats.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetPhyRxStats._id, agscUeGetPhyRxStats._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetPhyRxStats.unmarshall(returnBuf, returnBuf.length, _offset, pPhyRxStats);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPhyTxStats(OutValue<sqnPhyTxStats> pPhyTxStats) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetPhyTxStats.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetPhyTxStats._id, agscUeGetPhyTxStats._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetPhyTxStats.unmarshall(returnBuf, returnBuf.length, _offset, pPhyTxStats);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetIdentities(OutValue<sqnUeIdentities> identities) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscUeGetIdentities.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscUeGetIdentities._id, agscUeGetIdentities._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscUeGetIdentities.unmarshall(returnBuf, returnBuf.length, _offset, identities);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static UeClient _use;}