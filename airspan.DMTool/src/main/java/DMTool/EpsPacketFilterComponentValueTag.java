/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class EpsPacketFilterComponentValueTag {	public sqnMaskedIpAddress remoteIpAddress;	public short protocoIdNextHeader;	public sqnProtocolPortRange localPortRange;	public sqnProtocolPortRange remotePortRange;	public long spi;	public sqnIpDscpValueMask dscp;	public long flowLabel;	public EpsPacketFilterComponentValueTag() {		// Initialization		// remoteIpAddress		remoteIpAddress = new sqnMaskedIpAddress();		// localPortRange		localPortRange = new sqnProtocolPortRange();		// remotePortRange		remotePortRange = new sqnProtocolPortRange();		// dscp		dscp = new sqnIpDscpValueMask();	}	public static int marshall(byte[] buf, final EpsPacketFilterComponentValueTag p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+0)) return DccError.ERR_OVERFLOW;		// remoteIpAddress		if ( Status.STATUS_OK != (st = sqnMaskedIpAddress.marshall(buf, p.remoteIpAddress, _offset)) ) return st;		// protocoIdNextHeader		Util.Copy8ToBuffer(buf, p.protocoIdNextHeader, _offset);		// localPortRange		if ( Status.STATUS_OK != (st = sqnProtocolPortRange.marshall(buf, p.localPortRange, _offset)) ) return st;		// remotePortRange		if ( Status.STATUS_OK != (st = sqnProtocolPortRange.marshall(buf, p.remotePortRange, _offset)) ) return st;		// spi		Util.Copy32ToBuffer(buf, p.spi, _offset);		// dscp		if ( Status.STATUS_OK != (st = sqnIpDscpValueMask.marshall(buf, p.dscp, _offset)) ) return st;		// flowLabel		Util.Copy32ToBuffer(buf, p.flowLabel, _offset);		return st;	}	public static int unmarshall(final byte[] buf, EpsPacketFilterComponentValueTag p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+0)) return DccError.ERR_OVERFLOW;		// remoteIpAddress		if ( Status.STATUS_OK != (st = sqnMaskedIpAddress.unmarshall(buf, p.remoteIpAddress, _offset)) ) return st;		// protocoIdNextHeader		p.protocoIdNextHeader = (short) Util.Copy8FromBuffer(buf, _offset);		// localPortRange		if ( Status.STATUS_OK != (st = sqnProtocolPortRange.unmarshall(buf, p.localPortRange, _offset)) ) return st;		// remotePortRange		if ( Status.STATUS_OK != (st = sqnProtocolPortRange.unmarshall(buf, p.remotePortRange, _offset)) ) return st;		// spi		p.spi = (long) Util.Copy32FromBuffer(buf, _offset);		// dscp		if ( Status.STATUS_OK != (st = sqnIpDscpValueMask.unmarshall(buf, p.dscp, _offset)) ) return st;		// flowLabel		p.flowLabel = (long) Util.Copy32FromBuffer(buf, _offset);		return st;	}}