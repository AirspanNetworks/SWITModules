/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnLogDescr {	public String module;	public String subcat;	public sqnLogDescr() {		// Initialization		// module		module = "";		// subcat		subcat = "";	}	public static int marshall(byte[] buf, final sqnLogDescr p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+0)) return DccError.ERR_OVERFLOW;		// module		if (buf.length < (_offset._value+p.module.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.module.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.module.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// subcat		if (buf.length < (_offset._value+p.subcat.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.subcat.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.subcat.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		return st;	}	public static int unmarshall(final byte[] buf, sqnLogDescr p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+0)) return DccError.ERR_OVERFLOW;		// module		p.module = "";		while (buf[_offset._value] != 0) {			p.module += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		// subcat		p.subcat = "";		while (buf[_offset._value] != 0) {			p.subcat += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		return st;	}}