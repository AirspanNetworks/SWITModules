/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnEmmStateInfo {	public sqnEmmState state;	public sqnEmmSubState subState;	public sqnEmmUpdateStatus updateStatus;	public EpsImsiTag imsi;	public EpsGutiTag guti;	public sqnEmmStateInfo() {		// Initialization		// state		state = new sqnEmmState();		// subState		subState = new sqnEmmSubState();		// updateStatus		updateStatus = new sqnEmmUpdateStatus();		// imsi		imsi = new EpsImsiTag();		// guti		guti = new EpsGutiTag();	}	public static int marshall(byte[] buf, final sqnEmmStateInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+12)) return DccError.ERR_OVERFLOW;		// state		if ( Status.STATUS_OK != (st = sqnEmmState.marshall(buf, p.state, _offset)) ) return st;		// subState		if ( Status.STATUS_OK != (st = sqnEmmSubState.marshall(buf, p.subState, _offset)) ) return st;		// updateStatus		if ( Status.STATUS_OK != (st = sqnEmmUpdateStatus.marshall(buf, p.updateStatus, _offset)) ) return st;		// imsi		if ( Status.STATUS_OK != (st = EpsImsiTag.marshall(buf, p.imsi, _offset)) ) return st;		// guti		if ( Status.STATUS_OK != (st = EpsGutiTag.marshall(buf, p.guti, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnEmmStateInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+12)) return DccError.ERR_OVERFLOW;		// state		if ( Status.STATUS_OK != (st = sqnEmmState.unmarshall(buf, p.state, _offset)) ) return st;		// subState		if ( Status.STATUS_OK != (st = sqnEmmSubState.unmarshall(buf, p.subState, _offset)) ) return st;		// updateStatus		if ( Status.STATUS_OK != (st = sqnEmmUpdateStatus.unmarshall(buf, p.updateStatus, _offset)) ) return st;		// imsi		if ( Status.STATUS_OK != (st = EpsImsiTag.unmarshall(buf, p.imsi, _offset)) ) return st;		// guti		if ( Status.STATUS_OK != (st = EpsGutiTag.unmarshall(buf, p.guti, _offset)) ) return st;		return st;	}}