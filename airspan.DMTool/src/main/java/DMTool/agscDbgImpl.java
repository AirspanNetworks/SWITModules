/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscDbgImpl extends DccClient {	public void initialize(final DbgClient c) {		_use = c;		name = "dbg";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscDbgCli._name.equalsIgnoreCase(name)) {			agscDbgCli._id = id;			return Status.STATUS_OK;		}		if (agscDbgGetCommandsQty._name.equalsIgnoreCase(name)) {			agscDbgGetCommandsQty._id = id;			return Status.STATUS_OK;		}		if (agscDbgGetCommandsList._name.equalsIgnoreCase(name)) {			agscDbgGetCommandsList._id = id;			return Status.STATUS_OK;		}		if (agscDbgSendAtCommand._name.equalsIgnoreCase(name)) {			agscDbgSendAtCommand._id = id;			return Status.STATUS_OK;		}		if (agscDbgAtResponse._name.equalsIgnoreCase(name)) {			agscDbgAtResponse._id = id;			return Status.STATUS_OK;		}		if (agscDbgGetAtCommandList._name.equalsIgnoreCase(name)) {			agscDbgGetAtCommandList._id = id;			return Status.STATUS_OK;		}		if (agscDbgGetTestList._name.equalsIgnoreCase(name)) {			agscDbgGetTestList._id = id;			return Status.STATUS_OK;		}		if (agscDbgTestVerdict._name.equalsIgnoreCase(name)) {			agscDbgTestVerdict._id = id;			return Status.STATUS_OK;		}		if (agscDbgStartTest._name.equalsIgnoreCase(name)) {			agscDbgStartTest._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {								if (agscDbgAtResponse._id == id) return agscDbgAtResponse.notify(buf);		if (agscDbgTestVerdict._id == id) return agscDbgTestVerdict.notify(buf);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 9;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			name._value = agscDbgCli._name;			id._value = agscDbgCli._id;			return Status.STATUS_OK;		}		if (index==1) {			name._value = agscDbgGetCommandsQty._name;			id._value = agscDbgGetCommandsQty._id;			return Status.STATUS_OK;		}		if (index==2) {			name._value = agscDbgGetCommandsList._name;			id._value = agscDbgGetCommandsList._id;			return Status.STATUS_OK;		}		if (index==3) {			name._value = agscDbgSendAtCommand._name;			id._value = agscDbgSendAtCommand._id;			return Status.STATUS_OK;		}		if (index==4) {			serviceType.value = (agscDbgImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscDbgAtResponse._name;			id._value = agscDbgAtResponse._id;			return Status.STATUS_OK;		}		if (index==5) {			name._value = agscDbgGetAtCommandList._name;			id._value = agscDbgGetAtCommandList._id;			return Status.STATUS_OK;		}		if (index==6) {			name._value = agscDbgGetTestList._name;			id._value = agscDbgGetTestList._id;			return Status.STATUS_OK;		}		if (index==7) {			serviceType.value = (agscDbgImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscDbgTestVerdict._name;			id._value = agscDbgTestVerdict._id;			return Status.STATUS_OK;		}		if (index==8) {			name._value = agscDbgStartTest._name;			id._value = agscDbgStartTest._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int Cli(final String command, OutValue<Integer> status, OutValue<String> result) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDbgCli.marshall(marshallBuf, 16000, _offset, command);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDbgCli._id, agscDbgCli._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDbgCli.unmarshall(returnBuf, returnBuf.length, _offset, status, result);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetCommandsQty(OutValue<Long> commandsQty) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDbgGetCommandsQty.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDbgGetCommandsQty._id, agscDbgGetCommandsQty._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDbgGetCommandsQty.unmarshall(returnBuf, returnBuf.length, _offset, commandsQty);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetCommandsList(final int beginIdx, final int endIdx, OutArray<CommandDesc> cmdDesc) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDbgGetCommandsList.marshall(marshallBuf, 16000, _offset, beginIdx, endIdx);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDbgGetCommandsList._id, agscDbgGetCommandsList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDbgGetCommandsList.unmarshall(returnBuf, returnBuf.length, _offset, cmdDesc);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SendAtCommand(final String req, OutValue<String> rsp) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDbgSendAtCommand.marshall(marshallBuf, 16000, _offset, req);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDbgSendAtCommand._id, agscDbgSendAtCommand._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDbgSendAtCommand.unmarshall(returnBuf, returnBuf.length, _offset, rsp);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetAtCommandList(OutArray<sqnAtCmd> cmd) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDbgGetAtCommandList.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDbgGetAtCommandList._id, agscDbgGetAtCommandList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDbgGetAtCommandList.unmarshall(returnBuf, returnBuf.length, _offset, cmd);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetTestList(OutArray<TestDesc> test) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDbgGetTestList.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDbgGetTestList._id, agscDbgGetTestList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDbgGetTestList.unmarshall(returnBuf, returnBuf.length, _offset, test);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int StartTest(int index, OutValue<Boolean> status) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDbgStartTest.marshall(marshallBuf, 16000, _offset, index);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDbgStartTest._id, agscDbgStartTest._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDbgStartTest.unmarshall(returnBuf, returnBuf.length, _offset, status);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static DbgClient _use;}