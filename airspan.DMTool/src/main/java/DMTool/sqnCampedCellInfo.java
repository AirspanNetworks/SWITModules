/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnCampedCellInfo {	public boolean valid;	public EpsRatTag rat;	public boolean ulExtCyclicPrefix;	public boolean crntiValid;	public int crnti;	public sqnDlBandwidthType dlBw;	public short specialSubframeConfig;	public short subframeAssignment;	public long dlFrequency;	public int dlEarfcn;	public short eNbTxAntNumber;	public short neighbourAntNumber;	public int pci;	public int prnti;	public boolean rarntiValid;	public int rarnti;	public int sirnti;	public boolean spsCrntiValid;	public int spsCrnti;	public boolean syncFlag;	public sqnCgiInfo cgi;	public int tac;	public boolean tmpCrntiValid;	public int tmpCrnti;	public boolean tpcPucchRntiValid;	public int tpcPucchRnti;	public boolean tpcPuschRntiValid;	public int tpcPuschRnti;	public short dlTxMode;	public short ueRxAntNumber;	public short ueTxAntNumber;	public long ulFrequency;	public int ulEarfcn;	public boolean workModeTdd;	public boolean cellAllowedAccess;	public boolean cellBarred;	public boolean cellReserved;	public boolean rrcState;	public short ueCategory;	public short[] featureGroupIndicators = new short[4];	public sqnDlBandwidthType ulBw;	public short freqBandIndicator;	public int pagingCycle;	public sqnCampedCellInfo() {		// Initialization		// rat		rat = new EpsRatTag();		// dlBw		dlBw = new sqnDlBandwidthType();		// cgi		cgi = new sqnCgiInfo();		// ulBw		ulBw = new sqnDlBandwidthType();	}	public static int marshall(byte[] buf, final sqnCampedCellInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+111)) return DccError.ERR_OVERFLOW;		// valid		Util.Copy32ToBuffer(buf, p.valid, _offset);		// rat		if ( Status.STATUS_OK != (st = EpsRatTag.marshall(buf, p.rat, _offset)) ) return st;		// ulExtCyclicPrefix		Util.Copy32ToBuffer(buf, p.ulExtCyclicPrefix, _offset);		// crntiValid		Util.Copy32ToBuffer(buf, p.crntiValid, _offset);		// crnti		Util.Copy16ToBuffer(buf, p.crnti, _offset);		// dlBw		if ( Status.STATUS_OK != (st = sqnDlBandwidthType.marshall(buf, p.dlBw, _offset)) ) return st;		// specialSubframeConfig		Util.Copy8ToBuffer(buf, p.specialSubframeConfig, _offset);		// subframeAssignment		Util.Copy8ToBuffer(buf, p.subframeAssignment, _offset);		// dlFrequency		Util.Copy32ToBuffer(buf, p.dlFrequency, _offset);		// dlEarfcn		Util.Copy16ToBuffer(buf, p.dlEarfcn, _offset);		// eNbTxAntNumber		Util.Copy8ToBuffer(buf, p.eNbTxAntNumber, _offset);		// neighbourAntNumber		Util.Copy8ToBuffer(buf, p.neighbourAntNumber, _offset);		// pci		Util.Copy16ToBuffer(buf, p.pci, _offset);		// prnti		Util.Copy16ToBuffer(buf, p.prnti, _offset);		// rarntiValid		Util.Copy32ToBuffer(buf, p.rarntiValid, _offset);		// rarnti		Util.Copy16ToBuffer(buf, p.rarnti, _offset);		// sirnti		Util.Copy16ToBuffer(buf, p.sirnti, _offset);		// spsCrntiValid		Util.Copy32ToBuffer(buf, p.spsCrntiValid, _offset);		// spsCrnti		Util.Copy16ToBuffer(buf, p.spsCrnti, _offset);		// syncFlag		Util.Copy32ToBuffer(buf, p.syncFlag, _offset);		// cgi		if ( Status.STATUS_OK != (st = sqnCgiInfo.marshall(buf, p.cgi, _offset)) ) return st;		// tac		Util.Copy16ToBuffer(buf, p.tac, _offset);		// tmpCrntiValid		Util.Copy32ToBuffer(buf, p.tmpCrntiValid, _offset);		// tmpCrnti		Util.Copy16ToBuffer(buf, p.tmpCrnti, _offset);		// tpcPucchRntiValid		Util.Copy32ToBuffer(buf, p.tpcPucchRntiValid, _offset);		// tpcPucchRnti		Util.Copy16ToBuffer(buf, p.tpcPucchRnti, _offset);		// tpcPuschRntiValid		Util.Copy32ToBuffer(buf, p.tpcPuschRntiValid, _offset);		// tpcPuschRnti		Util.Copy16ToBuffer(buf, p.tpcPuschRnti, _offset);		// dlTxMode		Util.Copy8ToBuffer(buf, p.dlTxMode, _offset);		// ueRxAntNumber		Util.Copy8ToBuffer(buf, p.ueRxAntNumber, _offset);		// ueTxAntNumber		Util.Copy8ToBuffer(buf, p.ueTxAntNumber, _offset);		// ulFrequency		Util.Copy32ToBuffer(buf, p.ulFrequency, _offset);		// ulEarfcn		Util.Copy16ToBuffer(buf, p.ulEarfcn, _offset);		// workModeTdd		Util.Copy32ToBuffer(buf, p.workModeTdd, _offset);		// cellAllowedAccess		Util.Copy32ToBuffer(buf, p.cellAllowedAccess, _offset);		// cellBarred		Util.Copy32ToBuffer(buf, p.cellBarred, _offset);		// cellReserved		Util.Copy32ToBuffer(buf, p.cellReserved, _offset);		// rrcState		Util.Copy32ToBuffer(buf, p.rrcState, _offset);		// ueCategory		Util.Copy8ToBuffer(buf, p.ueCategory, _offset);		// featureGroupIndicators		for (int i = 0; i<4; i++) {			Util.Copy8ToBuffer(buf, p.featureGroupIndicators[i], _offset);		}		// ulBw		if ( Status.STATUS_OK != (st = sqnDlBandwidthType.marshall(buf, p.ulBw, _offset)) ) return st;		// freqBandIndicator		Util.Copy8ToBuffer(buf, p.freqBandIndicator, _offset);		// pagingCycle		Util.Copy16ToBuffer(buf, p.pagingCycle, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnCampedCellInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+111)) return DccError.ERR_OVERFLOW;		// valid		p.valid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// rat		if ( Status.STATUS_OK != (st = EpsRatTag.unmarshall(buf, p.rat, _offset)) ) return st;		// ulExtCyclicPrefix		p.ulExtCyclicPrefix = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// crntiValid		p.crntiValid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// crnti		p.crnti = (int) Util.Copy16FromBuffer(buf, _offset);		// dlBw		if ( Status.STATUS_OK != (st = sqnDlBandwidthType.unmarshall(buf, p.dlBw, _offset)) ) return st;		// specialSubframeConfig		p.specialSubframeConfig = (short) Util.Copy8FromBuffer(buf, _offset);		// subframeAssignment		p.subframeAssignment = (short) Util.Copy8FromBuffer(buf, _offset);		// dlFrequency		p.dlFrequency = (long) Util.Copy32FromBuffer(buf, _offset);		// dlEarfcn		p.dlEarfcn = (int) Util.Copy16FromBuffer(buf, _offset);		// eNbTxAntNumber		p.eNbTxAntNumber = (short) Util.Copy8FromBuffer(buf, _offset);		// neighbourAntNumber		p.neighbourAntNumber = (short) Util.Copy8FromBuffer(buf, _offset);		// pci		p.pci = (int) Util.Copy16FromBuffer(buf, _offset);		// prnti		p.prnti = (int) Util.Copy16FromBuffer(buf, _offset);		// rarntiValid		p.rarntiValid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// rarnti		p.rarnti = (int) Util.Copy16FromBuffer(buf, _offset);		// sirnti		p.sirnti = (int) Util.Copy16FromBuffer(buf, _offset);		// spsCrntiValid		p.spsCrntiValid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// spsCrnti		p.spsCrnti = (int) Util.Copy16FromBuffer(buf, _offset);		// syncFlag		p.syncFlag = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// cgi		if ( Status.STATUS_OK != (st = sqnCgiInfo.unmarshall(buf, p.cgi, _offset)) ) return st;		// tac		p.tac = (int) Util.Copy16FromBuffer(buf, _offset);		// tmpCrntiValid		p.tmpCrntiValid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// tmpCrnti		p.tmpCrnti = (int) Util.Copy16FromBuffer(buf, _offset);		// tpcPucchRntiValid		p.tpcPucchRntiValid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// tpcPucchRnti		p.tpcPucchRnti = (int) Util.Copy16FromBuffer(buf, _offset);		// tpcPuschRntiValid		p.tpcPuschRntiValid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// tpcPuschRnti		p.tpcPuschRnti = (int) Util.Copy16FromBuffer(buf, _offset);		// dlTxMode		p.dlTxMode = (short) Util.Copy8FromBuffer(buf, _offset);		// ueRxAntNumber		p.ueRxAntNumber = (short) Util.Copy8FromBuffer(buf, _offset);		// ueTxAntNumber		p.ueTxAntNumber = (short) Util.Copy8FromBuffer(buf, _offset);		// ulFrequency		p.ulFrequency = (long) Util.Copy32FromBuffer(buf, _offset);		// ulEarfcn		p.ulEarfcn = (int) Util.Copy16FromBuffer(buf, _offset);		// workModeTdd		p.workModeTdd = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// cellAllowedAccess		p.cellAllowedAccess = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// cellBarred		p.cellBarred = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// cellReserved		p.cellReserved = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// rrcState		p.rrcState = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// ueCategory		p.ueCategory = (short) Util.Copy8FromBuffer(buf, _offset);		// featureGroupIndicators		for (int i = 0; i<4; i++) {			p.featureGroupIndicators[i] = (short) Util.Copy8FromBuffer(buf, _offset);		}		// ulBw		if ( Status.STATUS_OK != (st = sqnDlBandwidthType.unmarshall(buf, p.ulBw, _offset)) ) return st;		// freqBandIndicator		p.freqBandIndicator = (short) Util.Copy8FromBuffer(buf, _offset);		// pagingCycle		p.pagingCycle = (int) Util.Copy16FromBuffer(buf, _offset);		return st;	}}