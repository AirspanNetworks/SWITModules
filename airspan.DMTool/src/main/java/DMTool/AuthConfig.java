/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class AuthConfig {	public short eeprom;	public short eapMethod;	public char[] identity = new char[256];	public char[] password = new char[256];	public char[] anonymousIdentity = new char[256];	public char[] tlsClientPKPass = new char[256];	public char[] caCertFile = new char[1025];	public char[] tlsClientCertFile = new char[1025];	public char[] tlsClientPKFile = new char[1025];	public AuthConfig() {		// Initialization	}	public static int marshall(byte[] buf, final AuthConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+2)) return DccError.ERR_OVERFLOW;		// eeprom		Util.Copy8ToBuffer(buf, p.eeprom, _offset);		// eapMethod		Util.Copy8ToBuffer(buf, p.eapMethod, _offset);		// identity		for (int i = 0; i<256; i++) {			Util.Copy8ToBuffer(buf, p.identity[i], _offset);		}		// password		for (int i = 0; i<256; i++) {			Util.Copy8ToBuffer(buf, p.password[i], _offset);		}		// anonymousIdentity		for (int i = 0; i<256; i++) {			Util.Copy8ToBuffer(buf, p.anonymousIdentity[i], _offset);		}		// tlsClientPKPass		for (int i = 0; i<256; i++) {			Util.Copy8ToBuffer(buf, p.tlsClientPKPass[i], _offset);		}		// caCertFile		for (int i = 0; i<1025; i++) {			Util.Copy8ToBuffer(buf, p.caCertFile[i], _offset);		}		// tlsClientCertFile		for (int i = 0; i<1025; i++) {			Util.Copy8ToBuffer(buf, p.tlsClientCertFile[i], _offset);		}		// tlsClientPKFile		for (int i = 0; i<1025; i++) {			Util.Copy8ToBuffer(buf, p.tlsClientPKFile[i], _offset);		}		return st;	}	public static int unmarshall(final byte[] buf, AuthConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+2)) return DccError.ERR_OVERFLOW;		// eeprom		p.eeprom = (short) Util.Copy8FromBuffer(buf, _offset);		// eapMethod		p.eapMethod = (short) Util.Copy8FromBuffer(buf, _offset);		// identity		for (int i = 0; i<256; i++) {			p.identity[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		// password		for (int i = 0; i<256; i++) {			p.password[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		// anonymousIdentity		for (int i = 0; i<256; i++) {			p.anonymousIdentity[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		// tlsClientPKPass		for (int i = 0; i<256; i++) {			p.tlsClientPKPass[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		// caCertFile		for (int i = 0; i<1025; i++) {			p.caCertFile[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		// tlsClientCertFile		for (int i = 0; i<1025; i++) {			p.tlsClientCertFile[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		// tlsClientPKFile		for (int i = 0; i<1025; i++) {			p.tlsClientPKFile[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		return st;	}}