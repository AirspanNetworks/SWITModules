/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnPhySrsConfig {	public boolean enabled;	public boolean ueSpecificValid;	public short cyclicShift;	public boolean indefiniteDuration;	public short frequencyDomainPosition;	public boolean simultaneousAnAndSrs;	public short srsBwConfig;	public int srsConfigurationIndex;	public short srsHoppingBandwidth;	public boolean srsMaxUpPts;	public short srsSfConfig;	public short srsUeReleatedBandwith;	public short transmissionComb;	public sqnPhySrsConfig() {		// Initialization	}	public static int marshall(byte[] buf, final sqnPhySrsConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+29)) return DccError.ERR_OVERFLOW;		// enabled		Util.Copy32ToBuffer(buf, p.enabled, _offset);		// ueSpecificValid		Util.Copy32ToBuffer(buf, p.ueSpecificValid, _offset);		// cyclicShift		Util.Copy8ToBuffer(buf, p.cyclicShift, _offset);		// indefiniteDuration		Util.Copy32ToBuffer(buf, p.indefiniteDuration, _offset);		// frequencyDomainPosition		Util.Copy8ToBuffer(buf, p.frequencyDomainPosition, _offset);		// simultaneousAnAndSrs		Util.Copy32ToBuffer(buf, p.simultaneousAnAndSrs, _offset);		// srsBwConfig		Util.Copy8ToBuffer(buf, p.srsBwConfig, _offset);		// srsConfigurationIndex		Util.Copy16ToBuffer(buf, p.srsConfigurationIndex, _offset);		// srsHoppingBandwidth		Util.Copy8ToBuffer(buf, p.srsHoppingBandwidth, _offset);		// srsMaxUpPts		Util.Copy32ToBuffer(buf, p.srsMaxUpPts, _offset);		// srsSfConfig		Util.Copy8ToBuffer(buf, p.srsSfConfig, _offset);		// srsUeReleatedBandwith		Util.Copy8ToBuffer(buf, p.srsUeReleatedBandwith, _offset);		// transmissionComb		Util.Copy8ToBuffer(buf, p.transmissionComb, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnPhySrsConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+29)) return DccError.ERR_OVERFLOW;		// enabled		p.enabled = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// ueSpecificValid		p.ueSpecificValid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// cyclicShift		p.cyclicShift = (short) Util.Copy8FromBuffer(buf, _offset);		// indefiniteDuration		p.indefiniteDuration = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// frequencyDomainPosition		p.frequencyDomainPosition = (short) Util.Copy8FromBuffer(buf, _offset);		// simultaneousAnAndSrs		p.simultaneousAnAndSrs = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// srsBwConfig		p.srsBwConfig = (short) Util.Copy8FromBuffer(buf, _offset);		// srsConfigurationIndex		p.srsConfigurationIndex = (int) Util.Copy16FromBuffer(buf, _offset);		// srsHoppingBandwidth		p.srsHoppingBandwidth = (short) Util.Copy8FromBuffer(buf, _offset);		// srsMaxUpPts		p.srsMaxUpPts = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// srsSfConfig		p.srsSfConfig = (short) Util.Copy8FromBuffer(buf, _offset);		// srsUeReleatedBandwith		p.srsUeReleatedBandwith = (short) Util.Copy8FromBuffer(buf, _offset);		// transmissionComb		p.transmissionComb = (short) Util.Copy8FromBuffer(buf, _offset);		return st;	}}