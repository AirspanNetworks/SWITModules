/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnMcsUlConfig {	public long count;	public sqnQamBits mod;	public long rbCount;	public long sumTbSizeFirstTx;	public long sumTbSizeRetransTx;	public long ulTtiCount;	public sqnMcsUlConfig() {		// Initialization		// mod		mod = new sqnQamBits();	}	public static int marshall(byte[] buf, final sqnMcsUlConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+24)) return DccError.ERR_OVERFLOW;		// count		Util.Copy32ToBuffer(buf, p.count, _offset);		// mod		if ( Status.STATUS_OK != (st = sqnQamBits.marshall(buf, p.mod, _offset)) ) return st;		// rbCount		Util.Copy32ToBuffer(buf, p.rbCount, _offset);		// sumTbSizeFirstTx		Util.Copy32ToBuffer(buf, p.sumTbSizeFirstTx, _offset);		// sumTbSizeRetransTx		Util.Copy32ToBuffer(buf, p.sumTbSizeRetransTx, _offset);		// ulTtiCount		Util.Copy32ToBuffer(buf, p.ulTtiCount, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnMcsUlConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+24)) return DccError.ERR_OVERFLOW;		// count		p.count = (long) Util.Copy32FromBuffer(buf, _offset);		// mod		if ( Status.STATUS_OK != (st = sqnQamBits.unmarshall(buf, p.mod, _offset)) ) return st;		// rbCount		p.rbCount = (long) Util.Copy32FromBuffer(buf, _offset);		// sumTbSizeFirstTx		p.sumTbSizeFirstTx = (long) Util.Copy32FromBuffer(buf, _offset);		// sumTbSizeRetransTx		p.sumTbSizeRetransTx = (long) Util.Copy32FromBuffer(buf, _offset);		// ulTtiCount		p.ulTtiCount = (long) Util.Copy32FromBuffer(buf, _offset);		return st;	}}