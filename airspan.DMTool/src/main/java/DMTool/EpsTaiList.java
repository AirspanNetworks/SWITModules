/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class EpsTaiList {	public short epsNumOfTais;	public EpsTaiTag[] epsTai = new EpsTaiTag[16];	public EpsTaiList() {		// Initialization		// epsTai		for (int i = 0; i<epsTai.length; i++) {			epsTai[i] = new EpsTaiTag();		}	}	public static int marshall(byte[] buf, final EpsTaiList p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+1)) return DccError.ERR_OVERFLOW;		// epsNumOfTais		Util.Copy8ToBuffer(buf, p.epsNumOfTais, _offset);		// epsTai		for (int i = 0; i<16; i++) {			if ( Status.STATUS_OK != (st = EpsTaiTag.marshall(buf, p.epsTai[i], _offset)) ) return st;		}		return st;	}	public static int unmarshall(final byte[] buf, EpsTaiList p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+1)) return DccError.ERR_OVERFLOW;		// epsNumOfTais		p.epsNumOfTais = (short) Util.Copy8FromBuffer(buf, _offset);		// epsTai		for (int i = 0; i<16; i++) {			if ( Status.STATUS_OK != (st = EpsTaiTag.unmarshall(buf, p.epsTai[i], _offset)) ) return st;		}		return st;	}}