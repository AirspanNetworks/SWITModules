/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnCellInfo {	public boolean valid;	public EpsRatTag rat;	public boolean crntiValid;	public int crnti;	public sqnDlBandwidthType dlBw;	public long dlFrequency;	public int dlEarfcn;	public sqnCgiInfo cgi;	public short dlTxMode;	public long ulFrequency;	public int ulEarfcn;	public boolean workModeTddValid;	public boolean workModeTdd;	public sqnCellInfo() {		// Initialization		// rat		rat = new EpsRatTag();		// dlBw		dlBw = new sqnDlBandwidthType();		// cgi		cgi = new sqnCgiInfo();	}	public static int marshall(byte[] buf, final sqnCellInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+39)) return DccError.ERR_OVERFLOW;		// valid		Util.Copy32ToBuffer(buf, p.valid, _offset);		// rat		if ( Status.STATUS_OK != (st = EpsRatTag.marshall(buf, p.rat, _offset)) ) return st;		// crntiValid		Util.Copy32ToBuffer(buf, p.crntiValid, _offset);		// crnti		Util.Copy16ToBuffer(buf, p.crnti, _offset);		// dlBw		if ( Status.STATUS_OK != (st = sqnDlBandwidthType.marshall(buf, p.dlBw, _offset)) ) return st;		// dlFrequency		Util.Copy32ToBuffer(buf, p.dlFrequency, _offset);		// dlEarfcn		Util.Copy16ToBuffer(buf, p.dlEarfcn, _offset);		// cgi		if ( Status.STATUS_OK != (st = sqnCgiInfo.marshall(buf, p.cgi, _offset)) ) return st;		// dlTxMode		Util.Copy8ToBuffer(buf, p.dlTxMode, _offset);		// ulFrequency		Util.Copy32ToBuffer(buf, p.ulFrequency, _offset);		// ulEarfcn		Util.Copy16ToBuffer(buf, p.ulEarfcn, _offset);		// workModeTddValid		Util.Copy32ToBuffer(buf, p.workModeTddValid, _offset);		// workModeTdd		Util.Copy32ToBuffer(buf, p.workModeTdd, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnCellInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+39)) return DccError.ERR_OVERFLOW;		// valid		p.valid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// rat		if ( Status.STATUS_OK != (st = EpsRatTag.unmarshall(buf, p.rat, _offset)) ) return st;		// crntiValid		p.crntiValid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// crnti		p.crnti = (int) Util.Copy16FromBuffer(buf, _offset);		// dlBw		if ( Status.STATUS_OK != (st = sqnDlBandwidthType.unmarshall(buf, p.dlBw, _offset)) ) return st;		// dlFrequency		p.dlFrequency = (long) Util.Copy32FromBuffer(buf, _offset);		// dlEarfcn		p.dlEarfcn = (int) Util.Copy16FromBuffer(buf, _offset);		// cgi		if ( Status.STATUS_OK != (st = sqnCgiInfo.unmarshall(buf, p.cgi, _offset)) ) return st;		// dlTxMode		p.dlTxMode = (short) Util.Copy8FromBuffer(buf, _offset);		// ulFrequency		p.ulFrequency = (long) Util.Copy32FromBuffer(buf, _offset);		// ulEarfcn		p.ulEarfcn = (int) Util.Copy16FromBuffer(buf, _offset);		// workModeTddValid		p.workModeTddValid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// workModeTdd		p.workModeTdd = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		return st;	}}