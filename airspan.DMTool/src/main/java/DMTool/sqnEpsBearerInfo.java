/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnEpsBearerInfo {	public short epsBearerId;	public boolean defaultBearer;	public long contextId;	public short epsLinkBearerId;	public boolean qosPresent;	public EpsEpsTag epsEpsQos;	public boolean tftPresent;	public EpsTft epsTft;	public sqnEpsBearerInfo() {		// Initialization		// epsEpsQos		epsEpsQos = new EpsEpsTag();		// epsTft		epsTft = new EpsTft();	}	public static int marshall(byte[] buf, final sqnEpsBearerInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+18)) return DccError.ERR_OVERFLOW;		// epsBearerId		Util.Copy8ToBuffer(buf, p.epsBearerId, _offset);		// defaultBearer		Util.Copy32ToBuffer(buf, p.defaultBearer, _offset);		// contextId		Util.Copy32ToBuffer(buf, p.contextId, _offset);		// epsLinkBearerId		Util.Copy8ToBuffer(buf, p.epsLinkBearerId, _offset);		// qosPresent		Util.Copy32ToBuffer(buf, p.qosPresent, _offset);		// epsEpsQos		if ( Status.STATUS_OK != (st = EpsEpsTag.marshall(buf, p.epsEpsQos, _offset)) ) return st;		// tftPresent		Util.Copy32ToBuffer(buf, p.tftPresent, _offset);		// epsTft		if ( Status.STATUS_OK != (st = EpsTft.marshall(buf, p.epsTft, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnEpsBearerInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+18)) return DccError.ERR_OVERFLOW;		// epsBearerId		p.epsBearerId = (short) Util.Copy8FromBuffer(buf, _offset);		// defaultBearer		p.defaultBearer = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// contextId		p.contextId = (long) Util.Copy32FromBuffer(buf, _offset);		// epsLinkBearerId		p.epsLinkBearerId = (short) Util.Copy8FromBuffer(buf, _offset);		// qosPresent		p.qosPresent = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// epsEpsQos		if ( Status.STATUS_OK != (st = EpsEpsTag.unmarshall(buf, p.epsEpsQos, _offset)) ) return st;		// tftPresent		p.tftPresent = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// epsTft		if ( Status.STATUS_OK != (st = EpsTft.unmarshall(buf, p.epsTft, _offset)) ) return st;		return st;	}}