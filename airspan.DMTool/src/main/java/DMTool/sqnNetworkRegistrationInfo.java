/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnNetworkRegistrationInfo {	public EpsRegistrationStatusTag status;	public int tac;	public long cellId;	public EpsRatTag act;	public String plmnId;	public String plmnShortName;	public String plmnLongName;	public EpsEmmCauseTag nwkCause;	public CsgId csgId;	public sqnNetworkRegistrationInfo() {		// Initialization		// status		status = new EpsRegistrationStatusTag();		// act		act = new EpsRatTag();		// plmnId		plmnId = "";		// plmnShortName		plmnShortName = "";		// plmnLongName		plmnLongName = "";		// nwkCause		nwkCause = new EpsEmmCauseTag();		// csgId		csgId = new CsgId();	}	public static int marshall(byte[] buf, final sqnNetworkRegistrationInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+18)) return DccError.ERR_OVERFLOW;		// status		if ( Status.STATUS_OK != (st = EpsRegistrationStatusTag.marshall(buf, p.status, _offset)) ) return st;		// tac		Util.Copy16ToBuffer(buf, p.tac, _offset);		// cellId		Util.Copy32ToBuffer(buf, p.cellId, _offset);		// act		if ( Status.STATUS_OK != (st = EpsRatTag.marshall(buf, p.act, _offset)) ) return st;		// plmnId		if (buf.length < (_offset._value+p.plmnId.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.plmnId.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.plmnId.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// plmnShortName		if (buf.length < (_offset._value+p.plmnShortName.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.plmnShortName.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.plmnShortName.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// plmnLongName		if (buf.length < (_offset._value+p.plmnLongName.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.plmnLongName.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.plmnLongName.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// nwkCause		if ( Status.STATUS_OK != (st = EpsEmmCauseTag.marshall(buf, p.nwkCause, _offset)) ) return st;		// csgId		if ( Status.STATUS_OK != (st = CsgId.marshall(buf, p.csgId, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnNetworkRegistrationInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+18)) return DccError.ERR_OVERFLOW;		// status		if ( Status.STATUS_OK != (st = EpsRegistrationStatusTag.unmarshall(buf, p.status, _offset)) ) return st;		// tac		p.tac = (int) Util.Copy16FromBuffer(buf, _offset);		// cellId		p.cellId = (long) Util.Copy32FromBuffer(buf, _offset);		// act		if ( Status.STATUS_OK != (st = EpsRatTag.unmarshall(buf, p.act, _offset)) ) return st;		// plmnId		p.plmnId = "";		while (buf[_offset._value] != 0) {			p.plmnId += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		// plmnShortName		p.plmnShortName = "";		while (buf[_offset._value] != 0) {			p.plmnShortName += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		// plmnLongName		p.plmnLongName = "";		while (buf[_offset._value] != 0) {			p.plmnLongName += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		// nwkCause		if ( Status.STATUS_OK != (st = EpsEmmCauseTag.unmarshall(buf, p.nwkCause, _offset)) ) return st;		// csgId		if ( Status.STATUS_OK != (st = CsgId.unmarshall(buf, p.csgId, _offset)) ) return st;		return st;	}}