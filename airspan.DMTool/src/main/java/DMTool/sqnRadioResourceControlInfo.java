/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnRadioResourceControlInfo {	public sqnPhyPuschConfig pusch;	public sqnPhyRachConfig rach;	public sqnPhySrsConfig srs;	public sqnPhyPucchConfig pucch;	public sqnPhyPrachConfig prach;	public sqnRadioResourceControlInfo() {		// Initialization		// pusch		pusch = new sqnPhyPuschConfig();		// rach		rach = new sqnPhyRachConfig();		// srs		srs = new sqnPhySrsConfig();		// pucch		pucch = new sqnPhyPucchConfig();		// prach		prach = new sqnPhyPrachConfig();	}	public static int marshall(byte[] buf, final sqnRadioResourceControlInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+0)) return DccError.ERR_OVERFLOW;		// pusch		if ( Status.STATUS_OK != (st = sqnPhyPuschConfig.marshall(buf, p.pusch, _offset)) ) return st;		// rach		if ( Status.STATUS_OK != (st = sqnPhyRachConfig.marshall(buf, p.rach, _offset)) ) return st;		// srs		if ( Status.STATUS_OK != (st = sqnPhySrsConfig.marshall(buf, p.srs, _offset)) ) return st;		// pucch		if ( Status.STATUS_OK != (st = sqnPhyPucchConfig.marshall(buf, p.pucch, _offset)) ) return st;		// prach		if ( Status.STATUS_OK != (st = sqnPhyPrachConfig.marshall(buf, p.prach, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnRadioResourceControlInfo p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+0)) return DccError.ERR_OVERFLOW;		// pusch		if ( Status.STATUS_OK != (st = sqnPhyPuschConfig.unmarshall(buf, p.pusch, _offset)) ) return st;		// rach		if ( Status.STATUS_OK != (st = sqnPhyRachConfig.unmarshall(buf, p.rach, _offset)) ) return st;		// srs		if ( Status.STATUS_OK != (st = sqnPhySrsConfig.unmarshall(buf, p.srs, _offset)) ) return st;		// pucch		if ( Status.STATUS_OK != (st = sqnPhyPucchConfig.unmarshall(buf, p.pucch, _offset)) ) return st;		// prach		if ( Status.STATUS_OK != (st = sqnPhyPrachConfig.unmarshall(buf, p.prach, _offset)) ) return st;		return st;	}}