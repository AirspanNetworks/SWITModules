/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnSmsMoResult {	public long status;	public boolean rpErrorRcd;	public SmsErrorCauseTag cause;	public boolean diagnosticPresent;	public short diagnostic;	public short[] rpUserDataLv = new short[234];	public sqnSmsMoResult() {		// Initialization		// cause		cause = new SmsErrorCauseTag();	}	public static int marshall(byte[] buf, final sqnSmsMoResult p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+17)) return DccError.ERR_OVERFLOW;		// status		Util.Copy32ToBuffer(buf, p.status, _offset);		// rpErrorRcd		Util.Copy32ToBuffer(buf, p.rpErrorRcd, _offset);		// cause		if ( Status.STATUS_OK != (st = SmsErrorCauseTag.marshall(buf, p.cause, _offset)) ) return st;		// diagnosticPresent		Util.Copy32ToBuffer(buf, p.diagnosticPresent, _offset);		// diagnostic		Util.Copy8ToBuffer(buf, p.diagnostic, _offset);		// rpUserDataLv		for (int i = 0; i<234; i++) {			Util.Copy8ToBuffer(buf, p.rpUserDataLv[i], _offset);		}		return st;	}	public static int unmarshall(final byte[] buf, sqnSmsMoResult p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+17)) return DccError.ERR_OVERFLOW;		// status		p.status = (long) Util.Copy32FromBuffer(buf, _offset);		// rpErrorRcd		p.rpErrorRcd = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// cause		if ( Status.STATUS_OK != (st = SmsErrorCauseTag.unmarshall(buf, p.cause, _offset)) ) return st;		// diagnosticPresent		p.diagnosticPresent = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// diagnostic		p.diagnostic = (short) Util.Copy8FromBuffer(buf, _offset);		// rpUserDataLv		for (int i = 0; i<234; i++) {			p.rpUserDataLv[i] = (short) Util.Copy8FromBuffer(buf, _offset);		}		return st;	}}