/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnRlcAmStateVariables {	public int vtA;	public int vtS;	public int vtMS;	public int vrR;	public int vrMR;	public int vrX;	public int vrMS;	public int vrH;	public sqnRlcAmStateVariables() {		// Initialization	}	public static int marshall(byte[] buf, final sqnRlcAmStateVariables p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+16)) return DccError.ERR_OVERFLOW;		// vtA		Util.Copy16ToBuffer(buf, p.vtA, _offset);		// vtS		Util.Copy16ToBuffer(buf, p.vtS, _offset);		// vtMS		Util.Copy16ToBuffer(buf, p.vtMS, _offset);		// vrR		Util.Copy16ToBuffer(buf, p.vrR, _offset);		// vrMR		Util.Copy16ToBuffer(buf, p.vrMR, _offset);		// vrX		Util.Copy16ToBuffer(buf, p.vrX, _offset);		// vrMS		Util.Copy16ToBuffer(buf, p.vrMS, _offset);		// vrH		Util.Copy16ToBuffer(buf, p.vrH, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnRlcAmStateVariables p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+16)) return DccError.ERR_OVERFLOW;		// vtA		p.vtA = (int) Util.Copy16FromBuffer(buf, _offset);		// vtS		p.vtS = (int) Util.Copy16FromBuffer(buf, _offset);		// vtMS		p.vtMS = (int) Util.Copy16FromBuffer(buf, _offset);		// vrR		p.vrR = (int) Util.Copy16FromBuffer(buf, _offset);		// vrMR		p.vrMR = (int) Util.Copy16FromBuffer(buf, _offset);		// vrX		p.vrX = (int) Util.Copy16FromBuffer(buf, _offset);		// vrMS		p.vrMS = (int) Util.Copy16FromBuffer(buf, _offset);		// vrH		p.vrH = (int) Util.Copy16FromBuffer(buf, _offset);		return st;	}}