/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnPhyStats {	public int rsrp0;	public int rsrp1;	public int rsrq;	public int rxGain0;	public int rxGain1;	public int rxPsdBO0;	public int rxPsdBO1;	public int rxPsd0;	public int rxPsd1;	public int noise0;	public int noise1;	public int digGain0;	public int digGain1;	public int cinr0;	public int cinr1;	public short lastMcsReceivedTb0;	public short lastMcsReceivedTb1;	public short lastCqi;	public short lastRi;	public sqnPhyStats() {		// Initialization	}	public static int marshall(byte[] buf, final sqnPhyStats p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+64)) return DccError.ERR_OVERFLOW;		// rsrp0		Util.Copy32ToBuffer(buf, p.rsrp0, _offset);		// rsrp1		Util.Copy32ToBuffer(buf, p.rsrp1, _offset);		// rsrq		Util.Copy32ToBuffer(buf, p.rsrq, _offset);		// rxGain0		Util.Copy32ToBuffer(buf, p.rxGain0, _offset);		// rxGain1		Util.Copy32ToBuffer(buf, p.rxGain1, _offset);		// rxPsdBO0		Util.Copy32ToBuffer(buf, p.rxPsdBO0, _offset);		// rxPsdBO1		Util.Copy32ToBuffer(buf, p.rxPsdBO1, _offset);		// rxPsd0		Util.Copy32ToBuffer(buf, p.rxPsd0, _offset);		// rxPsd1		Util.Copy32ToBuffer(buf, p.rxPsd1, _offset);		// noise0		Util.Copy32ToBuffer(buf, p.noise0, _offset);		// noise1		Util.Copy32ToBuffer(buf, p.noise1, _offset);		// digGain0		Util.Copy32ToBuffer(buf, p.digGain0, _offset);		// digGain1		Util.Copy32ToBuffer(buf, p.digGain1, _offset);		// cinr0		Util.Copy32ToBuffer(buf, p.cinr0, _offset);		// cinr1		Util.Copy32ToBuffer(buf, p.cinr1, _offset);		// lastMcsReceivedTb0		Util.Copy8ToBuffer(buf, p.lastMcsReceivedTb0, _offset);		// lastMcsReceivedTb1		Util.Copy8ToBuffer(buf, p.lastMcsReceivedTb1, _offset);		// lastCqi		Util.Copy8ToBuffer(buf, p.lastCqi, _offset);		// lastRi		Util.Copy8ToBuffer(buf, p.lastRi, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnPhyStats p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+64)) return DccError.ERR_OVERFLOW;		// rsrp0		p.rsrp0 = (int) Util.Copy32FromBuffer(buf, _offset);		// rsrp1		p.rsrp1 = (int) Util.Copy32FromBuffer(buf, _offset);		// rsrq		p.rsrq = (int) Util.Copy32FromBuffer(buf, _offset);		// rxGain0		p.rxGain0 = (int) Util.Copy32FromBuffer(buf, _offset);		// rxGain1		p.rxGain1 = (int) Util.Copy32FromBuffer(buf, _offset);		// rxPsdBO0		p.rxPsdBO0 = (int) Util.Copy32FromBuffer(buf, _offset);		// rxPsdBO1		p.rxPsdBO1 = (int) Util.Copy32FromBuffer(buf, _offset);		// rxPsd0		p.rxPsd0 = (int) Util.Copy32FromBuffer(buf, _offset);		// rxPsd1		p.rxPsd1 = (int) Util.Copy32FromBuffer(buf, _offset);		// noise0		p.noise0 = (int) Util.Copy32FromBuffer(buf, _offset);		// noise1		p.noise1 = (int) Util.Copy32FromBuffer(buf, _offset);		// digGain0		p.digGain0 = (int) Util.Copy32FromBuffer(buf, _offset);		// digGain1		p.digGain1 = (int) Util.Copy32FromBuffer(buf, _offset);		// cinr0		p.cinr0 = (int) Util.Copy32FromBuffer(buf, _offset);		// cinr1		p.cinr1 = (int) Util.Copy32FromBuffer(buf, _offset);		// lastMcsReceivedTb0		p.lastMcsReceivedTb0 = (short) Util.Copy8FromBuffer(buf, _offset);		// lastMcsReceivedTb1		p.lastMcsReceivedTb1 = (short) Util.Copy8FromBuffer(buf, _offset);		// lastCqi		p.lastCqi = (short) Util.Copy8FromBuffer(buf, _offset);		// lastRi		p.lastRi = (short) Util.Copy8FromBuffer(buf, _offset);		return st;	}}