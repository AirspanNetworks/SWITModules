/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;class agscImsServiceServiceMessage {	public static int _id = -1;	public static final String _name = "ServiceMessage";	public static int marshall(byte[] buf, int maxSz, OutValue<Integer> _offset, final String mimeType, final String sender, final short[] msg) {		int st = Status.STATUS_OK;		// mimeType		if (buf.length < (_offset._value+mimeType.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<mimeType.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) mimeType.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// sender		if (buf.length < (_offset._value+sender.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<sender.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) sender.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// msgQty		Util.Copy32ToBuffer(buf, msg.length, _offset);		// msgArray		for (int i = 0; i<msg.length; i++) {			Util.Copy8ToBuffer(buf, msg[i], _offset);		}		return st;	}}