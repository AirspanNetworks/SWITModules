/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscPlaGpioImpl extends DccClient {	public void initialize(final PlaGpioClient c) {		_use = c;		name = "plagpio";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscPlaGpioGpioOpen._name.equalsIgnoreCase(name)) {			agscPlaGpioGpioOpen._id = id;			return Status.STATUS_OK;		}		if (agscPlaGpioGpioWrite._name.equalsIgnoreCase(name)) {			agscPlaGpioGpioWrite._id = id;			return Status.STATUS_OK;		}		if (agscPlaGpioGpioRead._name.equalsIgnoreCase(name)) {			agscPlaGpioGpioRead._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 3;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			name._value = agscPlaGpioGpioOpen._name;			id._value = agscPlaGpioGpioOpen._id;			return Status.STATUS_OK;		}		if (index==1) {			name._value = agscPlaGpioGpioWrite._name;			id._value = agscPlaGpioGpioWrite._id;			return Status.STATUS_OK;		}		if (index==2) {			name._value = agscPlaGpioGpioRead._name;			id._value = agscPlaGpioGpioRead._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int GpioOpen(long vId, OutArray<Long> wiredGpios) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscPlaGpioGpioOpen.marshall(marshallBuf, 16000, _offset, vId);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscPlaGpioGpioOpen._id, agscPlaGpioGpioOpen._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscPlaGpioGpioOpen.unmarshall(returnBuf, returnBuf.length, _offset, wiredGpios);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GpioWrite(final sqnPlaGpioState[] states) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscPlaGpioGpioWrite.marshall(marshallBuf, 16000, _offset, states);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscPlaGpioGpioWrite._id, agscPlaGpioGpioWrite._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscPlaGpioGpioWrite.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GpioRead(final long[] select, OutArray<sqnPlaGpioState> states) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscPlaGpioGpioRead.marshall(marshallBuf, 16000, _offset, select);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscPlaGpioGpioRead._id, agscPlaGpioGpioRead._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscPlaGpioGpioRead.unmarshall(returnBuf, returnBuf.length, _offset, states);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static PlaGpioClient _use;}