/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class Ue {	public static void UeInitialize(final UeClient c) {		agscUeImpl ai = new agscUeImpl();		ai.initialize(c);	}	public static int SetT3402(int t3402s) {		return agscUeImpl.SetT3402( t3402s);	}	public static int PdnDisconnectResponse(long cid) {		return agscUeImpl.PdnDisconnectResponse( cid);	}	public static int DetachConfirm() {		return agscUeImpl.DetachConfirm();	}	public static int SetUeConfiguration(final sqnUeConfiguration ueConfig) {		return agscUeImpl.SetUeConfiguration( ueConfig);	}	public static int SetEpsBearerAuthenticationProtocol(final sqnAuthenticationParam authParam) {		return agscUeImpl.SetEpsBearerAuthenticationProtocol( authParam);	}	public static int GetEpsBearerAuthenticationProtocol(OutArray<sqnAuthenticationParam> authCtx) {		return agscUeImpl.GetEpsBearerAuthenticationProtocol( authCtx);	}	public static int GetCfunLevel(OutValue<sqnModemFunctionalityLevel> cfunLevel) {		return agscUeImpl.GetCfunLevel( cfunLevel);	}	public static int EnterAirPlaneMode() {		return agscUeImpl.EnterAirPlaneMode();	}	public static int SetAutoAttach(boolean enable) {		return agscUeImpl.SetAutoAttach( enable);	}	public static int GetAutoAttach(OutValue<Boolean> enable) {		return agscUeImpl.GetAutoAttach( enable);	}	public static int EpsAttach() {		return agscUeImpl.EpsAttach();	}	public static int EpsDetach(boolean startT3402) {		return agscUeImpl.EpsDetach( startT3402);	}	public static int GetEpsBearerIdList(OutArray<Short> epsBearerId) {		return agscUeImpl.GetEpsBearerIdList( epsBearerId);	}	public static int GetEpsBearerInfo(short epsBearerId, OutValue<sqnEpsBearerInfo> info) {		return agscUeImpl.GetEpsBearerInfo( epsBearerId, info);	}	public static int GetPlmnList(OutValue<EpsPlmnIdList> equivalentPlmnList, OutValue<EpsPlmnIdList> forbiddenPlmnList) {		return agscUeImpl.GetPlmnList( equivalentPlmnList, forbiddenPlmnList);	}	public static int GetTrackingAreaIdList(sqnTaiListType type, OutValue<EpsTaiList> taiList) {		return agscUeImpl.GetTrackingAreaIdList( type, taiList);	}	public static int GetEmmStateInfo(OutValue<sqnEmmStateInfo> info) {		return agscUeImpl.GetEmmStateInfo( info);	}	public static int GetNasInfo(OutValue<sqnNasInfo> info) {		return agscUeImpl.GetNasInfo( info);	}	public static int SetPlmnSelectionMode(final sqnPlmnSelectMode mode, final sqnPlmnFormat format, final String pPlmn, final sqnAct act) {		return agscUeImpl.SetPlmnSelectionMode( mode, format, pPlmn, act);	}	public static int GetAvailablePlmnList() {		return agscUeImpl.GetAvailablePlmnList();	}	public static int GetPlmnSelectionMode(OutValue<sqnPlmnSelectMode> plmnSelMode) {		return agscUeImpl.GetPlmnSelectionMode( plmnSelMode);	}	public static int SetAttachReqEpsBearerInfo(final sqnAttachReqEpsBearerInfo info, OutValue<Integer> status) {		return agscUeImpl.SetAttachReqEpsBearerInfo( info, status);	}	public static int GetAttachReqEpsBearerInfo(OutValue<sqnAttachReqEpsBearerInfo> info) {		return agscUeImpl.GetAttachReqEpsBearerInfo( info);	}	public static int GetNetworkStatus(OutValue<MmUeState> registrationState) {		return agscUeImpl.GetNetworkStatus( registrationState);	}	public static int PdnEstablishedConfirm(long cid) {		return agscUeImpl.PdnEstablishedConfirm( cid);	}	public static int GetPdnList(OutArray<sqnPdnConfig> pdn) {		return agscUeImpl.GetPdnList( pdn);	}	public static int GetPdnListExt(OutArray<sqnPdnConfigExt> pdn) {		return agscUeImpl.GetPdnListExt( pdn);	}	public static int SetEpsNetworkRegistrationStatus(boolean enable) {		return agscUeImpl.SetEpsNetworkRegistrationStatus( enable);	}	public static int GetEpsNetworkRegistrationStatus(OutValue<Boolean> enable, OutValue<sqnNetworkRegistrationInfo> networkRegistrationInfo) {		return agscUeImpl.GetEpsNetworkRegistrationStatus( enable, networkRegistrationInfo);	}	public static int SetDefaultEpsBearerConfiguration(final sqnDefaultEpsBearerCtxInfo info) {		return agscUeImpl.SetDefaultEpsBearerConfiguration( info);	}	public static int UnsetDefaultEpsBearerConfiguration(long cid) {		return agscUeImpl.UnsetDefaultEpsBearerConfiguration( cid);	}	public static int GetDefaultEpsBearerConfiguration(OutArray<sqnDefaultEpsBearerCtxInfo> ctx) {		return agscUeImpl.GetDefaultEpsBearerConfiguration( ctx);	}	public static int SetDedicatedEpsBearerConfiguration(final sqnDedicatedEpsBearerCtxInfo info) {		return agscUeImpl.SetDedicatedEpsBearerConfiguration( info);	}	public static int UnsetDedicatedEpsBearerConfiguration(long cid) {		return agscUeImpl.UnsetDedicatedEpsBearerConfiguration( cid);	}	public static int GetDedicatedEpsBearerConfiguration(OutArray<sqnDedicatedEpsBearerCtxInfo> ctx) {		return agscUeImpl.GetDedicatedEpsBearerConfiguration( ctx);	}	public static int SetEpsBearerContextQos(final sqnEpsBearerCtxQos qos) {		return agscUeImpl.SetEpsBearerContextQos( qos);	}	public static int UnsetEpsBearerContextQos(long cid) {		return agscUeImpl.UnsetEpsBearerContextQos( cid);	}	public static int GetEpsBearerContextQos(OutArray<sqnEpsBearerCtxQos> qos) {		return agscUeImpl.GetEpsBearerContextQos( qos);	}	public static int SetEpsBearerContextTft(final sqnEpsBearerCtxTft tft) {		return agscUeImpl.SetEpsBearerContextTft( tft);	}	public static int UnsetEpsBearerContextTft(long cid) {		return agscUeImpl.UnsetEpsBearerContextTft( cid);	}	public static int GetEpsBearerContextTft(long cid, OutValue<Boolean> tftPresent, OutValue<EpsTft> tft) {		return agscUeImpl.GetEpsBearerContextTft( cid, tftPresent, tft);	}	public static int SetEpsBearerContextStatus(long cid, boolean activate, boolean incThrottling) {		return agscUeImpl.SetEpsBearerContextStatus( cid, activate, incThrottling);	}	public static int GetEpsBearerContextStatus(OutArray<sqnActivationStatus> ctx) {		return agscUeImpl.GetEpsBearerContextStatus( ctx);	}	public static int SetDefaultPdnCid(final long cid) {		return agscUeImpl.SetDefaultPdnCid( cid);	}	public static int GetDefaultPdnCid(OutValue<Long> cid) {		return agscUeImpl.GetDefaultPdnCid( cid);	}	public static int ConfigureSimAccess(final boolean remote) {		return agscUeImpl.ConfigureSimAccess( remote);	}	public static int RemoteSimPresent() {		return agscUeImpl.RemoteSimPresent();	}	public static int RemoteSimAbsent() {		return agscUeImpl.RemoteSimAbsent();	}	public static int RemoteSimPinUnlocked() {		return agscUeImpl.RemoteSimPinUnlocked();	}	public static int RemoteSimCommandRsp(final String response, boolean isSuccess) {		return agscUeImpl.RemoteSimCommandRsp( response, isSuccess);	}	public static int LockSimInterface(final boolean status) {		return agscUeImpl.LockSimInterface( status);	}	public static int SendSimCommand(final sqnSimCommandReq cmdReq) {		return agscUeImpl.SendSimCommand( cmdReq);	}	public static int SendCrsmCommand(final sqnCrsmCommandReq cmdReq) {		return agscUeImpl.SendCrsmCommand( cmdReq);	}	public static int GetSimPresence(OutValue<Boolean> simPresent) {		return agscUeImpl.GetSimPresence( simPresent);	}	public static int GetPinStatus(OutValue<sqnPinStatus> pinStatus, OutValue<Short> remainingAttempts) {		return agscUeImpl.GetPinStatus( pinStatus, remainingAttempts);	}	public static int GetEnabledPinStatus(OutValue<Boolean> enabled) {		return agscUeImpl.GetEnabledPinStatus( enabled);	}	public static int EnterPin(final String pin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		return agscUeImpl.EnterPin( pin, status, remainingAttempts);	}	public static int EnterPuk(final String puk, final String newPin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		return agscUeImpl.EnterPuk( puk, newPin, status, remainingAttempts);	}	public static int ChangePin(final String oldPin, final String newPin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		return agscUeImpl.ChangePin( oldPin, newPin, status, remainingAttempts);	}	public static int EnablePin(final String pin, boolean enable, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		return agscUeImpl.EnablePin( pin, enable, status, remainingAttempts);	}	public static int GetPinPukRetries(OutValue<Short> pinRetries, OutValue<Short> pinDefaultRetries, OutValue<Short> pukRetries, OutValue<Short> pukDefaultRetries) {		return agscUeImpl.GetPinPukRetries( pinRetries, pinDefaultRetries, pukRetries, pukDefaultRetries);	}	public static int GetUsimEfBinary(final sqnUsimEfPath path, int offset, short length, OutValue<sqnReafEfStatus> status, OutValue<sqnUsimEfBinary> binaryData) {		return agscUeImpl.GetUsimEfBinary( path, offset, length, status, binaryData);	}	public static int GetUsimEfRecord(final sqnUsimEfPath path, long recordId, OutValue<sqnReafEfStatus> status, OutValue<sqnUsimEfRecord> record) {		return agscUeImpl.GetUsimEfRecord( path, recordId, status, record);	}	public static int GetUsimEf(final sqnUsimEfPath path, OutValue<sqnReafEfStatus> status, OutValue<sqnUsimEf> ef) {		return agscUeImpl.GetUsimEf( path, status, ef);	}	public static int GetUsimEfPath(sqnUsimEfType efType, OutValue<sqnUsimEfPath> efPath) {		return agscUeImpl.GetUsimEfPath( efType, efPath);	}	public static int GetServiceTimerValue(OutValue<Integer> valueInSeconds) {		return agscUeImpl.GetServiceTimerValue( valueInSeconds);	}	public static int SetServiceTimerValue(int valueInSeconds) {		return agscUeImpl.SetServiceTimerValue( valueInSeconds);	}	public static int SetSimCachedMode(long isCached) {		return agscUeImpl.SetSimCachedMode( isCached);	}	public static int GetSimCachedMode(OutValue<Boolean> isCached) {		return agscUeImpl.GetSimCachedMode( isCached);	}	public static int GetIccId(OutValue<String> id) {		return agscUeImpl.GetIccId( id);	}	public static int GetCellReselectionInfo(OutValue<sqnCellReselectionInfo> info) {		return agscUeImpl.GetCellReselectionInfo( info);	}	public static int GetCampCellInfo(OutValue<sqnCampedCellInfo> info) {		return agscUeImpl.GetCampCellInfo( info);	}	public static int SetCellScanConfig(final sqnCellScanConfig config) {		return agscUeImpl.SetCellScanConfig( config);	}	public static int SetRequiredCellList(final sqnRequiredCellList config) {		return agscUeImpl.SetRequiredCellList( config);	}	public static int SetInitialCellSelectionConfig(final sqnInitialCellSelectionConfig cfg) {		return agscUeImpl.SetInitialCellSelectionConfig( cfg);	}	public static int GetInitialCellSelectionConfig(OutValue<sqnInitialCellSelectionConfig> info) {		return agscUeImpl.GetInitialCellSelectionConfig( info);	}	public static int AddInitialCellSelectionBand(final sqnBandInfo band) {		return agscUeImpl.AddInitialCellSelectionBand( band);	}	public static int AddInitialCellSelectionFreq(short band, int earfcn) {		return agscUeImpl.AddInitialCellSelectionFreq( band, earfcn);	}	public static int AddInitialCellSelectionFreqRange(short band, int earfcnMin, int earfcnMax) {		return agscUeImpl.AddInitialCellSelectionFreqRange( band, earfcnMin, earfcnMax);	}	public static int RemoveInitialCellSelectionFreq(short bandNumber, int earfcn) {		return agscUeImpl.RemoveInitialCellSelectionFreq( bandNumber, earfcn);	}	public static int RemoveAllInitialCellSelectionFreq() {		return agscUeImpl.RemoveAllInitialCellSelectionFreq();	}	public static int SetPlmnSelectParam(final sqnPlmnSelectParam param) {		return agscUeImpl.SetPlmnSelectParam( param);	}	public static int GetPlmnSelectParam(OutValue<sqnPlmnSelectParam> info) {		return agscUeImpl.GetPlmnSelectParam( info);	}	public static int SetSpecificDrxCycle(sqnDrxCycleParameterMs specDrxCycle) {		return agscUeImpl.SetSpecificDrxCycle( specDrxCycle);	}	public static int GetSpecificDrxCycle(OutValue<sqnDrxCycleParameterMs> specDrxCycle) {		return agscUeImpl.GetSpecificDrxCycle( specDrxCycle);	}	public static int GetEntityThroughput(OutValue<sqnThroughput> throughput) {		return agscUeImpl.GetEntityThroughput( throughput);	}	public static int GetLayerThroughput(OutValue<sqnThroughputPerLayer> throughput) {		return agscUeImpl.GetLayerThroughput( throughput);	}	public static int GetEntityPdcpParams(OutArray<sqnPdcpEntityParams> entity) {		return agscUeImpl.GetEntityPdcpParams( entity);	}	public static int GetRbParams(OutArray<sqnRlcRbEntityParams> entity) {		return agscUeImpl.GetRbParams( entity);	}	public static int GetLchEntityParams(OutArray<sqnMacLchEntityParams> entity) {		return agscUeImpl.GetLchEntityParams( entity);	}	public static int GetMacStats(OutValue<sqnMacStatistics> stats) {		return agscUeImpl.GetMacStats( stats);	}	public static int GetBlockErrorRateStats(OutValue<sqnBlockErrorRateStats> bler) {		return agscUeImpl.GetBlockErrorRateStats( bler);	}	public static int GetBufferStatusReport(OutValue<sqnBufferStatusReport> bsr) {		return agscUeImpl.GetBufferStatusReport( bsr);	}	public static int GetHarqStats(OutValue<sqnHarqStatistics> stats) {		return agscUeImpl.GetHarqStats( stats);	}	public static int GetCqiConfig(OutValue<sqnCqiConfig> config) {		return agscUeImpl.GetCqiConfig( config);	}	public static int GetDlMcsConfig(OutArray<sqnMcsConfig> entity) {		return agscUeImpl.GetDlMcsConfig( entity);	}	public static int GetUlMcsConfig(OutArray<sqnMcsUlConfig> entity) {		return agscUeImpl.GetUlMcsConfig( entity);	}	public static int GetRadioResourceControlInfo(OutValue<sqnRadioResourceControlInfo> config) {		return agscUeImpl.GetRadioResourceControlInfo( config);	}	public static int GetCinr(OutValue<sqnCinr> cinr) {		return agscUeImpl.GetCinr( cinr);	}	public static int GetPhyStats(OutValue<sqnPhyStats> pPhyStats) {		return agscUeImpl.GetPhyStats( pPhyStats);	}	public static int GetPhyRxStats(OutValue<sqnPhyStats> pPhyRxStats) {		return agscUeImpl.GetPhyRxStats( pPhyRxStats);	}	public static int GetPhyTxStats(OutValue<sqnPhyTxStats> pPhyTxStats) {		return agscUeImpl.GetPhyTxStats( pPhyTxStats);	}	public static int GetIdentities(OutValue<sqnUeIdentities> identities) {		return agscUeImpl.GetIdentities( identities);	}}