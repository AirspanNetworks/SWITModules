/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnUsimEfPath {	public int fileId;	public sqnPathType pathType;	public short pathLength;	public int[] efPath = new int[3];	public sqnUsimEfPath() {		// Initialization		// pathType		pathType = new sqnPathType();	}	public static int marshall(byte[] buf, final sqnUsimEfPath p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+7)) return DccError.ERR_OVERFLOW;		// fileId		Util.Copy16ToBuffer(buf, p.fileId, _offset);		// pathType		if ( Status.STATUS_OK != (st = sqnPathType.marshall(buf, p.pathType, _offset)) ) return st;		// pathLength		Util.Copy8ToBuffer(buf, p.pathLength, _offset);		// efPath		for (int i = 0; i<3; i++) {			Util.Copy16ToBuffer(buf, p.efPath[i], _offset);		}		return st;	}	public static int unmarshall(final byte[] buf, sqnUsimEfPath p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+7)) return DccError.ERR_OVERFLOW;		// fileId		p.fileId = (int) Util.Copy16FromBuffer(buf, _offset);		// pathType		if ( Status.STATUS_OK != (st = sqnPathType.unmarshall(buf, p.pathType, _offset)) ) return st;		// pathLength		p.pathLength = (short) Util.Copy8FromBuffer(buf, _offset);		// efPath		for (int i = 0; i<3; i++) {			p.efPath[i] = (int) Util.Copy16FromBuffer(buf, _offset);		}		return st;	}}