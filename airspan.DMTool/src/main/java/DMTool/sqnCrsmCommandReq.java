/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnCrsmCommandReq {	public sqnCrsmCommand command;	public boolean fileIdPresent;	public int fileId;	public boolean p1P2P3Present;	public short p1;	public short p2;	public short p3;	public boolean pathIdPresent;	public short efPathLength;	public short[] efPath = new short[10];	public boolean dataPresent;	public int dataLength;	public short[] data = new short[260];	public sqnCrsmCommandReq() {		// Initialization		// command		command = new sqnCrsmCommand();	}	public static int marshall(byte[] buf, final sqnCrsmCommandReq p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+28)) return DccError.ERR_OVERFLOW;		// command		if ( Status.STATUS_OK != (st = sqnCrsmCommand.marshall(buf, p.command, _offset)) ) return st;		// fileIdPresent		Util.Copy32ToBuffer(buf, p.fileIdPresent, _offset);		// fileId		Util.Copy16ToBuffer(buf, p.fileId, _offset);		// p1P2P3Present		Util.Copy32ToBuffer(buf, p.p1P2P3Present, _offset);		// p1		Util.Copy8ToBuffer(buf, p.p1, _offset);		// p2		Util.Copy8ToBuffer(buf, p.p2, _offset);		// p3		Util.Copy8ToBuffer(buf, p.p3, _offset);		// pathIdPresent		Util.Copy32ToBuffer(buf, p.pathIdPresent, _offset);		// efPathLength		Util.Copy8ToBuffer(buf, p.efPathLength, _offset);		// efPath		for (int i = 0; i<10; i++) {			Util.Copy8ToBuffer(buf, p.efPath[i], _offset);		}		// dataPresent		Util.Copy32ToBuffer(buf, p.dataPresent, _offset);		// dataLength		Util.Copy16ToBuffer(buf, p.dataLength, _offset);		// data		for (int i = 0; i<260; i++) {			Util.Copy8ToBuffer(buf, p.data[i], _offset);		}		return st;	}	public static int unmarshall(final byte[] buf, sqnCrsmCommandReq p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+28)) return DccError.ERR_OVERFLOW;		// command		if ( Status.STATUS_OK != (st = sqnCrsmCommand.unmarshall(buf, p.command, _offset)) ) return st;		// fileIdPresent		p.fileIdPresent = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// fileId		p.fileId = (int) Util.Copy16FromBuffer(buf, _offset);		// p1P2P3Present		p.p1P2P3Present = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// p1		p.p1 = (short) Util.Copy8FromBuffer(buf, _offset);		// p2		p.p2 = (short) Util.Copy8FromBuffer(buf, _offset);		// p3		p.p3 = (short) Util.Copy8FromBuffer(buf, _offset);		// pathIdPresent		p.pathIdPresent = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// efPathLength		p.efPathLength = (short) Util.Copy8FromBuffer(buf, _offset);		// efPath		for (int i = 0; i<10; i++) {			p.efPath[i] = (short) Util.Copy8FromBuffer(buf, _offset);		}		// dataPresent		p.dataPresent = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// dataLength		p.dataLength = (int) Util.Copy16FromBuffer(buf, _offset);		// data		for (int i = 0; i<260; i++) {			p.data[i] = (short) Util.Copy8FromBuffer(buf, _offset);		}		return st;	}}