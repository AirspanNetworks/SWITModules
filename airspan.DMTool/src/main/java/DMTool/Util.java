/* ***************************************************************** * * Module  : JDC - Util * ***************************************************************** * *  Copyright (c) 2004-2009 SEQUANS Communications. *  All rights reserved. * *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class Util {	    public static void Copy8ToBuffer(byte[] buf, final int p, OutValue<Integer> offset) {	Copy8ToBuffer(buf, (short)p, offset);    }    public static void Copy8ToBuffer(byte[] buf, final short p, OutValue<Integer> offset) {    	buf[offset._value] = (byte) p;	offset._value = offset._value + 1;	    }    public static void Copy8ToBuffer(byte[] buf, final char p, OutValue<Integer> offset) {	Copy8ToBuffer(buf, (short)p, offset);    }    public static void Copy16ToBuffer(byte[] buf, final int p, OutValue<Integer> offset) {    	buf[offset._value+0] = (byte) ((p >> 8) & 0xFF);	buf[offset._value+1] = (byte) (p & 0xFF);	offset._value = offset._value + 2;	    }    public static void Copy32ToBuffer(byte[] buf, final long p, OutValue<Integer> offset) {    	buf[offset._value+0] = (byte) ((p >> 24) & 0xFF);	buf[offset._value+1] = (byte) ((p >> 16) & 0xFF);	buf[offset._value+2] = (byte) ((p >> 8) & 0xFF);	buf[offset._value+3] = (byte) (p & 0xFF);	offset._value = offset._value + 4;	    }    public static void Copy32ToBuffer(byte[] buf, final boolean p, OutValue<Integer> offset) {	Copy32ToBuffer(buf, p?1:0, offset);    }    public static void Copy64ToBuffer(byte[] buf, final long p, OutValue<Integer> offset) {    	buf[offset._value+0] = (byte) ((p >> 56) & 0xFF);	buf[offset._value+1] = (byte) ((p >> 48) & 0xFF);	buf[offset._value+2] = (byte) ((p >> 40) & 0xFF);	buf[offset._value+3] = (byte) ((p >> 32) & 0xFF);	buf[offset._value+4] = (byte) ((p >> 24) & 0xFF);	buf[offset._value+5] = (byte) ((p >> 16) & 0xFF);	buf[offset._value+6] = (byte) ((p >> 8) & 0xFF);	buf[offset._value+7] = (byte) (p & 0xFF);	offset._value = offset._value + 8;	    }    public static short Copy8FromBuffer(final byte[] buf, OutValue<Integer> offset) {		short ret = buf[offset._value];	offset._value = offset._value + 1;	return ret;    }    public static int Copy16FromBuffer(final byte[] buf, OutValue<Integer> offset) {	int ret = ((((int)buf[offset._value])&0xFF) << 8) | ((int)(buf[offset._value+1])&0xFF);	offset._value = offset._value + 2;	return ret;    }    public static long Copy32FromBuffer(final byte[] buf, OutValue<Integer> offset) {	long ret = ((((long)buf[offset._value])&0xFF) << 24) |	    ((((long)buf[offset._value+1])&0xFF) << 16) |	    ((((long)buf[offset._value+2])&0xFF) << 8)  |	    ((((long)buf[offset._value+3])&0xFF));	offset._value = offset._value + 4;	return ret;    }    public static long Copy64FromBuffer(final byte[] buf, OutValue<Integer> offset) {	long ret = ((((long)buf[offset._value])&0xFF)   << 56) |	    ((((long)buf[offset._value+1])&0xFF) << 48) |	    ((((long)buf[offset._value+2])&0xFF) << 40) |	    ((((long)buf[offset._value+3])&0xFF) << 32) |	    ((((long)buf[offset._value+4])&0xFF) << 24) |	    ((((long)buf[offset._value+5])&0xFF) << 16) |	    ((((long)buf[offset._value+6])&0xFF) << 8)  |	    ((((long)buf[offset._value+7])&0xFF));	offset._value = offset._value + 8;	return ret;    }    public static String shortToHex(short[] payload){		String hexStr = "";		String hex = "";		for (int i = 0; i < payload.length; i++) {			hex = String.format("%02x", payload[i]);			hexStr += hex.substring(hex.length() - 2) + " ";		}		return hexStr;	}	    public static byte[] shortToByte(short[] payload){		byte[] bytePayload = new byte[payload.length];		for (int i = 0; i < payload.length; i++) {			bytePayload[i] = (byte) payload[i];		}		return bytePayload;	}}