/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnMtsRfStats {	public int[] rsrp = new int[2];	public int[] cinr = new int[2];	public sqnMtsRfCqiStats[] cqi;	public sqnMtsRfStats() {		// Initialization	}	public static int marshall(byte[] buf, final sqnMtsRfStats p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		// rsrp		for (int i = 0; i<2; i++) {			Util.Copy32ToBuffer(buf, p.rsrp[i], _offset);		}		// cinr		for (int i = 0; i<2; i++) {			Util.Copy32ToBuffer(buf, p.cinr[i], _offset);		}		// cqiQty		if(p.cqi == null)			Util.Copy32ToBuffer(buf, 0, _offset);		else {			Util.Copy32ToBuffer(buf, p.cqi.length, _offset);			// cqiArray			for (int i = 0; i<p.cqi.length; i++) {				if ( Status.STATUS_OK != (st = sqnMtsRfCqiStats.marshall(buf, p.cqi[i], _offset)) ) return st;			}		}		return st;	}	public static int unmarshall(final byte[] buf, sqnMtsRfStats p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		// rsrp		for (int i = 0; i<2; i++) {			p.rsrp[i] = (int) Util.Copy32FromBuffer(buf, _offset);		}		// cinr		for (int i = 0; i<2; i++) {			p.cinr[i] = (int) Util.Copy32FromBuffer(buf, _offset);		}		// Array		{			// cqiQty			int arrSize = (int) Util.Copy32FromBuffer(buf, _offset);			// cqiArray			p.cqi = new sqnMtsRfCqiStats[arrSize];			for (int i = 0; i<p.cqi.length; i++) {				p.cqi[i] = new sqnMtsRfCqiStats();			}			for (int i = 0; i<p.cqi.length; i++) {				if ( Status.STATUS_OK != (st = sqnMtsRfCqiStats.unmarshall(buf, p.cqi[i], _offset)) ) return st;			}		}		return st;	}}