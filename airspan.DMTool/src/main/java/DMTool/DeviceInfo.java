/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class DeviceInfo {	public static void DeviceInfoInitialize(final DeviceInfoClient c) {		agscDeviceInfoImpl ai = new agscDeviceInfoImpl();		ai.initialize(c);	}	public static int GetBoardName(OutValue<String> boardName) {		return agscDeviceInfoImpl.GetBoardName( boardName);	}	public static int GetPlatformName(OutValue<String> platformName) {		return agscDeviceInfoImpl.GetPlatformName( platformName);	}	public static int GetBaseBandChipName(OutValue<String> baseBand) {		return agscDeviceInfoImpl.GetBaseBandChipName( baseBand);	}	public static int GetRfChipName(OutValue<String> chipName) {		return agscDeviceInfoImpl.GetRfChipName( chipName);	}	public static int GetRfFrequency(OutValue<Integer> minFreq, OutValue<Integer> maxFreq) {		return agscDeviceInfoImpl.GetRfFrequency( minFreq, maxFreq);	}	public static int IsFsPresent(OutValue<Boolean> fsPresent) {		return agscDeviceInfoImpl.IsFsPresent( fsPresent);	}	public static int GetMsVersion(OutValue<DeviceVersion> fwVersion, OutValue<DeviceVersion> ucVersion, OutValue<DeviceVersion> hwVersion) {		return agscDeviceInfoImpl.GetMsVersion( fwVersion, ucVersion, hwVersion);	}	public static int GetAdapterStats(OutValue<AdapterStatistics> stats) {		return agscDeviceInfoImpl.GetAdapterStats( stats);	}	public static int GetAdapterName(OutValue<String> name) {		return agscDeviceInfoImpl.GetAdapterName( name);	}	public static int RebootDevice() {		return agscDeviceInfoImpl.RebootDevice();	}	public static int ResetAdapterStats() {		return agscDeviceInfoImpl.ResetAdapterStats();	}	public static int GetAuthenticationRealm(OutValue<String> realm) {		return agscDeviceInfoImpl.GetAuthenticationRealm( realm);	}	public static int GetAsnGatewayId(OutValue<String> gateway) {		return agscDeviceInfoImpl.GetAsnGatewayId( gateway);	}	public static int SetAuthConfig(final AuthConfig cfg) {		return agscDeviceInfoImpl.SetAuthConfig( cfg);	}}