/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnMacStatistics {	public long activeDemultFailNumber;	public long activeDemultySuccessNumber;	public long pdschTotalDataNumber;	public int taTimerLength;	public long activePdschCrcCorrectNumber;	public long activePdschCrcErrorNumber;	public short antennaPortNumber;	public long dlSystemRbNumber;	public long parseDci0SuccessNumber;	public long pdschCrcCorrectNumber;	public long pdschCrcErrorNumber;	public long pdschDynamicNumber;	public long pdschSemiStaticNumber;	public long receiveDci0Number;	public long sendPucchSuccessNumber;	public long sendPuschSuccessNumber;	public long ulSubCarrierRBNumber;	public long ulSymbolNumber;	public long ulSystemRbNumber;	public sqnMacStatistics() {		// Initialization	}	public static int marshall(byte[] buf, final sqnMacStatistics p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+71)) return DccError.ERR_OVERFLOW;		// activeDemultFailNumber		Util.Copy32ToBuffer(buf, p.activeDemultFailNumber, _offset);		// activeDemultySuccessNumber		Util.Copy32ToBuffer(buf, p.activeDemultySuccessNumber, _offset);		// pdschTotalDataNumber		Util.Copy32ToBuffer(buf, p.pdschTotalDataNumber, _offset);		// taTimerLength		Util.Copy16ToBuffer(buf, p.taTimerLength, _offset);		// activePdschCrcCorrectNumber		Util.Copy32ToBuffer(buf, p.activePdschCrcCorrectNumber, _offset);		// activePdschCrcErrorNumber		Util.Copy32ToBuffer(buf, p.activePdschCrcErrorNumber, _offset);		// antennaPortNumber		Util.Copy8ToBuffer(buf, p.antennaPortNumber, _offset);		// dlSystemRbNumber		Util.Copy32ToBuffer(buf, p.dlSystemRbNumber, _offset);		// parseDci0SuccessNumber		Util.Copy32ToBuffer(buf, p.parseDci0SuccessNumber, _offset);		// pdschCrcCorrectNumber		Util.Copy32ToBuffer(buf, p.pdschCrcCorrectNumber, _offset);		// pdschCrcErrorNumber		Util.Copy32ToBuffer(buf, p.pdschCrcErrorNumber, _offset);		// pdschDynamicNumber		Util.Copy32ToBuffer(buf, p.pdschDynamicNumber, _offset);		// pdschSemiStaticNumber		Util.Copy32ToBuffer(buf, p.pdschSemiStaticNumber, _offset);		// receiveDci0Number		Util.Copy32ToBuffer(buf, p.receiveDci0Number, _offset);		// sendPucchSuccessNumber		Util.Copy32ToBuffer(buf, p.sendPucchSuccessNumber, _offset);		// sendPuschSuccessNumber		Util.Copy32ToBuffer(buf, p.sendPuschSuccessNumber, _offset);		// ulSubCarrierRBNumber		Util.Copy32ToBuffer(buf, p.ulSubCarrierRBNumber, _offset);		// ulSymbolNumber		Util.Copy32ToBuffer(buf, p.ulSymbolNumber, _offset);		// ulSystemRbNumber		Util.Copy32ToBuffer(buf, p.ulSystemRbNumber, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnMacStatistics p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+71)) return DccError.ERR_OVERFLOW;		// activeDemultFailNumber		p.activeDemultFailNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// activeDemultySuccessNumber		p.activeDemultySuccessNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// pdschTotalDataNumber		p.pdschTotalDataNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// taTimerLength		p.taTimerLength = (int) Util.Copy16FromBuffer(buf, _offset);		// activePdschCrcCorrectNumber		p.activePdschCrcCorrectNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// activePdschCrcErrorNumber		p.activePdschCrcErrorNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// antennaPortNumber		p.antennaPortNumber = (short) Util.Copy8FromBuffer(buf, _offset);		// dlSystemRbNumber		p.dlSystemRbNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// parseDci0SuccessNumber		p.parseDci0SuccessNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// pdschCrcCorrectNumber		p.pdschCrcCorrectNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// pdschCrcErrorNumber		p.pdschCrcErrorNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// pdschDynamicNumber		p.pdschDynamicNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// pdschSemiStaticNumber		p.pdschSemiStaticNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// receiveDci0Number		p.receiveDci0Number = (long) Util.Copy32FromBuffer(buf, _offset);		// sendPucchSuccessNumber		p.sendPucchSuccessNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// sendPuschSuccessNumber		p.sendPuschSuccessNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// ulSubCarrierRBNumber		p.ulSubCarrierRBNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// ulSymbolNumber		p.ulSymbolNumber = (long) Util.Copy32FromBuffer(buf, _offset);		// ulSystemRbNumber		p.ulSystemRbNumber = (long) Util.Copy32FromBuffer(buf, _offset);		return st;	}}