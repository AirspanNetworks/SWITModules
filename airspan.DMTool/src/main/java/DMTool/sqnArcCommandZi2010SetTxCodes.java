/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnArcCommandZi2010SetTxCodes {	public boolean force;	public short apcCode;	public short paCode;	public sqnArcCommandZi2010SetTxCodes() {		// Initialization	}	public static int marshall(byte[] buf, final sqnArcCommandZi2010SetTxCodes p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+6)) return DccError.ERR_OVERFLOW;		// force		Util.Copy32ToBuffer(buf, p.force, _offset);		// apcCode		Util.Copy8ToBuffer(buf, p.apcCode, _offset);		// paCode		Util.Copy8ToBuffer(buf, p.paCode, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnArcCommandZi2010SetTxCodes p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+6)) return DccError.ERR_OVERFLOW;		// force		p.force = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// apcCode		p.apcCode = (short) Util.Copy8FromBuffer(buf, _offset);		// paCode		p.paCode = (short) Util.Copy8FromBuffer(buf, _offset);		return st;	}}