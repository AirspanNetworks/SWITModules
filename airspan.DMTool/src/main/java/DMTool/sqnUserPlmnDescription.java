/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnUserPlmnDescription {	public EpsPlmnIdTag plmnId;	public EpsRatTag rat;	public int rsrp;	public EpsPlmnStatusTag status;	public sqnUserPlmnDescription() {		// Initialization		// plmnId		plmnId = new EpsPlmnIdTag();		// rat		rat = new EpsRatTag();		// status		status = new EpsPlmnStatusTag();	}	public static int marshall(byte[] buf, final sqnUserPlmnDescription p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+12)) return DccError.ERR_OVERFLOW;		// plmnId		if ( Status.STATUS_OK != (st = EpsPlmnIdTag.marshall(buf, p.plmnId, _offset)) ) return st;		// rat		if ( Status.STATUS_OK != (st = EpsRatTag.marshall(buf, p.rat, _offset)) ) return st;		// rsrp		Util.Copy32ToBuffer(buf, p.rsrp, _offset);		// status		if ( Status.STATUS_OK != (st = EpsPlmnStatusTag.marshall(buf, p.status, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnUserPlmnDescription p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+12)) return DccError.ERR_OVERFLOW;		// plmnId		if ( Status.STATUS_OK != (st = EpsPlmnIdTag.unmarshall(buf, p.plmnId, _offset)) ) return st;		// rat		if ( Status.STATUS_OK != (st = EpsRatTag.unmarshall(buf, p.rat, _offset)) ) return st;		// rsrp		p.rsrp = (int) Util.Copy32FromBuffer(buf, _offset);		// status		if ( Status.STATUS_OK != (st = EpsPlmnStatusTag.unmarshall(buf, p.status, _offset)) ) return st;		return st;	}}