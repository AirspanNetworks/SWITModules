/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnThroughput {	public sqnPdcpThroughputReport pdcpThroughput;	public sqnRlcThroughputReport rlcThroughput;	public sqnMacThroughputReport macThroughput;	public sqnPhyThroughputReport phyThroughput;	public sqnThroughput() {		// Initialization		// pdcpThroughput		pdcpThroughput = new sqnPdcpThroughputReport();		// rlcThroughput		rlcThroughput = new sqnRlcThroughputReport();		// macThroughput		macThroughput = new sqnMacThroughputReport();		// phyThroughput		phyThroughput = new sqnPhyThroughputReport();	}	public static int marshall(byte[] buf, final sqnThroughput p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+0)) return DccError.ERR_OVERFLOW;		// pdcpThroughput		if ( Status.STATUS_OK != (st = sqnPdcpThroughputReport.marshall(buf, p.pdcpThroughput, _offset)) ) return st;		// rlcThroughput		if ( Status.STATUS_OK != (st = sqnRlcThroughputReport.marshall(buf, p.rlcThroughput, _offset)) ) return st;		// macThroughput		if ( Status.STATUS_OK != (st = sqnMacThroughputReport.marshall(buf, p.macThroughput, _offset)) ) return st;		// phyThroughput		if ( Status.STATUS_OK != (st = sqnPhyThroughputReport.marshall(buf, p.phyThroughput, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnThroughput p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+0)) return DccError.ERR_OVERFLOW;		// pdcpThroughput		if ( Status.STATUS_OK != (st = sqnPdcpThroughputReport.unmarshall(buf, p.pdcpThroughput, _offset)) ) return st;		// rlcThroughput		if ( Status.STATUS_OK != (st = sqnRlcThroughputReport.unmarshall(buf, p.rlcThroughput, _offset)) ) return st;		// macThroughput		if ( Status.STATUS_OK != (st = sqnMacThroughputReport.unmarshall(buf, p.macThroughput, _offset)) ) return st;		// phyThroughput		if ( Status.STATUS_OK != (st = sqnPhyThroughputReport.unmarshall(buf, p.phyThroughput, _offset)) ) return st;		return st;	}}