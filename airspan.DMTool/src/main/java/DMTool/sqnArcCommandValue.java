/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnArcCommandValue {	public sqnArcCommandSetRxGain setRxGain;	public sqnArcCommandSetTxGain setTxGain;	public sqnArcCommandSetFrequency setFrequency;	public sqnArcCommandGenerateTxTone generateTxTone;	public sqnArcCommandSetTxIqmPhase setTxIqmPhase;	public sqnArcCommandSetTxIqmGain setTxIqmGain;	public sqnArcCommandSetTxIqmShift setTxIqmShift;	public sqnArcCommandSetTxIqmOffset setTxIqmOffset;	public sqnArcCommandSetTxDiversity setTxDiversity;	public sqnArcCommandReset reset;	public sqnArcCommandControlClockReset controlClockReset;	public sqnArcCommandControlClockSleep controlClockSleep;	public sqnArcCommandMax2839SetRxCodes max2839SetRxCodes;	public sqnArcCommandMax2839SetTxCodes max2839SetTxCodes;	public sqnArcCommandMax2839UnsetRxCodes max2839UnsetRxCodes;	public sqnArcCommandMax2839UnsetTxCodes max2839UnsetTxCodes;	public sqnArcCommandMax2839ForceRx max2839ForceRx;	public sqnArcCommandMax2839ForceTx max2839ForceTx;	public sqnArcCommandZi2010SetRxCodes zi2010SetRxCodes;	public sqnArcCommandZi2010SetTxCodes zi2010SetTxCodes;	public sqnArcCommandZi2010SetFrameMode zi2010SetFrameMode;	public sqnArcCommandZi2010SetTcxo zi2010SetTcxo;	public sqnArcCommandZi2010SetRxInputPower zi2010SetRxInputPower;	public sqnArcCommandZi2010SetTxIqmc zi2010SetTxIqmc;	public sqnArcCommandZi2010SetRxIqmc zi2010SetRxIqmc;	public sqnArcCommandZi2010SetTxDcoc zi2010SetTxDcoc;	public sqnArcCommandZi2010SetTcxoTable zi2010SetTcxoTable;	public sqnArcCommandSqn3140SetRxCodes sqn3140SetRxCodes;	public sqnArcCommandSqn3140SetRxGroup sqn3140SetRxGroup;	public sqnArcCommandSqn3140SetTxCodes sqn3140SetTxCodes;	public sqnArcCommandSqn3140UnsetRxCodes sqn3140UnsetRxCodes;	public sqnArcCommandSqn3140UnsetTxCodes sqn3140UnsetTxCodes;	public sqnArcCommandSqn3140ForceRx sqn3140ForceRx;	public sqnArcCommandSqn3140ForceTx sqn3140ForceTx;	public sqnArcCommandSqn3140SetRxInputPower sqn3140SetRxInputPower;	public sqnArcCommandMb86lxxxForceRx mb86lxxxForceRx;	public sqnArcCommandMb86lxxxForceTx mb86lxxxForceTx;	public sqnArcCommandMb86lxxxStop mb86lxxxStop;	public sqnArcCommandMb86lxxxSetOpenLoop mb86lxxxSetOpenLoop;	public sqnArcCommandMb86lxxxSetPoutComp mb86lxxxSetPoutComp;	public sqnArcCommandValue() {		// Initialization		// setRxGain		setRxGain = new sqnArcCommandSetRxGain();		// setTxGain		setTxGain = new sqnArcCommandSetTxGain();		// setFrequency		setFrequency = new sqnArcCommandSetFrequency();		// generateTxTone		generateTxTone = new sqnArcCommandGenerateTxTone();		// setTxIqmPhase		setTxIqmPhase = new sqnArcCommandSetTxIqmPhase();		// setTxIqmGain		setTxIqmGain = new sqnArcCommandSetTxIqmGain();		// setTxIqmShift		setTxIqmShift = new sqnArcCommandSetTxIqmShift();		// setTxIqmOffset		setTxIqmOffset = new sqnArcCommandSetTxIqmOffset();		// setTxDiversity		setTxDiversity = new sqnArcCommandSetTxDiversity();		// reset		reset = new sqnArcCommandReset();		// controlClockReset		controlClockReset = new sqnArcCommandControlClockReset();		// controlClockSleep		controlClockSleep = new sqnArcCommandControlClockSleep();		// max2839SetRxCodes		max2839SetRxCodes = new sqnArcCommandMax2839SetRxCodes();		// max2839SetTxCodes		max2839SetTxCodes = new sqnArcCommandMax2839SetTxCodes();		// max2839UnsetRxCodes		max2839UnsetRxCodes = new sqnArcCommandMax2839UnsetRxCodes();		// max2839UnsetTxCodes		max2839UnsetTxCodes = new sqnArcCommandMax2839UnsetTxCodes();		// max2839ForceRx		max2839ForceRx = new sqnArcCommandMax2839ForceRx();		// max2839ForceTx		max2839ForceTx = new sqnArcCommandMax2839ForceTx();		// zi2010SetRxCodes		zi2010SetRxCodes = new sqnArcCommandZi2010SetRxCodes();		// zi2010SetTxCodes		zi2010SetTxCodes = new sqnArcCommandZi2010SetTxCodes();		// zi2010SetFrameMode		zi2010SetFrameMode = new sqnArcCommandZi2010SetFrameMode();		// zi2010SetTcxo		zi2010SetTcxo = new sqnArcCommandZi2010SetTcxo();		// zi2010SetRxInputPower		zi2010SetRxInputPower = new sqnArcCommandZi2010SetRxInputPower();		// zi2010SetTxIqmc		zi2010SetTxIqmc = new sqnArcCommandZi2010SetTxIqmc();		// zi2010SetRxIqmc		zi2010SetRxIqmc = new sqnArcCommandZi2010SetRxIqmc();		// zi2010SetTxDcoc		zi2010SetTxDcoc = new sqnArcCommandZi2010SetTxDcoc();		// zi2010SetTcxoTable		zi2010SetTcxoTable = new sqnArcCommandZi2010SetTcxoTable();		// sqn3140SetRxCodes		sqn3140SetRxCodes = new sqnArcCommandSqn3140SetRxCodes();		// sqn3140SetRxGroup		sqn3140SetRxGroup = new sqnArcCommandSqn3140SetRxGroup();		// sqn3140SetTxCodes		sqn3140SetTxCodes = new sqnArcCommandSqn3140SetTxCodes();		// sqn3140UnsetRxCodes		sqn3140UnsetRxCodes = new sqnArcCommandSqn3140UnsetRxCodes();		// sqn3140UnsetTxCodes		sqn3140UnsetTxCodes = new sqnArcCommandSqn3140UnsetTxCodes();		// sqn3140ForceRx		sqn3140ForceRx = new sqnArcCommandSqn3140ForceRx();		// sqn3140ForceTx		sqn3140ForceTx = new sqnArcCommandSqn3140ForceTx();		// sqn3140SetRxInputPower		sqn3140SetRxInputPower = new sqnArcCommandSqn3140SetRxInputPower();		// mb86lxxxForceRx		mb86lxxxForceRx = new sqnArcCommandMb86lxxxForceRx();		// mb86lxxxForceTx		mb86lxxxForceTx = new sqnArcCommandMb86lxxxForceTx();		// mb86lxxxStop		mb86lxxxStop = new sqnArcCommandMb86lxxxStop();		// mb86lxxxSetOpenLoop		mb86lxxxSetOpenLoop = new sqnArcCommandMb86lxxxSetOpenLoop();		// mb86lxxxSetPoutComp		mb86lxxxSetPoutComp = new sqnArcCommandMb86lxxxSetPoutComp();	}	public static int marshall(byte[] buf, final sqnArcCommandValue p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+0)) return DccError.ERR_OVERFLOW;		// setRxGain		if ( Status.STATUS_OK != (st = sqnArcCommandSetRxGain.marshall(buf, p.setRxGain, _offset)) ) return st;		// setTxGain		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxGain.marshall(buf, p.setTxGain, _offset)) ) return st;		// setFrequency		if ( Status.STATUS_OK != (st = sqnArcCommandSetFrequency.marshall(buf, p.setFrequency, _offset)) ) return st;		// generateTxTone		if ( Status.STATUS_OK != (st = sqnArcCommandGenerateTxTone.marshall(buf, p.generateTxTone, _offset)) ) return st;		// setTxIqmPhase		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxIqmPhase.marshall(buf, p.setTxIqmPhase, _offset)) ) return st;		// setTxIqmGain		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxIqmGain.marshall(buf, p.setTxIqmGain, _offset)) ) return st;		// setTxIqmShift		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxIqmShift.marshall(buf, p.setTxIqmShift, _offset)) ) return st;		// setTxIqmOffset		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxIqmOffset.marshall(buf, p.setTxIqmOffset, _offset)) ) return st;		// setTxDiversity		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxDiversity.marshall(buf, p.setTxDiversity, _offset)) ) return st;		// reset		if ( Status.STATUS_OK != (st = sqnArcCommandReset.marshall(buf, p.reset, _offset)) ) return st;		// controlClockReset		if ( Status.STATUS_OK != (st = sqnArcCommandControlClockReset.marshall(buf, p.controlClockReset, _offset)) ) return st;		// controlClockSleep		if ( Status.STATUS_OK != (st = sqnArcCommandControlClockSleep.marshall(buf, p.controlClockSleep, _offset)) ) return st;		// max2839SetRxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839SetRxCodes.marshall(buf, p.max2839SetRxCodes, _offset)) ) return st;		// max2839SetTxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839SetTxCodes.marshall(buf, p.max2839SetTxCodes, _offset)) ) return st;		// max2839UnsetRxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839UnsetRxCodes.marshall(buf, p.max2839UnsetRxCodes, _offset)) ) return st;		// max2839UnsetTxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839UnsetTxCodes.marshall(buf, p.max2839UnsetTxCodes, _offset)) ) return st;		// max2839ForceRx		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839ForceRx.marshall(buf, p.max2839ForceRx, _offset)) ) return st;		// max2839ForceTx		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839ForceTx.marshall(buf, p.max2839ForceTx, _offset)) ) return st;		// zi2010SetRxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetRxCodes.marshall(buf, p.zi2010SetRxCodes, _offset)) ) return st;		// zi2010SetTxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetTxCodes.marshall(buf, p.zi2010SetTxCodes, _offset)) ) return st;		// zi2010SetFrameMode		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetFrameMode.marshall(buf, p.zi2010SetFrameMode, _offset)) ) return st;		// zi2010SetTcxo		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetTcxo.marshall(buf, p.zi2010SetTcxo, _offset)) ) return st;		// zi2010SetRxInputPower		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetRxInputPower.marshall(buf, p.zi2010SetRxInputPower, _offset)) ) return st;		// zi2010SetTxIqmc		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetTxIqmc.marshall(buf, p.zi2010SetTxIqmc, _offset)) ) return st;		// zi2010SetRxIqmc		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetRxIqmc.marshall(buf, p.zi2010SetRxIqmc, _offset)) ) return st;		// zi2010SetTxDcoc		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetTxDcoc.marshall(buf, p.zi2010SetTxDcoc, _offset)) ) return st;		// zi2010SetTcxoTable		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetTcxoTable.marshall(buf, p.zi2010SetTcxoTable, _offset)) ) return st;		// sqn3140SetRxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140SetRxCodes.marshall(buf, p.sqn3140SetRxCodes, _offset)) ) return st;		// sqn3140SetRxGroup		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140SetRxGroup.marshall(buf, p.sqn3140SetRxGroup, _offset)) ) return st;		// sqn3140SetTxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140SetTxCodes.marshall(buf, p.sqn3140SetTxCodes, _offset)) ) return st;		// sqn3140UnsetRxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140UnsetRxCodes.marshall(buf, p.sqn3140UnsetRxCodes, _offset)) ) return st;		// sqn3140UnsetTxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140UnsetTxCodes.marshall(buf, p.sqn3140UnsetTxCodes, _offset)) ) return st;		// sqn3140ForceRx		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140ForceRx.marshall(buf, p.sqn3140ForceRx, _offset)) ) return st;		// sqn3140ForceTx		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140ForceTx.marshall(buf, p.sqn3140ForceTx, _offset)) ) return st;		// sqn3140SetRxInputPower		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140SetRxInputPower.marshall(buf, p.sqn3140SetRxInputPower, _offset)) ) return st;		// mb86lxxxForceRx		if ( Status.STATUS_OK != (st = sqnArcCommandMb86lxxxForceRx.marshall(buf, p.mb86lxxxForceRx, _offset)) ) return st;		// mb86lxxxForceTx		if ( Status.STATUS_OK != (st = sqnArcCommandMb86lxxxForceTx.marshall(buf, p.mb86lxxxForceTx, _offset)) ) return st;		// mb86lxxxStop		if ( Status.STATUS_OK != (st = sqnArcCommandMb86lxxxStop.marshall(buf, p.mb86lxxxStop, _offset)) ) return st;		// mb86lxxxSetOpenLoop		if ( Status.STATUS_OK != (st = sqnArcCommandMb86lxxxSetOpenLoop.marshall(buf, p.mb86lxxxSetOpenLoop, _offset)) ) return st;		// mb86lxxxSetPoutComp		if ( Status.STATUS_OK != (st = sqnArcCommandMb86lxxxSetPoutComp.marshall(buf, p.mb86lxxxSetPoutComp, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnArcCommandValue p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+0)) return DccError.ERR_OVERFLOW;		// setRxGain		if ( Status.STATUS_OK != (st = sqnArcCommandSetRxGain.unmarshall(buf, p.setRxGain, _offset)) ) return st;		// setTxGain		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxGain.unmarshall(buf, p.setTxGain, _offset)) ) return st;		// setFrequency		if ( Status.STATUS_OK != (st = sqnArcCommandSetFrequency.unmarshall(buf, p.setFrequency, _offset)) ) return st;		// generateTxTone		if ( Status.STATUS_OK != (st = sqnArcCommandGenerateTxTone.unmarshall(buf, p.generateTxTone, _offset)) ) return st;		// setTxIqmPhase		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxIqmPhase.unmarshall(buf, p.setTxIqmPhase, _offset)) ) return st;		// setTxIqmGain		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxIqmGain.unmarshall(buf, p.setTxIqmGain, _offset)) ) return st;		// setTxIqmShift		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxIqmShift.unmarshall(buf, p.setTxIqmShift, _offset)) ) return st;		// setTxIqmOffset		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxIqmOffset.unmarshall(buf, p.setTxIqmOffset, _offset)) ) return st;		// setTxDiversity		if ( Status.STATUS_OK != (st = sqnArcCommandSetTxDiversity.unmarshall(buf, p.setTxDiversity, _offset)) ) return st;		// reset		if ( Status.STATUS_OK != (st = sqnArcCommandReset.unmarshall(buf, p.reset, _offset)) ) return st;		// controlClockReset		if ( Status.STATUS_OK != (st = sqnArcCommandControlClockReset.unmarshall(buf, p.controlClockReset, _offset)) ) return st;		// controlClockSleep		if ( Status.STATUS_OK != (st = sqnArcCommandControlClockSleep.unmarshall(buf, p.controlClockSleep, _offset)) ) return st;		// max2839SetRxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839SetRxCodes.unmarshall(buf, p.max2839SetRxCodes, _offset)) ) return st;		// max2839SetTxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839SetTxCodes.unmarshall(buf, p.max2839SetTxCodes, _offset)) ) return st;		// max2839UnsetRxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839UnsetRxCodes.unmarshall(buf, p.max2839UnsetRxCodes, _offset)) ) return st;		// max2839UnsetTxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839UnsetTxCodes.unmarshall(buf, p.max2839UnsetTxCodes, _offset)) ) return st;		// max2839ForceRx		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839ForceRx.unmarshall(buf, p.max2839ForceRx, _offset)) ) return st;		// max2839ForceTx		if ( Status.STATUS_OK != (st = sqnArcCommandMax2839ForceTx.unmarshall(buf, p.max2839ForceTx, _offset)) ) return st;		// zi2010SetRxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetRxCodes.unmarshall(buf, p.zi2010SetRxCodes, _offset)) ) return st;		// zi2010SetTxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetTxCodes.unmarshall(buf, p.zi2010SetTxCodes, _offset)) ) return st;		// zi2010SetFrameMode		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetFrameMode.unmarshall(buf, p.zi2010SetFrameMode, _offset)) ) return st;		// zi2010SetTcxo		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetTcxo.unmarshall(buf, p.zi2010SetTcxo, _offset)) ) return st;		// zi2010SetRxInputPower		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetRxInputPower.unmarshall(buf, p.zi2010SetRxInputPower, _offset)) ) return st;		// zi2010SetTxIqmc		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetTxIqmc.unmarshall(buf, p.zi2010SetTxIqmc, _offset)) ) return st;		// zi2010SetRxIqmc		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetRxIqmc.unmarshall(buf, p.zi2010SetRxIqmc, _offset)) ) return st;		// zi2010SetTxDcoc		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetTxDcoc.unmarshall(buf, p.zi2010SetTxDcoc, _offset)) ) return st;		// zi2010SetTcxoTable		if ( Status.STATUS_OK != (st = sqnArcCommandZi2010SetTcxoTable.unmarshall(buf, p.zi2010SetTcxoTable, _offset)) ) return st;		// sqn3140SetRxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140SetRxCodes.unmarshall(buf, p.sqn3140SetRxCodes, _offset)) ) return st;		// sqn3140SetRxGroup		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140SetRxGroup.unmarshall(buf, p.sqn3140SetRxGroup, _offset)) ) return st;		// sqn3140SetTxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140SetTxCodes.unmarshall(buf, p.sqn3140SetTxCodes, _offset)) ) return st;		// sqn3140UnsetRxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140UnsetRxCodes.unmarshall(buf, p.sqn3140UnsetRxCodes, _offset)) ) return st;		// sqn3140UnsetTxCodes		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140UnsetTxCodes.unmarshall(buf, p.sqn3140UnsetTxCodes, _offset)) ) return st;		// sqn3140ForceRx		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140ForceRx.unmarshall(buf, p.sqn3140ForceRx, _offset)) ) return st;		// sqn3140ForceTx		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140ForceTx.unmarshall(buf, p.sqn3140ForceTx, _offset)) ) return st;		// sqn3140SetRxInputPower		if ( Status.STATUS_OK != (st = sqnArcCommandSqn3140SetRxInputPower.unmarshall(buf, p.sqn3140SetRxInputPower, _offset)) ) return st;		// mb86lxxxForceRx		if ( Status.STATUS_OK != (st = sqnArcCommandMb86lxxxForceRx.unmarshall(buf, p.mb86lxxxForceRx, _offset)) ) return st;		// mb86lxxxForceTx		if ( Status.STATUS_OK != (st = sqnArcCommandMb86lxxxForceTx.unmarshall(buf, p.mb86lxxxForceTx, _offset)) ) return st;		// mb86lxxxStop		if ( Status.STATUS_OK != (st = sqnArcCommandMb86lxxxStop.unmarshall(buf, p.mb86lxxxStop, _offset)) ) return st;		// mb86lxxxSetOpenLoop		if ( Status.STATUS_OK != (st = sqnArcCommandMb86lxxxSetOpenLoop.unmarshall(buf, p.mb86lxxxSetOpenLoop, _offset)) ) return st;		// mb86lxxxSetPoutComp		if ( Status.STATUS_OK != (st = sqnArcCommandMb86lxxxSetPoutComp.unmarshall(buf, p.mb86lxxxSetPoutComp, _offset)) ) return st;		return st;	}}