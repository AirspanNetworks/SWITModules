/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnPhyRachConfig {	public short macContentionResolutionTimer;	public short maxHarqMsg3Tx;	public long msgPowerOffsetGroupB;	public long msgSizeGroupA;	public int preambleInitRxTargetPower;	public short preambleTransMax;	public char raRampPwr;	public short rachMaskIndex;	public short preambleGroupANumber;	public short preambleIdx;	public short raPreambleNumber;	public short raResponseWindowSize;	public sqnPhyRachConfig() {		// Initialization	}	public static int marshall(byte[] buf, final sqnPhyRachConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+21)) return DccError.ERR_OVERFLOW;		// macContentionResolutionTimer		Util.Copy8ToBuffer(buf, p.macContentionResolutionTimer, _offset);		// maxHarqMsg3Tx		Util.Copy8ToBuffer(buf, p.maxHarqMsg3Tx, _offset);		// msgPowerOffsetGroupB		Util.Copy32ToBuffer(buf, p.msgPowerOffsetGroupB, _offset);		// msgSizeGroupA		Util.Copy32ToBuffer(buf, p.msgSizeGroupA, _offset);		// preambleInitRxTargetPower		Util.Copy32ToBuffer(buf, p.preambleInitRxTargetPower, _offset);		// preambleTransMax		Util.Copy8ToBuffer(buf, p.preambleTransMax, _offset);		// raRampPwr		Util.Copy8ToBuffer(buf, p.raRampPwr, _offset);		// rachMaskIndex		Util.Copy8ToBuffer(buf, p.rachMaskIndex, _offset);		// preambleGroupANumber		Util.Copy8ToBuffer(buf, p.preambleGroupANumber, _offset);		// preambleIdx		Util.Copy8ToBuffer(buf, p.preambleIdx, _offset);		// raPreambleNumber		Util.Copy8ToBuffer(buf, p.raPreambleNumber, _offset);		// raResponseWindowSize		Util.Copy8ToBuffer(buf, p.raResponseWindowSize, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnPhyRachConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+21)) return DccError.ERR_OVERFLOW;		// macContentionResolutionTimer		p.macContentionResolutionTimer = (short) Util.Copy8FromBuffer(buf, _offset);		// maxHarqMsg3Tx		p.maxHarqMsg3Tx = (short) Util.Copy8FromBuffer(buf, _offset);		// msgPowerOffsetGroupB		p.msgPowerOffsetGroupB = (long) Util.Copy32FromBuffer(buf, _offset);		// msgSizeGroupA		p.msgSizeGroupA = (long) Util.Copy32FromBuffer(buf, _offset);		// preambleInitRxTargetPower		p.preambleInitRxTargetPower = (int) Util.Copy32FromBuffer(buf, _offset);		// preambleTransMax		p.preambleTransMax = (short) Util.Copy8FromBuffer(buf, _offset);		// raRampPwr		p.raRampPwr = (char) Util.Copy8FromBuffer(buf, _offset);		// rachMaskIndex		p.rachMaskIndex = (short) Util.Copy8FromBuffer(buf, _offset);		// preambleGroupANumber		p.preambleGroupANumber = (short) Util.Copy8FromBuffer(buf, _offset);		// preambleIdx		p.preambleIdx = (short) Util.Copy8FromBuffer(buf, _offset);		// raPreambleNumber		p.raPreambleNumber = (short) Util.Copy8FromBuffer(buf, _offset);		// raResponseWindowSize		p.raResponseWindowSize = (short) Util.Copy8FromBuffer(buf, _offset);		return st;	}}