/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscHasImpl extends DccClient {	public void initialize(final HasClient c) {		_use = c;		name = "has";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscHasOpen._name.equalsIgnoreCase(name)) {			agscHasOpen._id = id;			return Status.STATUS_OK;		}		if (agscHasRead._name.equalsIgnoreCase(name)) {			agscHasRead._id = id;			return Status.STATUS_OK;		}		if (agscHasWrite._name.equalsIgnoreCase(name)) {			agscHasWrite._id = id;			return Status.STATUS_OK;		}		if (agscHasClose._name.equalsIgnoreCase(name)) {			agscHasClose._id = id;			return Status.STATUS_OK;		}		if (agscHasAnchor._name.equalsIgnoreCase(name)) {			agscHasAnchor._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		if (agscHasAnchor._id == id) return agscHasAnchor.notify(buf);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 5;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			name._value = agscHasOpen._name;			id._value = agscHasOpen._id;			return Status.STATUS_OK;		}		if (index==1) {			name._value = agscHasRead._name;			id._value = agscHasRead._id;			return Status.STATUS_OK;		}		if (index==2) {			name._value = agscHasWrite._name;			id._value = agscHasWrite._id;			return Status.STATUS_OK;		}		if (index==3) {			name._value = agscHasClose._name;			id._value = agscHasClose._id;			return Status.STATUS_OK;		}		if (index==4) {			serviceType.value = (agscHasImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscHasAnchor._name;			id._value = agscHasAnchor._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int Open(final String pathname, long flags, OutValue<Integer> result) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscHasOpen.marshall(marshallBuf, 16000, _offset, pathname, flags);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscHasOpen._id, agscHasOpen._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscHasOpen.unmarshall(returnBuf, returnBuf.length, _offset, result);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int Read(int fd, long count, long offset, OutValue<sqnHasErrors> rv, OutArray<Short> data) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscHasRead.marshall(marshallBuf, 16000, _offset, fd, count, offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscHasRead._id, agscHasRead._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscHasRead.unmarshall(returnBuf, returnBuf.length, _offset, rv, data);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int Write(int fd, final short[] data, long offset, OutValue<sqnHasErrors> rv, OutValue<Long> written) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscHasWrite.marshall(marshallBuf, 16000, _offset, fd, data, offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscHasWrite._id, agscHasWrite._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscHasWrite.unmarshall(returnBuf, returnBuf.length, _offset, rv, written);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int Close(int fd, OutValue<Integer> result) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscHasClose.marshall(marshallBuf, 16000, _offset, fd);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscHasClose._id, agscHasClose._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscHasClose.unmarshall(returnBuf, returnBuf.length, _offset, result);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static HasClient _use;}