/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnArcCommandType {	public int value;	public static final int SQN_ARC_COMMAND_NOP = 0;	public static final int SQN_ARC_COMMAND_ROUTINE = 1;	public static final int SQN_ARC_COMMAND_DELAY = 2;	public static final int SQN_ARC_COMMAND_SET_TRIGGER = 3;	public static final int SQN_ARC_COMMAND_MEASURE = 4;	public static final int SQN_ARC_COMMAND_SET_RX_GAIN = 5;	public static final int SQN_ARC_COMMAND_SET_TX_GAIN = 6;	public static final int SQN_ARC_COMMAND_SET_FREQUENCY = 7;	public static final int SQN_ARC_COMMAND_GENERATE_TX_TONE = 8;	public static final int SQN_ARC_COMMAND_SET_TX_IQM_PHASE = 9;	public static final int SQN_ARC_COMMAND_SET_TX_IQM_GAIN = 10;	public static final int SQN_ARC_COMMAND_SET_TX_IQM_SHIFT = 11;	public static final int SQN_ARC_COMMAND_SET_TX_IQM_OFFSET = 12;	public static final int SQN_ARC_COMMAND_SET_TX_DIVERSITY = 13;	public static final int SQN_ARC_COMMAND_RESET = 14;	public static final int SQN_ARC_COMMAND_CONTROL_CLOCK_RESET = 15;	public static final int SQN_ARC_COMMAND_CONTROL_CLOCK_SLEEP = 16;	public static final int SQN_ARC_COMMAND_MAX2839_SET_RX_CODES = 64;	public static final int SQN_ARC_COMMAND_MAX2839_SET_TX_CODES = 65;	public static final int SQN_ARC_COMMAND_MAX2839_UNSET_RX_CODES = 66;	public static final int SQN_ARC_COMMAND_MAX2839_UNSET_TX_CODES = 67;	public static final int SQN_ARC_COMMAND_MAX2839_FORCE_TX = 68;	public static final int SQN_ARC_COMMAND_MAX2839_FORCE_RX = 69;	public static final int SQN_ARC_COMMAND_ZI2010_SET_FRAME_MODE = 80;	public static final int SQN_ARC_COMMAND_ZI2010_SET_RX_CODES = 81;	public static final int SQN_ARC_COMMAND_ZI2010_SET_TX_CODES = 82;	public static final int SQN_ARC_COMMAND_ZI2010_SET_RX_INPUT_POWER = 83;	public static final int SQN_ARC_COMMAND_ZI2010_SET_RX_IQMC = 84;	public static final int SQN_ARC_COMMAND_ZI2010_SET_TX_IQMC = 85;	public static final int SQN_ARC_COMMAND_ZI2010_SET_TX_DCOC = 86;	public static final int SQN_ARC_COMMAND_ZI2010_SET_TCXO = 87;	public static final int SQN_ARC_COMMAND_ZI2010_SET_TCXO_TABLE = 88;	public static final int SQN_ARC_COMMAND_SQN3140_SET_RX_CODES = 96;	public static final int SQN_ARC_COMMAND_SQN3140_SET_RX_GROUP = 97;	public static final int SQN_ARC_COMMAND_SQN3140_SET_TX_CODES = 98;	public static final int SQN_ARC_COMMAND_SQN3140_UNSET_RX_CODES = 99;	public static final int SQN_ARC_COMMAND_SQN3140_UNSET_TX_CODES = 100;	public static final int SQN_ARC_COMMAND_SQN3140_FORCE_TX = 101;	public static final int SQN_ARC_COMMAND_SQN3140_FORCE_RX = 102;	public static final int SQN_ARC_COMMAND_SQN3140_SET_RX_INPUT_POWER = 103;	public static final int SQN_ARC_COMMAND_MB86LXXX_FORCE_TX = 112;	public static final int SQN_ARC_COMMAND_MB86LXXX_FORCE_RX = 113;	public static final int SQN_ARC_COMMAND_MB86LXXX_STOP = 114;	public static final int SQN_ARC_COMMAND_MB86LXXX_SET_OPEN_LOOP = 115;	public static final int SQN_ARC_COMMAND_MB86LXXX_SET_POUT_COMP = 116;	public static int marshall(byte[] buf, final sqnArcCommandType p, OutValue<Integer> _offset) {		// Check the size of the buffer		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		Util.Copy32ToBuffer(buf, p.value, _offset);		return Status.STATUS_OK;	}	public static int unmarshall(final byte[] buf, sqnArcCommandType p, OutValue<Integer> _offset) {		// Check the size of the buffer		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		p.value = (int) Util.Copy32FromBuffer(buf, _offset);		return Status.STATUS_OK;	}}