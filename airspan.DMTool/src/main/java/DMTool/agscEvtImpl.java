package DMTool;public class agscEvtImpl extends DccClient {			public void initialize(final EvtClient c) {		_use = c;		name = "evt";		DeviceController.registerClient(this);	}					public int resolveService(final String name, int id) {		if (agscEvtGetEvtList._name.equalsIgnoreCase(name)) {			agscEvtGetEvtList._id = id;			return Status.STATUS_OK;		}		if (agscEvtGetDecodingInfo._name.equalsIgnoreCase(name)) {			agscEvtGetDecodingInfo._id = id;			return Status.STATUS_OK;		}		if (agscEvtSetEnable._name.equalsIgnoreCase(name)) {			agscEvtSetEnable._id = id;			return Status.STATUS_OK;		}		if (agscEvtDisableAll._name.equalsIgnoreCase(name)) {			agscEvtDisableAll._id = id;			return Status.STATUS_OK;		}		if (agscEvtEvt._name.equalsIgnoreCase(name)) {			agscEvtEvt._id = id;			return Status.STATUS_OK;		}		if (agscEvtGetEvtDescrImage._name.equalsIgnoreCase(name)) {			agscEvtGetEvtDescrImage._id = id;			return Status.STATUS_OK;		}		if (agscEvtGetEvtCount._name.equalsIgnoreCase(name)) {			agscEvtGetEvtCount._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		if (agscEvtEvt._id == id)			return agscEvtEvt.notify(buf,_use);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 7;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index == 0) {			name._value = agscEvtGetEvtList._name;			id._value = agscEvtGetEvtList._id;			return Status.STATUS_OK;		}		if (index == 1) {			name._value = agscEvtGetDecodingInfo._name;			id._value = agscEvtGetDecodingInfo._id;			return Status.STATUS_OK;		}		if (index == 2) {			name._value = agscEvtSetEnable._name;			id._value = agscEvtSetEnable._id;			return Status.STATUS_OK;		}		if (index == 3) {			name._value = agscEvtDisableAll._name;			id._value = agscEvtDisableAll._id;			return Status.STATUS_OK;		}		if (index == 4) {			serviceType.value = (agscEvtImpl._use != null) ? ServiceType.SERVICE_NOTIFICATION					: ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscEvtEvt._name;			id._value = agscEvtEvt._id;			return Status.STATUS_OK;		}		if (index == 5) {			name._value = agscEvtGetEvtDescrImage._name;			id._value = agscEvtGetEvtDescrImage._id;			return Status.STATUS_OK;		}		if (index == 6) {			name._value = agscEvtGetEvtCount._name;			id._value = agscEvtGetEvtCount._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int GetEvtList(OutArray<EventDesc> evtDesc) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscEvtGetEvtList.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK)			return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscEvtGetEvtList._id, agscEvtGetEvtList._name, queryBuf, true);		if (returnBuf == null)			return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscEvtGetEvtList.unmarshall(returnBuf, returnBuf.length, _offset, evtDesc);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetDecodingInfo(OutValue<Long> dateUnitNs, OutValue<Long> endianMagic) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscEvtGetDecodingInfo.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK)			return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscEvtGetDecodingInfo._id, agscEvtGetDecodingInfo._name, queryBuf,				true);		if (returnBuf == null)			return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscEvtGetDecodingInfo.unmarshall(returnBuf, returnBuf.length, _offset, dateUnitNs, endianMagic);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetEnable(final int[] eventIdx, boolean enable) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscEvtSetEnable.marshall(marshallBuf, 16000, _offset, eventIdx, enable);		if (st != Status.STATUS_OK)			return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscEvtSetEnable._id, agscEvtSetEnable._name, queryBuf, true);		if (returnBuf == null)			return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscEvtSetEnable.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int DisableAll() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscEvtDisableAll.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK)			return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscEvtDisableAll._id, agscEvtDisableAll._name, queryBuf, true);		if (returnBuf == null)			return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscEvtDisableAll.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEvtDescrImage(int offset, OutArray<Short> image) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscEvtGetEvtDescrImage.marshall(marshallBuf, 16000, _offset, offset);		if (st != Status.STATUS_OK)			return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscEvtGetEvtDescrImage._id, agscEvtGetEvtDescrImage._name, queryBuf,				true);		if (returnBuf == null)			return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscEvtGetEvtDescrImage.unmarshall(returnBuf, returnBuf.length, _offset, image);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEvtCount(OutArray<sqnEvtStats> evtStats) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscEvtGetEvtCount.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK)			return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscEvtGetEvtCount._id, agscEvtGetEvtCount._name, queryBuf, true);		if (returnBuf == null)			return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscEvtGetEvtCount.unmarshall(returnBuf, returnBuf.length, _offset, evtStats);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static EvtClient _use;}