/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnHarqStatistics {	public long reTx1stCount;	public long reTx2ndCount;	public long reTx3rdCount;	public long reTx4thCount;	public long reTx5thCount;	public long reTx6thCount;	public long reTx7thCount;	public long reTx8thCount;	public long reTx9thCount;	public long code0DlHarqAck;	public long code0DlHarqNack;	public long code1DlHarqAck;	public long code1DlHarqNack;	public long firstTransfer;	public long maxReTxCount;	public long ulHarqAck;	public long ulHarqNack;	public sqnHarqStatistics() {		// Initialization	}	public static int marshall(byte[] buf, final sqnHarqStatistics p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+68)) return DccError.ERR_OVERFLOW;		// reTx1stCount		Util.Copy32ToBuffer(buf, p.reTx1stCount, _offset);		// reTx2ndCount		Util.Copy32ToBuffer(buf, p.reTx2ndCount, _offset);		// reTx3rdCount		Util.Copy32ToBuffer(buf, p.reTx3rdCount, _offset);		// reTx4thCount		Util.Copy32ToBuffer(buf, p.reTx4thCount, _offset);		// reTx5thCount		Util.Copy32ToBuffer(buf, p.reTx5thCount, _offset);		// reTx6thCount		Util.Copy32ToBuffer(buf, p.reTx6thCount, _offset);		// reTx7thCount		Util.Copy32ToBuffer(buf, p.reTx7thCount, _offset);		// reTx8thCount		Util.Copy32ToBuffer(buf, p.reTx8thCount, _offset);		// reTx9thCount		Util.Copy32ToBuffer(buf, p.reTx9thCount, _offset);		// code0DlHarqAck		Util.Copy32ToBuffer(buf, p.code0DlHarqAck, _offset);		// code0DlHarqNack		Util.Copy32ToBuffer(buf, p.code0DlHarqNack, _offset);		// code1DlHarqAck		Util.Copy32ToBuffer(buf, p.code1DlHarqAck, _offset);		// code1DlHarqNack		Util.Copy32ToBuffer(buf, p.code1DlHarqNack, _offset);		// firstTransfer		Util.Copy32ToBuffer(buf, p.firstTransfer, _offset);		// maxReTxCount		Util.Copy32ToBuffer(buf, p.maxReTxCount, _offset);		// ulHarqAck		Util.Copy32ToBuffer(buf, p.ulHarqAck, _offset);		// ulHarqNack		Util.Copy32ToBuffer(buf, p.ulHarqNack, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnHarqStatistics p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+68)) return DccError.ERR_OVERFLOW;		// reTx1stCount		p.reTx1stCount = (long) Util.Copy32FromBuffer(buf, _offset);		// reTx2ndCount		p.reTx2ndCount = (long) Util.Copy32FromBuffer(buf, _offset);		// reTx3rdCount		p.reTx3rdCount = (long) Util.Copy32FromBuffer(buf, _offset);		// reTx4thCount		p.reTx4thCount = (long) Util.Copy32FromBuffer(buf, _offset);		// reTx5thCount		p.reTx5thCount = (long) Util.Copy32FromBuffer(buf, _offset);		// reTx6thCount		p.reTx6thCount = (long) Util.Copy32FromBuffer(buf, _offset);		// reTx7thCount		p.reTx7thCount = (long) Util.Copy32FromBuffer(buf, _offset);		// reTx8thCount		p.reTx8thCount = (long) Util.Copy32FromBuffer(buf, _offset);		// reTx9thCount		p.reTx9thCount = (long) Util.Copy32FromBuffer(buf, _offset);		// code0DlHarqAck		p.code0DlHarqAck = (long) Util.Copy32FromBuffer(buf, _offset);		// code0DlHarqNack		p.code0DlHarqNack = (long) Util.Copy32FromBuffer(buf, _offset);		// code1DlHarqAck		p.code1DlHarqAck = (long) Util.Copy32FromBuffer(buf, _offset);		// code1DlHarqNack		p.code1DlHarqNack = (long) Util.Copy32FromBuffer(buf, _offset);		// firstTransfer		p.firstTransfer = (long) Util.Copy32FromBuffer(buf, _offset);		// maxReTxCount		p.maxReTxCount = (long) Util.Copy32FromBuffer(buf, _offset);		// ulHarqAck		p.ulHarqAck = (long) Util.Copy32FromBuffer(buf, _offset);		// ulHarqNack		p.ulHarqNack = (long) Util.Copy32FromBuffer(buf, _offset);		return st;	}}