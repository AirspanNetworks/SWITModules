/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnMtsVersion {	public char[] coreVer = new char[256];	public char[] bspVer = new char[256];	public char[] bootloaderVer = new char[256];	public sqnMtsComponentInfo[] component;	public sqnMtsVersion() {		// Initialization	}	public static int marshall(byte[] buf, final sqnMtsVersion p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		// coreVer		for (int i = 0; i<256; i++) {			Util.Copy8ToBuffer(buf, p.coreVer[i], _offset);		}		// bspVer		for (int i = 0; i<256; i++) {			Util.Copy8ToBuffer(buf, p.bspVer[i], _offset);		}		// bootloaderVer		for (int i = 0; i<256; i++) {			Util.Copy8ToBuffer(buf, p.bootloaderVer[i], _offset);		}		// componentQty		if(p.component == null)			Util.Copy32ToBuffer(buf, 0, _offset);		else {			Util.Copy32ToBuffer(buf, p.component.length, _offset);			// componentArray			for (int i = 0; i<p.component.length; i++) {				if ( Status.STATUS_OK != (st = sqnMtsComponentInfo.marshall(buf, p.component[i], _offset)) ) return st;			}		}		return st;	}	public static int unmarshall(final byte[] buf, sqnMtsVersion p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		// coreVer		for (int i = 0; i<256; i++) {			p.coreVer[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		// bspVer		for (int i = 0; i<256; i++) {			p.bspVer[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		// bootloaderVer		for (int i = 0; i<256; i++) {			p.bootloaderVer[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		// Array		{			// componentQty			int arrSize = (int) Util.Copy32FromBuffer(buf, _offset);			// componentArray			p.component = new sqnMtsComponentInfo[arrSize];			for (int i = 0; i<p.component.length; i++) {				p.component[i] = new sqnMtsComponentInfo();			}			for (int i = 0; i<p.component.length; i++) {				if ( Status.STATUS_OK != (st = sqnMtsComponentInfo.unmarshall(buf, p.component[i], _offset)) ) return st;			}		}		return st;	}}