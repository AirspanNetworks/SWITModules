/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnArcCommandSetFrequency {	public long frequency;	public short bandId;	public long bandwidth;	public boolean isTdd;	public sqnArcCommandSetFrequency() {		// Initialization	}	public static int marshall(byte[] buf, final sqnArcCommandSetFrequency p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+13)) return DccError.ERR_OVERFLOW;		// frequency		Util.Copy32ToBuffer(buf, p.frequency, _offset);		// bandId		Util.Copy8ToBuffer(buf, p.bandId, _offset);		// bandwidth		Util.Copy32ToBuffer(buf, p.bandwidth, _offset);		// isTdd		Util.Copy32ToBuffer(buf, p.isTdd, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnArcCommandSetFrequency p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+13)) return DccError.ERR_OVERFLOW;		// frequency		p.frequency = (long) Util.Copy32FromBuffer(buf, _offset);		// bandId		p.bandId = (short) Util.Copy8FromBuffer(buf, _offset);		// bandwidth		p.bandwidth = (long) Util.Copy32FromBuffer(buf, _offset);		// isTdd		p.isTdd = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		return st;	}}