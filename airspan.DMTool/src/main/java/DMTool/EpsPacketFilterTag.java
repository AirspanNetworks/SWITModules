/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class EpsPacketFilterTag {	public EpsPacketFilterDirectionTag epsDirection;	public short epsId;	public short epsEvaluationPrecedence;	public short pad;	public short epsNumOfComponents;	public EpsPacketFilterComponentTag[] epsComponentList = new EpsPacketFilterComponentTag[7];	public EpsPacketFilterTag() {		// Initialization		// epsDirection		epsDirection = new EpsPacketFilterDirectionTag();		// epsComponentList		for (int i = 0; i<epsComponentList.length; i++) {			epsComponentList[i] = new EpsPacketFilterComponentTag();		}	}	public static int marshall(byte[] buf, final EpsPacketFilterTag p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+8)) return DccError.ERR_OVERFLOW;		// epsDirection		if ( Status.STATUS_OK != (st = EpsPacketFilterDirectionTag.marshall(buf, p.epsDirection, _offset)) ) return st;		// epsId		Util.Copy8ToBuffer(buf, p.epsId, _offset);		// epsEvaluationPrecedence		Util.Copy8ToBuffer(buf, p.epsEvaluationPrecedence, _offset);		// pad		Util.Copy8ToBuffer(buf, p.pad, _offset);		// epsNumOfComponents		Util.Copy8ToBuffer(buf, p.epsNumOfComponents, _offset);		// epsComponentList		for (int i = 0; i<7; i++) {			if ( Status.STATUS_OK != (st = EpsPacketFilterComponentTag.marshall(buf, p.epsComponentList[i], _offset)) ) return st;		}		return st;	}	public static int unmarshall(final byte[] buf, EpsPacketFilterTag p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+8)) return DccError.ERR_OVERFLOW;		// epsDirection		if ( Status.STATUS_OK != (st = EpsPacketFilterDirectionTag.unmarshall(buf, p.epsDirection, _offset)) ) return st;		// epsId		p.epsId = (short) Util.Copy8FromBuffer(buf, _offset);		// epsEvaluationPrecedence		p.epsEvaluationPrecedence = (short) Util.Copy8FromBuffer(buf, _offset);		// pad		p.pad = (short) Util.Copy8FromBuffer(buf, _offset);		// epsNumOfComponents		p.epsNumOfComponents = (short) Util.Copy8FromBuffer(buf, _offset);		// epsComponentList		for (int i = 0; i<7; i++) {			if ( Status.STATUS_OK != (st = EpsPacketFilterComponentTag.unmarshall(buf, p.epsComponentList[i], _offset)) ) return st;		}		return st;	}}