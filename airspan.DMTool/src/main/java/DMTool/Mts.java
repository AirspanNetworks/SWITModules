/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class Mts {	public static void MtsInitialize(final MtsClient c) {		agscMtsImpl ai = new agscMtsImpl();		ai.initialize(c);	}	public static int Activate(final String passscode) {		return agscMtsImpl.Activate( passscode);	}	public static int GetActiveStatus(OutValue<sqnMtsStatusType> status) {		return agscMtsImpl.GetActiveStatus( status);	}	public static int WriteGpio(final sqnMtsGpioState[] states, boolean forceOutput) {		return agscMtsImpl.WriteGpio( states, forceOutput);	}	public static int ReadGpio(final long[] select, boolean forceInput, OutArray<sqnMtsGpioState> states) {		return agscMtsImpl.ReadGpio( select, forceInput, states);	}	public static int GetGpio(OutValue<Long> value) {		return agscMtsImpl.GetGpio( value);	}	public static int SetGpio(long mask, long value) {		return agscMtsImpl.SetGpio( mask, value);	}	public static int TestMemory(sqnMtsMemTestType mtType, OutValue<Boolean> result, OutValue<Long> address) {		return agscMtsImpl.TestMemory( mtType, result, address);	}	public static int TestNetwork(final String srcIp, final String dstIp, int timeout) {		return agscMtsImpl.TestNetwork( srcIp, dstIp, timeout);	}	public static int TestSim() {		return agscMtsImpl.TestSim();	}	public static int StartRf(short band, int frequency, int pci) {		return agscMtsImpl.StartRf( band, frequency, pci);	}	public static int StopRf() {		return agscMtsImpl.StopRf();	}	public static int GetRfState(OutValue<sqnMtsRfState> state) {		return agscMtsImpl.GetRfState( state);	}	public static int GetRfStats(OutValue<sqnMtsRfStats> stats) {		return agscMtsImpl.GetRfStats( stats);	}	public static int GetUlSchedulerStats(OutValue<sqnMtsUlSchedulerStats> stats) {		return agscMtsImpl.GetUlSchedulerStats( stats);	}	public static int SetRfParams(int crnti, int psd) {		return agscMtsImpl.SetRfParams( crnti, psd);	}	public static int GetRfParams(OutValue<Integer> crnti, OutValue<Integer> psd) {		return agscMtsImpl.GetRfParams( crnti, psd);	}	public static int SetRfDci(long dciData, short dciLength, short subframe) {		return agscMtsImpl.SetRfDci( dciData, dciLength, subframe);	}	public static int SetRfUplinkMode(short band, int frequency, int pci, short bandwidth, short tddConfig) {		return agscMtsImpl.SetRfUplinkMode( band, frequency, pci, bandwidth, tddConfig);	}	public static int MeasureRssi(int duration, OutValue<Integer> rssi0, OutValue<Integer> rssi1) {		return agscMtsImpl.MeasureRssi( duration, rssi0, rssi1);	}	public static int EstimateRxIqMismatchCorrection(int duration, OutValue<Short> gain0, OutValue<Short> gain1, OutValue<Short> phase0, OutValue<Short> phase1) {		return agscMtsImpl.EstimateRxIqMismatchCorrection( duration, gain0, gain1, phase0, phase1);	}	public static int EstimateRxDcOffsetCorrection(int duration, OutValue<Short> iOffset0, OutValue<Short> iOffset1, OutValue<Short> qOffset0, OutValue<Short> qOffset1) {		return agscMtsImpl.EstimateRxDcOffsetCorrection( duration, iOffset0, iOffset1, qOffset0, qOffset1);	}	public static int SetRxDcOffsetCorrection(short iOffset0, short iOffset1, short qOffset0, short qOffset1) {		return agscMtsImpl.SetRxDcOffsetCorrection( iOffset0, iOffset1, qOffset0, qOffset1);	}	public static int GetRfCalibrationState(OutValue<sqnMtsBurnState> state) {		return agscMtsImpl.GetRfCalibrationState( state);	}	public static int DumpRfCalibration(boolean verbose, OutValue<String> buffer, OutValue<Long> length) {		return agscMtsImpl.DumpRfCalibration( verbose, buffer, length);	}	public static int SetRfCalibration(final short[] data, boolean flash) {		return agscMtsImpl.SetRfCalibration( data, flash);	}	public static int GetRfCalibration(OutArray<Short> data) {		return agscMtsImpl.GetRfCalibration( data);	}	public static int SetMtsIdentities(final sqnMtsIdentities identities) {		return agscMtsImpl.SetMtsIdentities( identities);	}	public static int GetMtsIdentities(OutValue<sqnMtsIdentities> identity) {		return agscMtsImpl.GetMtsIdentities( identity);	}	public static int ActivateDevice(final String passcode) {		return agscMtsImpl.ActivateDevice( passcode);	}	public static int GetActivationState(OutValue<sqnMtsActivationState> state) {		return agscMtsImpl.GetActivationState( state);	}	public static int GetVersion(OutValue<sqnMtsVersion> version) {		return agscMtsImpl.GetVersion( version);	}	public static int GetBootromState(OutValue<sqnMtsBurnState> fState, OutValue<sqnMtsBootromState> eState) {		return agscMtsImpl.GetBootromState( fState, eState);	}	public static int UpgradeBootrom(boolean keepBootrom, sqnMtsTagPolicy tagPolicy) {		return agscMtsImpl.UpgradeBootrom( keepBootrom, tagPolicy);	}	public static int EraseAllFlash() {		return agscMtsImpl.EraseAllFlash();	}	public static int Reset() {		return agscMtsImpl.Reset();	}	public static int GetBoardInfo(OutValue<sqnMtsBoardInfo> boardInfo) {		return agscMtsImpl.GetBoardInfo( boardInfo);	}	public static int GetTemperature(OutValue<Integer> temperature) {		return agscMtsImpl.GetTemperature( temperature);	}}