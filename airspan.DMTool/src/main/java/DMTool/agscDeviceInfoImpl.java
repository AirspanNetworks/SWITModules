/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscDeviceInfoImpl extends DccClient {	public void initialize(final DeviceInfoClient c) {		_use = c;		name = "deviceinfo";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscDeviceInfoMsLoading._name.equalsIgnoreCase(name)) {			agscDeviceInfoMsLoading._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoMsDetached._name.equalsIgnoreCase(name)) {			agscDeviceInfoMsDetached._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoMsReady._name.equalsIgnoreCase(name)) {			agscDeviceInfoMsReady._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoMsFatalError._name.equalsIgnoreCase(name)) {			agscDeviceInfoMsFatalError._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoGetBoardName._name.equalsIgnoreCase(name)) {			agscDeviceInfoGetBoardName._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoGetPlatformName._name.equalsIgnoreCase(name)) {			agscDeviceInfoGetPlatformName._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoGetBaseBandChipName._name.equalsIgnoreCase(name)) {			agscDeviceInfoGetBaseBandChipName._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoGetRfChipName._name.equalsIgnoreCase(name)) {			agscDeviceInfoGetRfChipName._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoGetRfFrequency._name.equalsIgnoreCase(name)) {			agscDeviceInfoGetRfFrequency._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoIsFsPresent._name.equalsIgnoreCase(name)) {			agscDeviceInfoIsFsPresent._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoGetMsVersion._name.equalsIgnoreCase(name)) {			agscDeviceInfoGetMsVersion._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoGetAdapterStats._name.equalsIgnoreCase(name)) {			agscDeviceInfoGetAdapterStats._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoGetAdapterName._name.equalsIgnoreCase(name)) {			agscDeviceInfoGetAdapterName._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoRebootDevice._name.equalsIgnoreCase(name)) {			agscDeviceInfoRebootDevice._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoResetAdapterStats._name.equalsIgnoreCase(name)) {			agscDeviceInfoResetAdapterStats._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoGetAuthenticationRealm._name.equalsIgnoreCase(name)) {			agscDeviceInfoGetAuthenticationRealm._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoGetAsnGatewayId._name.equalsIgnoreCase(name)) {			agscDeviceInfoGetAsnGatewayId._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoAuthenticationState._name.equalsIgnoreCase(name)) {			agscDeviceInfoAuthenticationState._id = id;			return Status.STATUS_OK;		}		if (agscDeviceInfoSetAuthConfig._name.equalsIgnoreCase(name)) {			agscDeviceInfoSetAuthConfig._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		if (agscDeviceInfoMsLoading._id == id) return agscDeviceInfoMsLoading.notify(buf);		if (agscDeviceInfoMsDetached._id == id) return agscDeviceInfoMsDetached.notify(buf);		if (agscDeviceInfoMsReady._id == id) return agscDeviceInfoMsReady.notify(buf);		if (agscDeviceInfoMsFatalError._id == id) return agscDeviceInfoMsFatalError.notify(buf);		if (agscDeviceInfoAuthenticationState._id == id) return agscDeviceInfoAuthenticationState.notify(buf);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 19;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			serviceType.value = (agscDeviceInfoImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscDeviceInfoMsLoading._name;			id._value = agscDeviceInfoMsLoading._id;			return Status.STATUS_OK;		}		if (index==1) {			serviceType.value = (agscDeviceInfoImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscDeviceInfoMsDetached._name;			id._value = agscDeviceInfoMsDetached._id;			return Status.STATUS_OK;		}		if (index==2) {			serviceType.value = (agscDeviceInfoImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscDeviceInfoMsReady._name;			id._value = agscDeviceInfoMsReady._id;			return Status.STATUS_OK;		}		if (index==3) {			serviceType.value = (agscDeviceInfoImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscDeviceInfoMsFatalError._name;			id._value = agscDeviceInfoMsFatalError._id;			return Status.STATUS_OK;		}		if (index==4) {			name._value = agscDeviceInfoGetBoardName._name;			id._value = agscDeviceInfoGetBoardName._id;			return Status.STATUS_OK;		}		if (index==5) {			name._value = agscDeviceInfoGetPlatformName._name;			id._value = agscDeviceInfoGetPlatformName._id;			return Status.STATUS_OK;		}		if (index==6) {			name._value = agscDeviceInfoGetBaseBandChipName._name;			id._value = agscDeviceInfoGetBaseBandChipName._id;			return Status.STATUS_OK;		}		if (index==7) {			name._value = agscDeviceInfoGetRfChipName._name;			id._value = agscDeviceInfoGetRfChipName._id;			return Status.STATUS_OK;		}		if (index==8) {			name._value = agscDeviceInfoGetRfFrequency._name;			id._value = agscDeviceInfoGetRfFrequency._id;			return Status.STATUS_OK;		}		if (index==9) {			name._value = agscDeviceInfoIsFsPresent._name;			id._value = agscDeviceInfoIsFsPresent._id;			return Status.STATUS_OK;		}		if (index==10) {			name._value = agscDeviceInfoGetMsVersion._name;			id._value = agscDeviceInfoGetMsVersion._id;			return Status.STATUS_OK;		}		if (index==11) {			name._value = agscDeviceInfoGetAdapterStats._name;			id._value = agscDeviceInfoGetAdapterStats._id;			return Status.STATUS_OK;		}		if (index==12) {			name._value = agscDeviceInfoGetAdapterName._name;			id._value = agscDeviceInfoGetAdapterName._id;			return Status.STATUS_OK;		}		if (index==13) {			name._value = agscDeviceInfoRebootDevice._name;			id._value = agscDeviceInfoRebootDevice._id;			return Status.STATUS_OK;		}		if (index==14) {			name._value = agscDeviceInfoResetAdapterStats._name;			id._value = agscDeviceInfoResetAdapterStats._id;			return Status.STATUS_OK;		}		if (index==15) {			name._value = agscDeviceInfoGetAuthenticationRealm._name;			id._value = agscDeviceInfoGetAuthenticationRealm._id;			return Status.STATUS_OK;		}		if (index==16) {			name._value = agscDeviceInfoGetAsnGatewayId._name;			id._value = agscDeviceInfoGetAsnGatewayId._id;			return Status.STATUS_OK;		}		if (index==17) {			serviceType.value = (agscDeviceInfoImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscDeviceInfoAuthenticationState._name;			id._value = agscDeviceInfoAuthenticationState._id;			return Status.STATUS_OK;		}		if (index==18) {			name._value = agscDeviceInfoSetAuthConfig._name;			id._value = agscDeviceInfoSetAuthConfig._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int GetBoardName(OutValue<String> boardName) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoGetBoardName.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoGetBoardName._id, agscDeviceInfoGetBoardName._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoGetBoardName.unmarshall(returnBuf, returnBuf.length, _offset, boardName);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPlatformName(OutValue<String> platformName) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoGetPlatformName.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoGetPlatformName._id, agscDeviceInfoGetPlatformName._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoGetPlatformName.unmarshall(returnBuf, returnBuf.length, _offset, platformName);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetBaseBandChipName(OutValue<String> baseBand) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoGetBaseBandChipName.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoGetBaseBandChipName._id, agscDeviceInfoGetBaseBandChipName._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoGetBaseBandChipName.unmarshall(returnBuf, returnBuf.length, _offset, baseBand);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetRfChipName(OutValue<String> chipName) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoGetRfChipName.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoGetRfChipName._id, agscDeviceInfoGetRfChipName._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoGetRfChipName.unmarshall(returnBuf, returnBuf.length, _offset, chipName);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetRfFrequency(OutValue<Integer> minFreq, OutValue<Integer> maxFreq) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoGetRfFrequency.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoGetRfFrequency._id, agscDeviceInfoGetRfFrequency._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoGetRfFrequency.unmarshall(returnBuf, returnBuf.length, _offset, minFreq, maxFreq);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int IsFsPresent(OutValue<Boolean> fsPresent) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoIsFsPresent.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoIsFsPresent._id, agscDeviceInfoIsFsPresent._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoIsFsPresent.unmarshall(returnBuf, returnBuf.length, _offset, fsPresent);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetMsVersion(OutValue<DeviceVersion> fwVersion, OutValue<DeviceVersion> ucVersion, OutValue<DeviceVersion> hwVersion) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoGetMsVersion.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoGetMsVersion._id, agscDeviceInfoGetMsVersion._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoGetMsVersion.unmarshall(returnBuf, returnBuf.length, _offset, fwVersion, ucVersion, hwVersion);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetAdapterStats(OutValue<AdapterStatistics> stats) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoGetAdapterStats.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoGetAdapterStats._id, agscDeviceInfoGetAdapterStats._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoGetAdapterStats.unmarshall(returnBuf, returnBuf.length, _offset, stats);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetAdapterName(OutValue<String> name) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoGetAdapterName.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoGetAdapterName._id, agscDeviceInfoGetAdapterName._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoGetAdapterName.unmarshall(returnBuf, returnBuf.length, _offset, name);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int RebootDevice() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoRebootDevice.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoRebootDevice._id, agscDeviceInfoRebootDevice._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoRebootDevice.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ResetAdapterStats() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoResetAdapterStats.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoResetAdapterStats._id, agscDeviceInfoResetAdapterStats._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoResetAdapterStats.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetAuthenticationRealm(OutValue<String> realm) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoGetAuthenticationRealm.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoGetAuthenticationRealm._id, agscDeviceInfoGetAuthenticationRealm._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoGetAuthenticationRealm.unmarshall(returnBuf, returnBuf.length, _offset, realm);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetAsnGatewayId(OutValue<String> gateway) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoGetAsnGatewayId.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoGetAsnGatewayId._id, agscDeviceInfoGetAsnGatewayId._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoGetAsnGatewayId.unmarshall(returnBuf, returnBuf.length, _offset, gateway);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetAuthConfig(final AuthConfig cfg) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscDeviceInfoSetAuthConfig.marshall(marshallBuf, 16000, _offset, cfg);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscDeviceInfoSetAuthConfig._id, agscDeviceInfoSetAuthConfig._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscDeviceInfoSetAuthConfig.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static DeviceInfoClient _use;}