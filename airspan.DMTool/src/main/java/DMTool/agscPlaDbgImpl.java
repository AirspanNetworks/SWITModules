/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscPlaDbgImpl extends DccClient {	public void initialize(final PlaDbgClient c) {		_use = c;		name = "pladbg";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscPlaDbgDumpMem._name.equalsIgnoreCase(name)) {			agscPlaDbgDumpMem._id = id;			return Status.STATUS_OK;		}		if (agscPlaDbgModifyMem._name.equalsIgnoreCase(name)) {			agscPlaDbgModifyMem._id = id;			return Status.STATUS_OK;		}		if (agscPlaDbgShowStack._name.equalsIgnoreCase(name)) {			agscPlaDbgShowStack._id = id;			return Status.STATUS_OK;		}		if (agscPlaDbgShowAllStack._name.equalsIgnoreCase(name)) {			agscPlaDbgShowAllStack._id = id;			return Status.STATUS_OK;		}		if (agscPlaDbgKInfo._name.equalsIgnoreCase(name)) {			agscPlaDbgKInfo._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 5;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			name._value = agscPlaDbgDumpMem._name;			id._value = agscPlaDbgDumpMem._id;			return Status.STATUS_OK;		}		if (index==1) {			name._value = agscPlaDbgModifyMem._name;			id._value = agscPlaDbgModifyMem._id;			return Status.STATUS_OK;		}		if (index==2) {			name._value = agscPlaDbgShowStack._name;			id._value = agscPlaDbgShowStack._id;			return Status.STATUS_OK;		}		if (index==3) {			name._value = agscPlaDbgShowAllStack._name;			id._value = agscPlaDbgShowAllStack._id;			return Status.STATUS_OK;		}		if (index==4) {			name._value = agscPlaDbgKInfo._name;			id._value = agscPlaDbgKInfo._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int DumpMem(long baseAddr, long nunits, long width, OutArray<String> buffer) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscPlaDbgDumpMem.marshall(marshallBuf, 16000, _offset, baseAddr, nunits, width);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscPlaDbgDumpMem._id, agscPlaDbgDumpMem._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscPlaDbgDumpMem.unmarshall(returnBuf, returnBuf.length, _offset, buffer);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ModifyMem(long baseAddr, long data, long nunits, OutValue<Integer> status) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscPlaDbgModifyMem.marshall(marshallBuf, 16000, _offset, baseAddr, data, nunits);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscPlaDbgModifyMem._id, agscPlaDbgModifyMem._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscPlaDbgModifyMem.unmarshall(returnBuf, returnBuf.length, _offset, status);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ShowStack(long taskId, OutArray<String> buffer) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscPlaDbgShowStack.marshall(marshallBuf, 16000, _offset, taskId);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscPlaDbgShowStack._id, agscPlaDbgShowStack._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscPlaDbgShowStack.unmarshall(returnBuf, returnBuf.length, _offset, buffer);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ShowAllStack(OutArray<String> buffer) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscPlaDbgShowAllStack.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscPlaDbgShowAllStack._id, agscPlaDbgShowAllStack._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscPlaDbgShowAllStack.unmarshall(returnBuf, returnBuf.length, _offset, buffer);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int KInfo(OutArray<String> buffer) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscPlaDbgKInfo.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscPlaDbgKInfo._id, agscPlaDbgKInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscPlaDbgKInfo.unmarshall(returnBuf, returnBuf.length, _offset, buffer);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static PlaDbgClient _use;}