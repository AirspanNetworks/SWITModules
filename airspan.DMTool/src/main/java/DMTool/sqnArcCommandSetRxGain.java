/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnArcCommandSetRxGain {	public int gain0;	public boolean gain0Set;	public int gain1;	public boolean gain1Set;	public sqnArcCommandSetRxGain() {		// Initialization	}	public static int marshall(byte[] buf, final sqnArcCommandSetRxGain p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+16)) return DccError.ERR_OVERFLOW;		// gain0		Util.Copy32ToBuffer(buf, p.gain0, _offset);		// gain0Set		Util.Copy32ToBuffer(buf, p.gain0Set, _offset);		// gain1		Util.Copy32ToBuffer(buf, p.gain1, _offset);		// gain1Set		Util.Copy32ToBuffer(buf, p.gain1Set, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnArcCommandSetRxGain p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+16)) return DccError.ERR_OVERFLOW;		// gain0		p.gain0 = (int) Util.Copy32FromBuffer(buf, _offset);		// gain0Set		p.gain0Set = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// gain1		p.gain1 = (int) Util.Copy32FromBuffer(buf, _offset);		// gain1Set		p.gain1Set = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		return st;	}}