/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnRlcRbEntityParams {	public short logChanId;	public short rbId;	public sqnRlcMode transmitType;	public long rxMacPdu;	public long rxPdcpSdu;	public long txPduToMac;	public long txSduToPdcp;	public sqnRlcAmStateVariables vrAm;	public sqnRlcUmStateVariables vrUm;	public sqnRlcRbEntityParams() {		// Initialization		// transmitType		transmitType = new sqnRlcMode();		// vrAm		vrAm = new sqnRlcAmStateVariables();		// vrUm		vrUm = new sqnRlcUmStateVariables();	}	public static int marshall(byte[] buf, final sqnRlcRbEntityParams p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+22)) return DccError.ERR_OVERFLOW;		// logChanId		Util.Copy8ToBuffer(buf, p.logChanId, _offset);		// rbId		Util.Copy8ToBuffer(buf, p.rbId, _offset);		// transmitType		if ( Status.STATUS_OK != (st = sqnRlcMode.marshall(buf, p.transmitType, _offset)) ) return st;		// rxMacPdu		Util.Copy32ToBuffer(buf, p.rxMacPdu, _offset);		// rxPdcpSdu		Util.Copy32ToBuffer(buf, p.rxPdcpSdu, _offset);		// txPduToMac		Util.Copy32ToBuffer(buf, p.txPduToMac, _offset);		// txSduToPdcp		Util.Copy32ToBuffer(buf, p.txSduToPdcp, _offset);		// vrAm		if ( Status.STATUS_OK != (st = sqnRlcAmStateVariables.marshall(buf, p.vrAm, _offset)) ) return st;		// vrUm		if ( Status.STATUS_OK != (st = sqnRlcUmStateVariables.marshall(buf, p.vrUm, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnRlcRbEntityParams p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+22)) return DccError.ERR_OVERFLOW;		// logChanId		p.logChanId = (short) Util.Copy8FromBuffer(buf, _offset);		// rbId		p.rbId = (short) Util.Copy8FromBuffer(buf, _offset);		// transmitType		if ( Status.STATUS_OK != (st = sqnRlcMode.unmarshall(buf, p.transmitType, _offset)) ) return st;		// rxMacPdu		p.rxMacPdu = (long) Util.Copy32FromBuffer(buf, _offset);		// rxPdcpSdu		p.rxPdcpSdu = (long) Util.Copy32FromBuffer(buf, _offset);		// txPduToMac		p.txPduToMac = (long) Util.Copy32FromBuffer(buf, _offset);		// txSduToPdcp		p.txSduToPdcp = (long) Util.Copy32FromBuffer(buf, _offset);		// vrAm		if ( Status.STATUS_OK != (st = sqnRlcAmStateVariables.unmarshall(buf, p.vrAm, _offset)) ) return st;		// vrUm		if ( Status.STATUS_OK != (st = sqnRlcUmStateVariables.unmarshall(buf, p.vrUm, _offset)) ) return st;		return st;	}}