/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnLogEntry {	public long timestamp;	public int level;	public sqnLogDescr descr;	public String message;	public long length;	public sqnLogEntry() {		// Initialization		// descr		descr = new sqnLogDescr();		// message		message = "";	}	public static int marshall(byte[] buf, final sqnLogEntry p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+12)) return DccError.ERR_OVERFLOW;		// timestamp		Util.Copy32ToBuffer(buf, p.timestamp, _offset);		// level		Util.Copy32ToBuffer(buf, p.level, _offset);		// descr		if ( Status.STATUS_OK != (st = sqnLogDescr.marshall(buf, p.descr, _offset)) ) return st;		// message		if (buf.length < (_offset._value+p.message.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.message.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.message.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// length		Util.Copy32ToBuffer(buf, p.length, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnLogEntry p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+12)) return DccError.ERR_OVERFLOW;		// timestamp		p.timestamp = (long) Util.Copy32FromBuffer(buf, _offset);		// level		p.level = (int) Util.Copy32FromBuffer(buf, _offset);		// descr		if ( Status.STATUS_OK != (st = sqnLogDescr.unmarshall(buf, p.descr, _offset)) ) return st;		// message		p.message = "";		while (buf[_offset._value] != 0) {			p.message += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		// length		p.length = (long) Util.Copy32FromBuffer(buf, _offset);		return st;	}}