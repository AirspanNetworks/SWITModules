/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnRouterAdvertisement {	public String apn;	public long cid;	public sqnIp6Address ipv6;	public sqnIp6Address ipv6Gateway;	public short curHopLimit;	public int routerLifeTime;	public short flags;	public int reachableTime;	public int retransTimer;	public long mtu;	public short prefixFlags;	public int validLifeTime;	public int preferredLifeTime;	public short prefixLength;	public sqnIp6Address prefix;	public sqnRouterAdvertisement() {		// Initialization		// apn		apn = "";		// ipv6		ipv6 = new sqnIp6Address();		// ipv6Gateway		ipv6Gateway = new sqnIp6Address();		// prefix		prefix = new sqnIp6Address();	}	public static int marshall(byte[] buf, final sqnRouterAdvertisement p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+32)) return DccError.ERR_OVERFLOW;		// apn		if (buf.length < (_offset._value+p.apn.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.apn.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.apn.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// cid		Util.Copy32ToBuffer(buf, p.cid, _offset);		// ipv6		if ( Status.STATUS_OK != (st = sqnIp6Address.marshall(buf, p.ipv6, _offset)) ) return st;		// ipv6Gateway		if ( Status.STATUS_OK != (st = sqnIp6Address.marshall(buf, p.ipv6Gateway, _offset)) ) return st;		// curHopLimit		Util.Copy8ToBuffer(buf, p.curHopLimit, _offset);		// routerLifeTime		Util.Copy32ToBuffer(buf, p.routerLifeTime, _offset);		// flags		Util.Copy8ToBuffer(buf, p.flags, _offset);		// reachableTime		Util.Copy32ToBuffer(buf, p.reachableTime, _offset);		// retransTimer		Util.Copy32ToBuffer(buf, p.retransTimer, _offset);		// mtu		Util.Copy32ToBuffer(buf, p.mtu, _offset);		// prefixFlags		Util.Copy8ToBuffer(buf, p.prefixFlags, _offset);		// validLifeTime		Util.Copy32ToBuffer(buf, p.validLifeTime, _offset);		// preferredLifeTime		Util.Copy32ToBuffer(buf, p.preferredLifeTime, _offset);		// prefixLength		Util.Copy8ToBuffer(buf, p.prefixLength, _offset);		// prefix		if ( Status.STATUS_OK != (st = sqnIp6Address.marshall(buf, p.prefix, _offset)) ) return st;		return st;	}	public static int unmarshall(final byte[] buf, sqnRouterAdvertisement p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+32)) return DccError.ERR_OVERFLOW;		// apn		p.apn = "";		while (buf[_offset._value] != 0) {			p.apn += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		// cid		p.cid = (long) Util.Copy32FromBuffer(buf, _offset);		// ipv6		if ( Status.STATUS_OK != (st = sqnIp6Address.unmarshall(buf, p.ipv6, _offset)) ) return st;		// ipv6Gateway		if ( Status.STATUS_OK != (st = sqnIp6Address.unmarshall(buf, p.ipv6Gateway, _offset)) ) return st;		// curHopLimit		p.curHopLimit = (short) Util.Copy8FromBuffer(buf, _offset);		// routerLifeTime		p.routerLifeTime = (int) Util.Copy32FromBuffer(buf, _offset);		// flags		p.flags = (short) Util.Copy8FromBuffer(buf, _offset);		// reachableTime		p.reachableTime = (int) Util.Copy32FromBuffer(buf, _offset);		// retransTimer		p.retransTimer = (int) Util.Copy32FromBuffer(buf, _offset);		// mtu		p.mtu = (long) Util.Copy32FromBuffer(buf, _offset);		// prefixFlags		p.prefixFlags = (short) Util.Copy8FromBuffer(buf, _offset);		// validLifeTime		p.validLifeTime = (int) Util.Copy32FromBuffer(buf, _offset);		// preferredLifeTime		p.preferredLifeTime = (int) Util.Copy32FromBuffer(buf, _offset);		// prefixLength		p.prefixLength = (short) Util.Copy8FromBuffer(buf, _offset);		// prefix		if ( Status.STATUS_OK != (st = sqnIp6Address.unmarshall(buf, p.prefix, _offset)) ) return st;		return st;	}}