/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnPhyPucchConfig {	public boolean ueSpecificValid;	public short deltaPucchShift;	public int n1PucchAn;	public int n1PucchAnRep;	public short pucchN1Cs;	public short pucchN2Rb;	public short repeatCount;	public boolean tddAckNackFeedbackEnabled;	public sqnPhyPucchConfig() {		// Initialization	}	public static int marshall(byte[] buf, final sqnPhyPucchConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+16)) return DccError.ERR_OVERFLOW;		// ueSpecificValid		Util.Copy32ToBuffer(buf, p.ueSpecificValid, _offset);		// deltaPucchShift		Util.Copy8ToBuffer(buf, p.deltaPucchShift, _offset);		// n1PucchAn		Util.Copy16ToBuffer(buf, p.n1PucchAn, _offset);		// n1PucchAnRep		Util.Copy16ToBuffer(buf, p.n1PucchAnRep, _offset);		// pucchN1Cs		Util.Copy8ToBuffer(buf, p.pucchN1Cs, _offset);		// pucchN2Rb		Util.Copy8ToBuffer(buf, p.pucchN2Rb, _offset);		// repeatCount		Util.Copy8ToBuffer(buf, p.repeatCount, _offset);		// tddAckNackFeedbackEnabled		Util.Copy32ToBuffer(buf, p.tddAckNackFeedbackEnabled, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnPhyPucchConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+16)) return DccError.ERR_OVERFLOW;		// ueSpecificValid		p.ueSpecificValid = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// deltaPucchShift		p.deltaPucchShift = (short) Util.Copy8FromBuffer(buf, _offset);		// n1PucchAn		p.n1PucchAn = (int) Util.Copy16FromBuffer(buf, _offset);		// n1PucchAnRep		p.n1PucchAnRep = (int) Util.Copy16FromBuffer(buf, _offset);		// pucchN1Cs		p.pucchN1Cs = (short) Util.Copy8FromBuffer(buf, _offset);		// pucchN2Rb		p.pucchN2Rb = (short) Util.Copy8FromBuffer(buf, _offset);		// repeatCount		p.repeatCount = (short) Util.Copy8FromBuffer(buf, _offset);		// tddAckNackFeedbackEnabled		p.tddAckNackFeedbackEnabled = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		return st;	}}