/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscMtsImpl extends DccClient {	public void initialize(final MtsClient c) {		_use = c;		name = "mts";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscMtsActivate._name.equalsIgnoreCase(name)) {			agscMtsActivate._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetActiveStatus._name.equalsIgnoreCase(name)) {			agscMtsGetActiveStatus._id = id;			return Status.STATUS_OK;		}		if (agscMtsWriteGpio._name.equalsIgnoreCase(name)) {			agscMtsWriteGpio._id = id;			return Status.STATUS_OK;		}		if (agscMtsReadGpio._name.equalsIgnoreCase(name)) {			agscMtsReadGpio._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetGpio._name.equalsIgnoreCase(name)) {			agscMtsGetGpio._id = id;			return Status.STATUS_OK;		}		if (agscMtsSetGpio._name.equalsIgnoreCase(name)) {			agscMtsSetGpio._id = id;			return Status.STATUS_OK;		}		if (agscMtsTestMemory._name.equalsIgnoreCase(name)) {			agscMtsTestMemory._id = id;			return Status.STATUS_OK;		}		if (agscMtsTestNetwork._name.equalsIgnoreCase(name)) {			agscMtsTestNetwork._id = id;			return Status.STATUS_OK;		}		if (agscMtsTestSim._name.equalsIgnoreCase(name)) {			agscMtsTestSim._id = id;			return Status.STATUS_OK;		}		if (agscMtsStartRf._name.equalsIgnoreCase(name)) {			agscMtsStartRf._id = id;			return Status.STATUS_OK;		}		if (agscMtsStopRf._name.equalsIgnoreCase(name)) {			agscMtsStopRf._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetRfState._name.equalsIgnoreCase(name)) {			agscMtsGetRfState._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetRfStats._name.equalsIgnoreCase(name)) {			agscMtsGetRfStats._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetUlSchedulerStats._name.equalsIgnoreCase(name)) {			agscMtsGetUlSchedulerStats._id = id;			return Status.STATUS_OK;		}		if (agscMtsNotifyRfEvent._name.equalsIgnoreCase(name)) {			agscMtsNotifyRfEvent._id = id;			return Status.STATUS_OK;		}		if (agscMtsSetRfParams._name.equalsIgnoreCase(name)) {			agscMtsSetRfParams._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetRfParams._name.equalsIgnoreCase(name)) {			agscMtsGetRfParams._id = id;			return Status.STATUS_OK;		}		if (agscMtsSetRfDci._name.equalsIgnoreCase(name)) {			agscMtsSetRfDci._id = id;			return Status.STATUS_OK;		}		if (agscMtsSetRfUplinkMode._name.equalsIgnoreCase(name)) {			agscMtsSetRfUplinkMode._id = id;			return Status.STATUS_OK;		}		if (agscMtsMeasureRssi._name.equalsIgnoreCase(name)) {			agscMtsMeasureRssi._id = id;			return Status.STATUS_OK;		}		if (agscMtsEstimateRxIqMismatchCorrection._name.equalsIgnoreCase(name)) {			agscMtsEstimateRxIqMismatchCorrection._id = id;			return Status.STATUS_OK;		}		if (agscMtsEstimateRxDcOffsetCorrection._name.equalsIgnoreCase(name)) {			agscMtsEstimateRxDcOffsetCorrection._id = id;			return Status.STATUS_OK;		}		if (agscMtsSetRxDcOffsetCorrection._name.equalsIgnoreCase(name)) {			agscMtsSetRxDcOffsetCorrection._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetRfCalibrationState._name.equalsIgnoreCase(name)) {			agscMtsGetRfCalibrationState._id = id;			return Status.STATUS_OK;		}		if (agscMtsDumpRfCalibration._name.equalsIgnoreCase(name)) {			agscMtsDumpRfCalibration._id = id;			return Status.STATUS_OK;		}		if (agscMtsSetRfCalibration._name.equalsIgnoreCase(name)) {			agscMtsSetRfCalibration._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetRfCalibration._name.equalsIgnoreCase(name)) {			agscMtsGetRfCalibration._id = id;			return Status.STATUS_OK;		}		if (agscMtsSetMtsIdentities._name.equalsIgnoreCase(name)) {			agscMtsSetMtsIdentities._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetMtsIdentities._name.equalsIgnoreCase(name)) {			agscMtsGetMtsIdentities._id = id;			return Status.STATUS_OK;		}		if (agscMtsActivateDevice._name.equalsIgnoreCase(name)) {			agscMtsActivateDevice._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetActivationState._name.equalsIgnoreCase(name)) {			agscMtsGetActivationState._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetVersion._name.equalsIgnoreCase(name)) {			agscMtsGetVersion._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetBootromState._name.equalsIgnoreCase(name)) {			agscMtsGetBootromState._id = id;			return Status.STATUS_OK;		}		if (agscMtsUpgradeBootrom._name.equalsIgnoreCase(name)) {			agscMtsUpgradeBootrom._id = id;			return Status.STATUS_OK;		}		if (agscMtsEraseAllFlash._name.equalsIgnoreCase(name)) {			agscMtsEraseAllFlash._id = id;			return Status.STATUS_OK;		}		if (agscMtsReset._name.equalsIgnoreCase(name)) {			agscMtsReset._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetBoardInfo._name.equalsIgnoreCase(name)) {			agscMtsGetBoardInfo._id = id;			return Status.STATUS_OK;		}		if (agscMtsGetTemperature._name.equalsIgnoreCase(name)) {			agscMtsGetTemperature._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		if (agscMtsNotifyRfEvent._id == id) return agscMtsNotifyRfEvent.notify(buf);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 38;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			name._value = agscMtsActivate._name;			id._value = agscMtsActivate._id;			return Status.STATUS_OK;		}		if (index==1) {			name._value = agscMtsGetActiveStatus._name;			id._value = agscMtsGetActiveStatus._id;			return Status.STATUS_OK;		}		if (index==2) {			name._value = agscMtsWriteGpio._name;			id._value = agscMtsWriteGpio._id;			return Status.STATUS_OK;		}		if (index==3) {			name._value = agscMtsReadGpio._name;			id._value = agscMtsReadGpio._id;			return Status.STATUS_OK;		}		if (index==4) {			name._value = agscMtsGetGpio._name;			id._value = agscMtsGetGpio._id;			return Status.STATUS_OK;		}		if (index==5) {			name._value = agscMtsSetGpio._name;			id._value = agscMtsSetGpio._id;			return Status.STATUS_OK;		}		if (index==6) {			name._value = agscMtsTestMemory._name;			id._value = agscMtsTestMemory._id;			return Status.STATUS_OK;		}		if (index==7) {			name._value = agscMtsTestNetwork._name;			id._value = agscMtsTestNetwork._id;			return Status.STATUS_OK;		}		if (index==8) {			name._value = agscMtsTestSim._name;			id._value = agscMtsTestSim._id;			return Status.STATUS_OK;		}		if (index==9) {			name._value = agscMtsStartRf._name;			id._value = agscMtsStartRf._id;			return Status.STATUS_OK;		}		if (index==10) {			name._value = agscMtsStopRf._name;			id._value = agscMtsStopRf._id;			return Status.STATUS_OK;		}		if (index==11) {			name._value = agscMtsGetRfState._name;			id._value = agscMtsGetRfState._id;			return Status.STATUS_OK;		}		if (index==12) {			name._value = agscMtsGetRfStats._name;			id._value = agscMtsGetRfStats._id;			return Status.STATUS_OK;		}		if (index==13) {			name._value = agscMtsGetUlSchedulerStats._name;			id._value = agscMtsGetUlSchedulerStats._id;			return Status.STATUS_OK;		}		if (index==14) {			serviceType.value = (agscMtsImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscMtsNotifyRfEvent._name;			id._value = agscMtsNotifyRfEvent._id;			return Status.STATUS_OK;		}		if (index==15) {			name._value = agscMtsSetRfParams._name;			id._value = agscMtsSetRfParams._id;			return Status.STATUS_OK;		}		if (index==16) {			name._value = agscMtsGetRfParams._name;			id._value = agscMtsGetRfParams._id;			return Status.STATUS_OK;		}		if (index==17) {			name._value = agscMtsSetRfDci._name;			id._value = agscMtsSetRfDci._id;			return Status.STATUS_OK;		}		if (index==18) {			name._value = agscMtsSetRfUplinkMode._name;			id._value = agscMtsSetRfUplinkMode._id;			return Status.STATUS_OK;		}		if (index==19) {			name._value = agscMtsMeasureRssi._name;			id._value = agscMtsMeasureRssi._id;			return Status.STATUS_OK;		}		if (index==20) {			name._value = agscMtsEstimateRxIqMismatchCorrection._name;			id._value = agscMtsEstimateRxIqMismatchCorrection._id;			return Status.STATUS_OK;		}		if (index==21) {			name._value = agscMtsEstimateRxDcOffsetCorrection._name;			id._value = agscMtsEstimateRxDcOffsetCorrection._id;			return Status.STATUS_OK;		}		if (index==22) {			name._value = agscMtsSetRxDcOffsetCorrection._name;			id._value = agscMtsSetRxDcOffsetCorrection._id;			return Status.STATUS_OK;		}		if (index==23) {			name._value = agscMtsGetRfCalibrationState._name;			id._value = agscMtsGetRfCalibrationState._id;			return Status.STATUS_OK;		}		if (index==24) {			name._value = agscMtsDumpRfCalibration._name;			id._value = agscMtsDumpRfCalibration._id;			return Status.STATUS_OK;		}		if (index==25) {			name._value = agscMtsSetRfCalibration._name;			id._value = agscMtsSetRfCalibration._id;			return Status.STATUS_OK;		}		if (index==26) {			name._value = agscMtsGetRfCalibration._name;			id._value = agscMtsGetRfCalibration._id;			return Status.STATUS_OK;		}		if (index==27) {			name._value = agscMtsSetMtsIdentities._name;			id._value = agscMtsSetMtsIdentities._id;			return Status.STATUS_OK;		}		if (index==28) {			name._value = agscMtsGetMtsIdentities._name;			id._value = agscMtsGetMtsIdentities._id;			return Status.STATUS_OK;		}		if (index==29) {			name._value = agscMtsActivateDevice._name;			id._value = agscMtsActivateDevice._id;			return Status.STATUS_OK;		}		if (index==30) {			name._value = agscMtsGetActivationState._name;			id._value = agscMtsGetActivationState._id;			return Status.STATUS_OK;		}		if (index==31) {			name._value = agscMtsGetVersion._name;			id._value = agscMtsGetVersion._id;			return Status.STATUS_OK;		}		if (index==32) {			name._value = agscMtsGetBootromState._name;			id._value = agscMtsGetBootromState._id;			return Status.STATUS_OK;		}		if (index==33) {			name._value = agscMtsUpgradeBootrom._name;			id._value = agscMtsUpgradeBootrom._id;			return Status.STATUS_OK;		}		if (index==34) {			name._value = agscMtsEraseAllFlash._name;			id._value = agscMtsEraseAllFlash._id;			return Status.STATUS_OK;		}		if (index==35) {			name._value = agscMtsReset._name;			id._value = agscMtsReset._id;			return Status.STATUS_OK;		}		if (index==36) {			name._value = agscMtsGetBoardInfo._name;			id._value = agscMtsGetBoardInfo._id;			return Status.STATUS_OK;		}		if (index==37) {			name._value = agscMtsGetTemperature._name;			id._value = agscMtsGetTemperature._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int Activate(final String passscode) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsActivate.marshall(marshallBuf, 16000, _offset, passscode);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsActivate._id, agscMtsActivate._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsActivate.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetActiveStatus(OutValue<sqnMtsStatusType> status) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetActiveStatus.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetActiveStatus._id, agscMtsGetActiveStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetActiveStatus.unmarshall(returnBuf, returnBuf.length, _offset, status);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int WriteGpio(final sqnMtsGpioState[] states, boolean forceOutput) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsWriteGpio.marshall(marshallBuf, 16000, _offset, states, forceOutput);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsWriteGpio._id, agscMtsWriteGpio._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsWriteGpio.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ReadGpio(final long[] select, boolean forceInput, OutArray<sqnMtsGpioState> states) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsReadGpio.marshall(marshallBuf, 16000, _offset, select, forceInput);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsReadGpio._id, agscMtsReadGpio._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsReadGpio.unmarshall(returnBuf, returnBuf.length, _offset, states);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetGpio(OutValue<Long> value) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetGpio.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetGpio._id, agscMtsGetGpio._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetGpio.unmarshall(returnBuf, returnBuf.length, _offset, value);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetGpio(long mask, long value) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsSetGpio.marshall(marshallBuf, 16000, _offset, mask, value);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsSetGpio._id, agscMtsSetGpio._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsSetGpio.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int TestMemory(sqnMtsMemTestType mtType, OutValue<Boolean> result, OutValue<Long> address) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsTestMemory.marshall(marshallBuf, 16000, _offset, mtType);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsTestMemory._id, agscMtsTestMemory._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsTestMemory.unmarshall(returnBuf, returnBuf.length, _offset, result, address);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int TestNetwork(final String srcIp, final String dstIp, int timeout) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsTestNetwork.marshall(marshallBuf, 16000, _offset, srcIp, dstIp, timeout);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsTestNetwork._id, agscMtsTestNetwork._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsTestNetwork.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int TestSim() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsTestSim.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsTestSim._id, agscMtsTestSim._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsTestSim.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int StartRf(short band, int frequency, int pci) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsStartRf.marshall(marshallBuf, 16000, _offset, band, frequency, pci);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsStartRf._id, agscMtsStartRf._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsStartRf.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int StopRf() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsStopRf.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsStopRf._id, agscMtsStopRf._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsStopRf.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetRfState(OutValue<sqnMtsRfState> state) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetRfState.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetRfState._id, agscMtsGetRfState._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetRfState.unmarshall(returnBuf, returnBuf.length, _offset, state);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetRfStats(OutValue<sqnMtsRfStats> stats) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetRfStats.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetRfStats._id, agscMtsGetRfStats._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetRfStats.unmarshall(returnBuf, returnBuf.length, _offset, stats);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetUlSchedulerStats(OutValue<sqnMtsUlSchedulerStats> stats) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetUlSchedulerStats.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetUlSchedulerStats._id, agscMtsGetUlSchedulerStats._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetUlSchedulerStats.unmarshall(returnBuf, returnBuf.length, _offset, stats);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetRfParams(int crnti, int psd) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsSetRfParams.marshall(marshallBuf, 16000, _offset, crnti, psd);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsSetRfParams._id, agscMtsSetRfParams._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsSetRfParams.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetRfParams(OutValue<Integer> crnti, OutValue<Integer> psd) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetRfParams.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetRfParams._id, agscMtsGetRfParams._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetRfParams.unmarshall(returnBuf, returnBuf.length, _offset, crnti, psd);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetRfDci(long dciData, short dciLength, short subframe) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsSetRfDci.marshall(marshallBuf, 16000, _offset, dciData, dciLength, subframe);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsSetRfDci._id, agscMtsSetRfDci._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsSetRfDci.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetRfUplinkMode(short band, int frequency, int pci, short bandwidth, short tddConfig) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsSetRfUplinkMode.marshall(marshallBuf, 16000, _offset, band, frequency, pci, bandwidth, tddConfig);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsSetRfUplinkMode._id, agscMtsSetRfUplinkMode._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsSetRfUplinkMode.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int MeasureRssi(int duration, OutValue<Integer> rssi0, OutValue<Integer> rssi1) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsMeasureRssi.marshall(marshallBuf, 16000, _offset, duration);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsMeasureRssi._id, agscMtsMeasureRssi._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsMeasureRssi.unmarshall(returnBuf, returnBuf.length, _offset, rssi0, rssi1);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EstimateRxIqMismatchCorrection(int duration, OutValue<Short> gain0, OutValue<Short> gain1, OutValue<Short> phase0, OutValue<Short> phase1) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsEstimateRxIqMismatchCorrection.marshall(marshallBuf, 16000, _offset, duration);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsEstimateRxIqMismatchCorrection._id, agscMtsEstimateRxIqMismatchCorrection._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsEstimateRxIqMismatchCorrection.unmarshall(returnBuf, returnBuf.length, _offset, gain0, gain1, phase0, phase1);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EstimateRxDcOffsetCorrection(int duration, OutValue<Short> iOffset0, OutValue<Short> iOffset1, OutValue<Short> qOffset0, OutValue<Short> qOffset1) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsEstimateRxDcOffsetCorrection.marshall(marshallBuf, 16000, _offset, duration);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsEstimateRxDcOffsetCorrection._id, agscMtsEstimateRxDcOffsetCorrection._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsEstimateRxDcOffsetCorrection.unmarshall(returnBuf, returnBuf.length, _offset, iOffset0, iOffset1, qOffset0, qOffset1);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetRxDcOffsetCorrection(short iOffset0, short iOffset1, short qOffset0, short qOffset1) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsSetRxDcOffsetCorrection.marshall(marshallBuf, 16000, _offset, iOffset0, iOffset1, qOffset0, qOffset1);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsSetRxDcOffsetCorrection._id, agscMtsSetRxDcOffsetCorrection._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsSetRxDcOffsetCorrection.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetRfCalibrationState(OutValue<sqnMtsBurnState> state) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetRfCalibrationState.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetRfCalibrationState._id, agscMtsGetRfCalibrationState._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetRfCalibrationState.unmarshall(returnBuf, returnBuf.length, _offset, state);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int DumpRfCalibration(boolean verbose, OutValue<String> buffer, OutValue<Long> length) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsDumpRfCalibration.marshall(marshallBuf, 16000, _offset, verbose);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsDumpRfCalibration._id, agscMtsDumpRfCalibration._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsDumpRfCalibration.unmarshall(returnBuf, returnBuf.length, _offset, buffer, length);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetRfCalibration(final short[] data, boolean flash) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsSetRfCalibration.marshall(marshallBuf, 16000, _offset, data, flash);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsSetRfCalibration._id, agscMtsSetRfCalibration._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsSetRfCalibration.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetRfCalibration(OutArray<Short> data) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetRfCalibration.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetRfCalibration._id, agscMtsGetRfCalibration._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetRfCalibration.unmarshall(returnBuf, returnBuf.length, _offset, data);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetMtsIdentities(final sqnMtsIdentities identities) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsSetMtsIdentities.marshall(marshallBuf, 16000, _offset, identities);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsSetMtsIdentities._id, agscMtsSetMtsIdentities._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsSetMtsIdentities.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetMtsIdentities(OutValue<sqnMtsIdentities> identity) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetMtsIdentities.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetMtsIdentities._id, agscMtsGetMtsIdentities._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetMtsIdentities.unmarshall(returnBuf, returnBuf.length, _offset, identity);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ActivateDevice(final String passcode) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsActivateDevice.marshall(marshallBuf, 16000, _offset, passcode);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsActivateDevice._id, agscMtsActivateDevice._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsActivateDevice.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetActivationState(OutValue<sqnMtsActivationState> state) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetActivationState.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetActivationState._id, agscMtsGetActivationState._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetActivationState.unmarshall(returnBuf, returnBuf.length, _offset, state);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetVersion(OutValue<sqnMtsVersion> version) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetVersion.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetVersion._id, agscMtsGetVersion._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetVersion.unmarshall(returnBuf, returnBuf.length, _offset, version);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetBootromState(OutValue<sqnMtsBurnState> fState, OutValue<sqnMtsBootromState> eState) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetBootromState.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetBootromState._id, agscMtsGetBootromState._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetBootromState.unmarshall(returnBuf, returnBuf.length, _offset, fState, eState);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int UpgradeBootrom(boolean keepBootrom, sqnMtsTagPolicy tagPolicy) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsUpgradeBootrom.marshall(marshallBuf, 16000, _offset, keepBootrom, tagPolicy);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsUpgradeBootrom._id, agscMtsUpgradeBootrom._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsUpgradeBootrom.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EraseAllFlash() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsEraseAllFlash.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsEraseAllFlash._id, agscMtsEraseAllFlash._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsEraseAllFlash.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int Reset() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsReset.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsReset._id, agscMtsReset._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsReset.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetBoardInfo(OutValue<sqnMtsBoardInfo> boardInfo) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetBoardInfo.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetBoardInfo._id, agscMtsGetBoardInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetBoardInfo.unmarshall(returnBuf, returnBuf.length, _offset, boardInfo);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetTemperature(OutValue<Integer> temperature) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscMtsGetTemperature.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscMtsGetTemperature._id, agscMtsGetTemperature._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscMtsGetTemperature.unmarshall(returnBuf, returnBuf.length, _offset, temperature);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static MtsClient _use;}