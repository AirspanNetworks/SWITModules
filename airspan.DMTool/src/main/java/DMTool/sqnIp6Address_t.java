/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnIp6Address_t {	public long firstPart;	public long secondPart;	public sqnIp6Address_t() {		// Initialization	}	public static int marshall(byte[] buf, final sqnIp6Address_t p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+16)) return DccError.ERR_OVERFLOW;		// firstPart		Util.Copy64ToBuffer(buf, p.firstPart, _offset);		// secondPart		Util.Copy64ToBuffer(buf, p.secondPart, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnIp6Address_t p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+16)) return DccError.ERR_OVERFLOW;		// firstPart		p.firstPart = (long) Util.Copy64FromBuffer(buf, _offset);		// secondPart		p.secondPart = (long) Util.Copy64FromBuffer(buf, _offset);		return st;	}}