/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscImsServiceImpl extends DccClient {	public void initialize(final ImsServiceClient c) {		_use = c;		name = "imsservice";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscImsServiceServiceMessageReceived._name.equalsIgnoreCase(name)) {			agscImsServiceServiceMessageReceived._id = id;			return Status.STATUS_OK;		}		if (agscImsServiceServiceMessage._name.equalsIgnoreCase(name)) {			agscImsServiceServiceMessage._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		if (agscImsServiceServiceMessageReceived._id == id) return agscImsServiceServiceMessageReceived.notify(buf);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 2;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			serviceType.value = (agscImsServiceImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscImsServiceServiceMessageReceived._name;			id._value = agscImsServiceServiceMessageReceived._id;			return Status.STATUS_OK;		}		if (index==1) {			name._value = agscImsServiceServiceMessage._name;			id._value = agscImsServiceServiceMessage._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int ServiceMessage(final String mimeType, final String sender, final short[] msg) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsServiceServiceMessage.marshall(marshallBuf, 16000, _offset, mimeType, sender, msg);		if (st != Status.STATUS_OK) return st;			byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification			System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);			byte[] returnBuf = DeviceController.invoke(agscImsServiceServiceMessage._id, agscImsServiceServiceMessage._name, queryBuf, false);		return Status.STATUS_OK;	}	// External services	public static ImsServiceClient _use;}