/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class Wrat {	public static void WratInitialize(final WratClient c) {		agscWratImpl ai = new agscWratImpl();		ai.initialize(c);	}	public static int GetFunctionalityLevel(OutValue<sqnModemFunctionalityLevel> funcLevel) {		return agscWratImpl.GetFunctionalityLevel( funcLevel);	}	public static int SetFunctionalityLevel(sqnModemFunctionalityLevel funcLevel) {		return agscWratImpl.SetFunctionalityLevel( funcLevel);	}	public static int SetPlmnSelectionMode(final sqnPlmnSelectMode mode, final sqnPlmnFormat format, final String pPlmn, final sqnAct act) {		return agscWratImpl.SetPlmnSelectionMode( mode, format, pPlmn, act);	}	public static int GetAvailablePlmnList() {		return agscWratImpl.GetAvailablePlmnList();	}	public static int GetPlmnSelectionMode(OutValue<sqnPlmnSelectMode> plmnSelMode) {		return agscWratImpl.GetPlmnSelectionMode( plmnSelMode);	}	public static int GetPdnList(OutArray<sqnPdnConfig> pdn) {		return agscWratImpl.GetPdnList( pdn);	}	public static int GetDhcpConfig(OutValue<Boolean> enabled) {		return agscWratImpl.GetDhcpConfig( enabled);	}	public static int GetSimPresence(OutValue<Boolean> simPresent) {		return agscWratImpl.GetSimPresence( simPresent);	}	public static int GetPinStatus(OutValue<sqnPinStatus> pinStatus, OutValue<Short> remainingAttempts) {		return agscWratImpl.GetPinStatus( pinStatus, remainingAttempts);	}	public static int GetEnabledPinStatus(OutValue<Boolean> enabled) {		return agscWratImpl.GetEnabledPinStatus( enabled);	}	public static int EnterPin(final String pin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		return agscWratImpl.EnterPin( pin, status, remainingAttempts);	}	public static int EnterPuk(final String puk, final String newPin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		return agscWratImpl.EnterPuk( puk, newPin, status, remainingAttempts);	}	public static int ChangePin(final String oldPin, final String newPin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		return agscWratImpl.ChangePin( oldPin, newPin, status, remainingAttempts);	}	public static int EnablePin(final String pin, boolean enable, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		return agscWratImpl.EnablePin( pin, enable, status, remainingAttempts);	}	public static int GetPinPukRetries(OutValue<Short> pinRetries, OutValue<Short> pinDefaultRetries, OutValue<Short> pukRetries, OutValue<Short> pukDefaultRetries) {		return agscWratImpl.GetPinPukRetries( pinRetries, pinDefaultRetries, pukRetries, pukDefaultRetries);	}	public static int GetCellInfo(OutValue<sqnCellInfo> info) {		return agscWratImpl.GetCellInfo( info);	}	public static int GetRadioLevel(OutValue<sqnRadioLevel> pRadioLevel) {		return agscWratImpl.GetRadioLevel( pRadioLevel);	}	public static int GetPhyStatsDl(OutValue<PhyStatsDl> phyStatsDl) {		return agscWratImpl.GetPhyStatsDl( phyStatsDl);	}	public static int GetLinkSpeed(OutValue<Integer> ulBitRate, OutValue<Integer> dlBitRate) {		return agscWratImpl.GetLinkSpeed( ulBitRate, dlBitRate);	}	public static int GetIdentities(OutValue<sqnUeIdentities> identities) {		return agscWratImpl.GetIdentities( identities);	}	public static int GetUeState(OutValue<sqnThpMcState> state) {		return agscWratImpl.GetUeState( state);	}	public static int SetUeStarted(final boolean isStarted) {		return agscWratImpl.SetUeStarted( isStarted);	}	public static int SendAtCommand(final String atCommand, OutValue<String> response) {		return agscWratImpl.SendAtCommand( atCommand, response);	}	public static int SetApn(final String apn) {		return agscWratImpl.SetApn( apn);	}	public static int GetTechnology(OutValue<Long> technoBmp, OutValue<Long> duplexBmp) {		return agscWratImpl.GetTechnology( technoBmp, duplexBmp);	}	public static int SetCellSearchMode(final sqnRatPriorityList ratPriorityList, long scanInterval, short forceFreq) {		return agscWratImpl.SetCellSearchMode( ratPriorityList, scanInterval, forceFreq);	}	public static int SetUsimOwner(sqnUsimOwner owner) {		return agscWratImpl.SetUsimOwner( owner);	}	public static int GetUsimOwner(OutValue<sqnUsimOwner> owner) {		return agscWratImpl.GetUsimOwner( owner);	}	public static int ManualSelectSwitch(int action) {		return agscWratImpl.ManualSelectSwitch( action);	}	public static int GetAvailableNetwork() {		return agscWratImpl.GetAvailableNetwork();	}}