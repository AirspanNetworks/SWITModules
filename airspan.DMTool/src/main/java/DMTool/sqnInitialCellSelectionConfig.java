/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnInitialCellSelectionConfig {	public boolean forcedCell;	public int forcedCellEarfcn;	public int forcellCellPci;	public long bandBitmap;	public AsInitialCellSelectionFreq[] freqList = new AsInitialCellSelectionFreq[4];	public long fddBandBitmap;	public boolean highPrioRegFreq;	public int searchInterval;	public short searchCount;	public sqnInitialCellSelectionConfig() {		// Initialization		// freqList		for (int i = 0; i<freqList.length; i++) {			freqList[i] = new AsInitialCellSelectionFreq();		}	}	public static int marshall(byte[] buf, final sqnInitialCellSelectionConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+25)) return DccError.ERR_OVERFLOW;		// forcedCell		Util.Copy32ToBuffer(buf, p.forcedCell, _offset);		// forcedCellEarfcn		Util.Copy16ToBuffer(buf, p.forcedCellEarfcn, _offset);		// forcellCellPci		Util.Copy16ToBuffer(buf, p.forcellCellPci, _offset);		// bandBitmap		Util.Copy32ToBuffer(buf, p.bandBitmap, _offset);		// freqList		for (int i = 0; i<4; i++) {			if ( Status.STATUS_OK != (st = AsInitialCellSelectionFreq.marshall(buf, p.freqList[i], _offset)) ) return st;		}		// fddBandBitmap		Util.Copy32ToBuffer(buf, p.fddBandBitmap, _offset);		// highPrioRegFreq		Util.Copy32ToBuffer(buf, p.highPrioRegFreq, _offset);		// searchInterval		Util.Copy32ToBuffer(buf, p.searchInterval, _offset);		// searchCount		Util.Copy8ToBuffer(buf, p.searchCount, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnInitialCellSelectionConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+25)) return DccError.ERR_OVERFLOW;		// forcedCell		p.forcedCell = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// forcedCellEarfcn		p.forcedCellEarfcn = (int) Util.Copy16FromBuffer(buf, _offset);		// forcellCellPci		p.forcellCellPci = (int) Util.Copy16FromBuffer(buf, _offset);		// bandBitmap		p.bandBitmap = (long) Util.Copy32FromBuffer(buf, _offset);		// freqList		for (int i = 0; i<4; i++) {			if ( Status.STATUS_OK != (st = AsInitialCellSelectionFreq.unmarshall(buf, p.freqList[i], _offset)) ) return st;		}		// fddBandBitmap		p.fddBandBitmap = (long) Util.Copy32FromBuffer(buf, _offset);		// highPrioRegFreq		p.highPrioRegFreq = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// searchInterval		p.searchInterval = (int) Util.Copy32FromBuffer(buf, _offset);		// searchCount		p.searchCount = (short) Util.Copy8FromBuffer(buf, _offset);		return st;	}}