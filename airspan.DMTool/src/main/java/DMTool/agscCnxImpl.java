/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscCnxImpl extends DccClient {	public void initialize(final CnxClient c) {		_use = c;		name = "cnx";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscCnxSetUeStarted._name.equalsIgnoreCase(name)) {			agscCnxSetUeStarted._id = id;			return Status.STATUS_OK;		}		if (agscCnxGetUeStarted._name.equalsIgnoreCase(name)) {			agscCnxGetUeStarted._id = id;			return Status.STATUS_OK;		}		if (agscCnxGetLinkSpeed._name.equalsIgnoreCase(name)) {			agscCnxGetLinkSpeed._id = id;			return Status.STATUS_OK;		}		if (agscCnxGetPhyStatsDl._name.equalsIgnoreCase(name)) {			agscCnxGetPhyStatsDl._id = id;			return Status.STATUS_OK;		}		if (agscCnxGetUeState._name.equalsIgnoreCase(name)) {			agscCnxGetUeState._id = id;			return Status.STATUS_OK;		}		if (agscCnxUeStateChanged._name.equalsIgnoreCase(name)) {			agscCnxUeStateChanged._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		if (agscCnxUeStateChanged._id == id) return agscCnxUeStateChanged.notify(buf);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 6;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			name._value = agscCnxSetUeStarted._name;			id._value = agscCnxSetUeStarted._id;			return Status.STATUS_OK;		}		if (index==1) {			name._value = agscCnxGetUeStarted._name;			id._value = agscCnxGetUeStarted._id;			return Status.STATUS_OK;		}		if (index==2) {			name._value = agscCnxGetLinkSpeed._name;			id._value = agscCnxGetLinkSpeed._id;			return Status.STATUS_OK;		}		if (index==3) {			name._value = agscCnxGetPhyStatsDl._name;			id._value = agscCnxGetPhyStatsDl._id;			return Status.STATUS_OK;		}		if (index==4) {			name._value = agscCnxGetUeState._name;			id._value = agscCnxGetUeState._id;			return Status.STATUS_OK;		}		if (index==5) {			serviceType.value = (agscCnxImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscCnxUeStateChanged._name;			id._value = agscCnxUeStateChanged._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int SetUeStarted(final boolean isStarted, OutValue<Integer> status) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscCnxSetUeStarted.marshall(marshallBuf, 16000, _offset, isStarted);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscCnxSetUeStarted._id, agscCnxSetUeStarted._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscCnxSetUeStarted.unmarshall(returnBuf, returnBuf.length, _offset, status);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetUeStarted(OutValue<Boolean> isStarted) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscCnxGetUeStarted.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscCnxGetUeStarted._id, agscCnxGetUeStarted._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscCnxGetUeStarted.unmarshall(returnBuf, returnBuf.length, _offset, isStarted);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetLinkSpeed(OutValue<Integer> ulBitRate, OutValue<Integer> dlBitRate) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscCnxGetLinkSpeed.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscCnxGetLinkSpeed._id, agscCnxGetLinkSpeed._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscCnxGetLinkSpeed.unmarshall(returnBuf, returnBuf.length, _offset, ulBitRate, dlBitRate);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPhyStatsDl(OutValue<PhyStatsDl> phyStatsDl) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscCnxGetPhyStatsDl.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscCnxGetPhyStatsDl._id, agscCnxGetPhyStatsDl._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscCnxGetPhyStatsDl.unmarshall(returnBuf, returnBuf.length, _offset, phyStatsDl);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetUeState(OutValue<sqnThpMcState> state) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscCnxGetUeState.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscCnxGetUeState._id, agscCnxGetUeState._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscCnxGetUeState.unmarshall(returnBuf, returnBuf.length, _offset, state);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static CnxClient _use;}