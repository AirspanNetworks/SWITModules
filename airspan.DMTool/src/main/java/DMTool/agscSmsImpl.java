/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscSmsImpl extends DccClient {	public void initialize(final SmsClient c) {		_use = c;		name = "sms";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscSmsSetServiceCenterAddress._name.equalsIgnoreCase(name)) {			agscSmsSetServiceCenterAddress._id = id;			return Status.STATUS_OK;		}		if (agscSmsGetServiceCenterAddress._name.equalsIgnoreCase(name)) {			agscSmsGetServiceCenterAddress._id = id;			return Status.STATUS_OK;		}		if (agscSmsSetSmsMemoryStorage._name.equalsIgnoreCase(name)) {			agscSmsSetSmsMemoryStorage._id = id;			return Status.STATUS_OK;		}		if (agscSmsGetSmsMemoryStorage._name.equalsIgnoreCase(name)) {			agscSmsGetSmsMemoryStorage._id = id;			return Status.STATUS_OK;		}		if (agscSmsSmsReadMessage._name.equalsIgnoreCase(name)) {			agscSmsSmsReadMessage._id = id;			return Status.STATUS_OK;		}		if (agscSmsSmsDeleteMessage._name.equalsIgnoreCase(name)) {			agscSmsSmsDeleteMessage._id = id;			return Status.STATUS_OK;		}		if (agscSmsSmsDeleteMessagesList._name.equalsIgnoreCase(name)) {			agscSmsSmsDeleteMessagesList._id = id;			return Status.STATUS_OK;		}		if (agscSmsSmsReadMessagesList._name.equalsIgnoreCase(name)) {			agscSmsSmsReadMessagesList._id = id;			return Status.STATUS_OK;		}		if (agscSmsSmsSendMessage._name.equalsIgnoreCase(name)) {			agscSmsSmsSendMessage._id = id;			return Status.STATUS_OK;		}		if (agscSmsMessageReceived._name.equalsIgnoreCase(name)) {			agscSmsMessageReceived._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		if (agscSmsMessageReceived._id == id) return agscSmsMessageReceived.notify(buf);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 10;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			name._value = agscSmsSetServiceCenterAddress._name;			id._value = agscSmsSetServiceCenterAddress._id;			return Status.STATUS_OK;		}		if (index==1) {			name._value = agscSmsGetServiceCenterAddress._name;			id._value = agscSmsGetServiceCenterAddress._id;			return Status.STATUS_OK;		}		if (index==2) {			name._value = agscSmsSetSmsMemoryStorage._name;			id._value = agscSmsSetSmsMemoryStorage._id;			return Status.STATUS_OK;		}		if (index==3) {			name._value = agscSmsGetSmsMemoryStorage._name;			id._value = agscSmsGetSmsMemoryStorage._id;			return Status.STATUS_OK;		}		if (index==4) {			name._value = agscSmsSmsReadMessage._name;			id._value = agscSmsSmsReadMessage._id;			return Status.STATUS_OK;		}		if (index==5) {			name._value = agscSmsSmsDeleteMessage._name;			id._value = agscSmsSmsDeleteMessage._id;			return Status.STATUS_OK;		}		if (index==6) {			name._value = agscSmsSmsDeleteMessagesList._name;			id._value = agscSmsSmsDeleteMessagesList._id;			return Status.STATUS_OK;		}		if (index==7) {			name._value = agscSmsSmsReadMessagesList._name;			id._value = agscSmsSmsReadMessagesList._id;			return Status.STATUS_OK;		}		if (index==8) {			name._value = agscSmsSmsSendMessage._name;			id._value = agscSmsSmsSendMessage._id;			return Status.STATUS_OK;		}		if (index==9) {			serviceType.value = (agscSmsImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscSmsMessageReceived._name;			id._value = agscSmsMessageReceived._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int SetServiceCenterAddress(final sqnSmsAddress scAddress) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscSmsSetServiceCenterAddress.marshall(marshallBuf, 16000, _offset, scAddress);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscSmsSetServiceCenterAddress._id, agscSmsSetServiceCenterAddress._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscSmsSetServiceCenterAddress.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetServiceCenterAddress(OutValue<sqnSmsAddress> scAddress) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscSmsGetServiceCenterAddress.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscSmsGetServiceCenterAddress._id, agscSmsGetServiceCenterAddress._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscSmsGetServiceCenterAddress.unmarshall(returnBuf, returnBuf.length, _offset, scAddress);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetSmsMemoryStorage(sqnMemoryType memType) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscSmsSetSmsMemoryStorage.marshall(marshallBuf, 16000, _offset, memType);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscSmsSetSmsMemoryStorage._id, agscSmsSetSmsMemoryStorage._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscSmsSetSmsMemoryStorage.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetSmsMemoryStorage(OutValue<sqnMemoryType> memType, OutValue<Long> total, OutValue<Long> used) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscSmsGetSmsMemoryStorage.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscSmsGetSmsMemoryStorage._id, agscSmsGetSmsMemoryStorage._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscSmsGetSmsMemoryStorage.unmarshall(returnBuf, returnBuf.length, _offset, memType, total, used);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SmsReadMessage(long index, OutValue<sqnSmsPduWithStatus> smsPdu) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscSmsSmsReadMessage.marshall(marshallBuf, 16000, _offset, index);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscSmsSmsReadMessage._id, agscSmsSmsReadMessage._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscSmsSmsReadMessage.unmarshall(returnBuf, returnBuf.length, _offset, smsPdu);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SmsDeleteMessage(long index) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscSmsSmsDeleteMessage.marshall(marshallBuf, 16000, _offset, index);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscSmsSmsDeleteMessage._id, agscSmsSmsDeleteMessage._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscSmsSmsDeleteMessage.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SmsDeleteMessagesList(sqnMbimSmsStatus flag) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscSmsSmsDeleteMessagesList.marshall(marshallBuf, 16000, _offset, flag);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscSmsSmsDeleteMessagesList._id, agscSmsSmsDeleteMessagesList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscSmsSmsDeleteMessagesList.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SmsReadMessagesList(sqnMbimSmsStatus status, OutArray<sqnSmsPduWithStatus> msg) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscSmsSmsReadMessagesList.marshall(marshallBuf, 16000, _offset, status);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscSmsSmsReadMessagesList._id, agscSmsSmsReadMessagesList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscSmsSmsReadMessagesList.unmarshall(returnBuf, returnBuf.length, _offset, msg);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SmsSendMessage(final sqnSmsPdu smsPdu) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscSmsSmsSendMessage.marshall(marshallBuf, 16000, _offset, smsPdu);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscSmsSmsSendMessage._id, agscSmsSmsSendMessage._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscSmsSmsSendMessage.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static SmsClient _use;}