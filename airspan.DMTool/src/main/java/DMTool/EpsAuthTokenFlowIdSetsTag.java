/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class EpsAuthTokenFlowIdSetsTag {	public short epsAuthorisationTokenLength;	public short[] epsAuthorisationToken = new short[32];	public short epsNumOfFlowIds;	public int pad;	public EpsParameterFlowIdTag[] epsFlowIdList = new EpsParameterFlowIdTag[8];	public EpsAuthTokenFlowIdSetsTag() {		// Initialization		// epsFlowIdList		for (int i = 0; i<epsFlowIdList.length; i++) {			epsFlowIdList[i] = new EpsParameterFlowIdTag();		}	}	public static int marshall(byte[] buf, final EpsAuthTokenFlowIdSetsTag p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		// epsAuthorisationTokenLength		Util.Copy8ToBuffer(buf, p.epsAuthorisationTokenLength, _offset);		// epsAuthorisationToken		for (int i = 0; i<32; i++) {			Util.Copy8ToBuffer(buf, p.epsAuthorisationToken[i], _offset);		}		// epsNumOfFlowIds		Util.Copy8ToBuffer(buf, p.epsNumOfFlowIds, _offset);		// pad		Util.Copy16ToBuffer(buf, p.pad, _offset);		// epsFlowIdList		for (int i = 0; i<8; i++) {			if ( Status.STATUS_OK != (st = EpsParameterFlowIdTag.marshall(buf, p.epsFlowIdList[i], _offset)) ) return st;		}		return st;	}	public static int unmarshall(final byte[] buf, EpsAuthTokenFlowIdSetsTag p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		// epsAuthorisationTokenLength		p.epsAuthorisationTokenLength = (short) Util.Copy8FromBuffer(buf, _offset);		// epsAuthorisationToken		for (int i = 0; i<32; i++) {			p.epsAuthorisationToken[i] = (short) Util.Copy8FromBuffer(buf, _offset);		}		// epsNumOfFlowIds		p.epsNumOfFlowIds = (short) Util.Copy8FromBuffer(buf, _offset);		// pad		p.pad = (int) Util.Copy16FromBuffer(buf, _offset);		// epsFlowIdList		for (int i = 0; i<8; i++) {			if ( Status.STATUS_OK != (st = EpsParameterFlowIdTag.unmarshall(buf, p.epsFlowIdList[i], _offset)) ) return st;		}		return st;	}}