/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class EpsTft {	public EpsTftOperationCodeTag epsTFTOperationCode;	public short epsNumOfAuthTokenFlowIdSets;	public short[] pad1 = new short[3];	public EpsAuthTokenFlowIdSetsTag[] epsAuthTokenFlowIdSetsList = new EpsAuthTokenFlowIdSetsTag[8];	public short epsNumOfPacketFilterIds;	public short[] pad2 = new short[3];	public short[] epsPacketFilterIdList = new short[16];	public short epsNumOfPacketFilters;	public short[] pad3 = new short[3];	public EpsPacketFilterTag[] epsPacketFilterList = new EpsPacketFilterTag[16];	public EpsTft() {		// Initialization		// epsTFTOperationCode		epsTFTOperationCode = new EpsTftOperationCodeTag();		// epsAuthTokenFlowIdSetsList		for (int i = 0; i<epsAuthTokenFlowIdSetsList.length; i++) {			epsAuthTokenFlowIdSetsList[i] = new EpsAuthTokenFlowIdSetsTag();		}		// epsPacketFilterList		for (int i = 0; i<epsPacketFilterList.length; i++) {			epsPacketFilterList[i] = new EpsPacketFilterTag();		}	}	public static int marshall(byte[] buf, final EpsTft p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+7)) return DccError.ERR_OVERFLOW;		// epsTFTOperationCode		if ( Status.STATUS_OK != (st = EpsTftOperationCodeTag.marshall(buf, p.epsTFTOperationCode, _offset)) ) return st;		// epsNumOfAuthTokenFlowIdSets		Util.Copy8ToBuffer(buf, p.epsNumOfAuthTokenFlowIdSets, _offset);		// pad1		for (int i = 0; i<3; i++) {			Util.Copy8ToBuffer(buf, p.pad1[i], _offset);		}		// epsAuthTokenFlowIdSetsList		for (int i = 0; i<8; i++) {			if ( Status.STATUS_OK != (st = EpsAuthTokenFlowIdSetsTag.marshall(buf, p.epsAuthTokenFlowIdSetsList[i], _offset)) ) return st;		}		// epsNumOfPacketFilterIds		Util.Copy8ToBuffer(buf, p.epsNumOfPacketFilterIds, _offset);		// pad2		for (int i = 0; i<3; i++) {			Util.Copy8ToBuffer(buf, p.pad2[i], _offset);		}		// epsPacketFilterIdList		for (int i = 0; i<16; i++) {			Util.Copy8ToBuffer(buf, p.epsPacketFilterIdList[i], _offset);		}		// epsNumOfPacketFilters		Util.Copy8ToBuffer(buf, p.epsNumOfPacketFilters, _offset);		// pad3		for (int i = 0; i<3; i++) {			Util.Copy8ToBuffer(buf, p.pad3[i], _offset);		}		// epsPacketFilterList		for (int i = 0; i<16; i++) {			if ( Status.STATUS_OK != (st = EpsPacketFilterTag.marshall(buf, p.epsPacketFilterList[i], _offset)) ) return st;		}		return st;	}	public static int unmarshall(final byte[] buf, EpsTft p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+7)) return DccError.ERR_OVERFLOW;		// epsTFTOperationCode		if ( Status.STATUS_OK != (st = EpsTftOperationCodeTag.unmarshall(buf, p.epsTFTOperationCode, _offset)) ) return st;		// epsNumOfAuthTokenFlowIdSets		p.epsNumOfAuthTokenFlowIdSets = (short) Util.Copy8FromBuffer(buf, _offset);		// pad1		for (int i = 0; i<3; i++) {			p.pad1[i] = (short) Util.Copy8FromBuffer(buf, _offset);		}		// epsAuthTokenFlowIdSetsList		for (int i = 0; i<8; i++) {			if ( Status.STATUS_OK != (st = EpsAuthTokenFlowIdSetsTag.unmarshall(buf, p.epsAuthTokenFlowIdSetsList[i], _offset)) ) return st;		}		// epsNumOfPacketFilterIds		p.epsNumOfPacketFilterIds = (short) Util.Copy8FromBuffer(buf, _offset);		// pad2		for (int i = 0; i<3; i++) {			p.pad2[i] = (short) Util.Copy8FromBuffer(buf, _offset);		}		// epsPacketFilterIdList		for (int i = 0; i<16; i++) {			p.epsPacketFilterIdList[i] = (short) Util.Copy8FromBuffer(buf, _offset);		}		// epsNumOfPacketFilters		p.epsNumOfPacketFilters = (short) Util.Copy8FromBuffer(buf, _offset);		// pad3		for (int i = 0; i<3; i++) {			p.pad3[i] = (short) Util.Copy8FromBuffer(buf, _offset);		}		// epsPacketFilterList		for (int i = 0; i<16; i++) {			if ( Status.STATUS_OK != (st = EpsPacketFilterTag.unmarshall(buf, p.epsPacketFilterList[i], _offset)) ) return st;		}		return st;	}}