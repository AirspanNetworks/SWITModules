/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnArcCommandZi2010SetTcxoTable {	public long refFreq;	public int code0;	public int code1;	public int frequencyOffset0;	public int frequencyOffset1;	public sqnArcCommandZi2010SetTcxoTable() {		// Initialization	}	public static int marshall(byte[] buf, final sqnArcCommandZi2010SetTcxoTable p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+16)) return DccError.ERR_OVERFLOW;		// refFreq		Util.Copy32ToBuffer(buf, p.refFreq, _offset);		// code0		Util.Copy16ToBuffer(buf, p.code0, _offset);		// code1		Util.Copy16ToBuffer(buf, p.code1, _offset);		// frequencyOffset0		Util.Copy32ToBuffer(buf, p.frequencyOffset0, _offset);		// frequencyOffset1		Util.Copy32ToBuffer(buf, p.frequencyOffset1, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnArcCommandZi2010SetTcxoTable p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+16)) return DccError.ERR_OVERFLOW;		// refFreq		p.refFreq = (long) Util.Copy32FromBuffer(buf, _offset);		// code0		p.code0 = (int) Util.Copy16FromBuffer(buf, _offset);		// code1		p.code1 = (int) Util.Copy16FromBuffer(buf, _offset);		// frequencyOffset0		p.frequencyOffset0 = (int) Util.Copy32FromBuffer(buf, _offset);		// frequencyOffset1		p.frequencyOffset1 = (int) Util.Copy32FromBuffer(buf, _offset);		return st;	}}