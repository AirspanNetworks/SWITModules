/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscWratImpl extends DccClient {	public void initialize(final WratClient c) {		_use = c;		name = "wrat";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscWratGetFunctionalityLevel._name.equalsIgnoreCase(name)) {			agscWratGetFunctionalityLevel._id = id;			return Status.STATUS_OK;		}		if (agscWratSetFunctionalityLevel._name.equalsIgnoreCase(name)) {			agscWratSetFunctionalityLevel._id = id;			return Status.STATUS_OK;		}		if (agscWratSetPlmnSelectionMode._name.equalsIgnoreCase(name)) {			agscWratSetPlmnSelectionMode._id = id;			return Status.STATUS_OK;		}		if (agscWratGetAvailablePlmnList._name.equalsIgnoreCase(name)) {			agscWratGetAvailablePlmnList._id = id;			return Status.STATUS_OK;		}		if (agscWratGetPlmnSelectionMode._name.equalsIgnoreCase(name)) {			agscWratGetPlmnSelectionMode._id = id;			return Status.STATUS_OK;		}		if (agscWratAvailablePlmn._name.equalsIgnoreCase(name)) {			agscWratAvailablePlmn._id = id;			return Status.STATUS_OK;		}		if (agscWratGetPdnList._name.equalsIgnoreCase(name)) {			agscWratGetPdnList._id = id;			return Status.STATUS_OK;		}		if (agscWratPdnEstablished._name.equalsIgnoreCase(name)) {			agscWratPdnEstablished._id = id;			return Status.STATUS_OK;		}		if (agscWratPdnReleased._name.equalsIgnoreCase(name)) {			agscWratPdnReleased._id = id;			return Status.STATUS_OK;		}		if (agscWratGetDhcpConfig._name.equalsIgnoreCase(name)) {			agscWratGetDhcpConfig._id = id;			return Status.STATUS_OK;		}		if (agscWratGetSimPresence._name.equalsIgnoreCase(name)) {			agscWratGetSimPresence._id = id;			return Status.STATUS_OK;		}		if (agscWratGetPinStatus._name.equalsIgnoreCase(name)) {			agscWratGetPinStatus._id = id;			return Status.STATUS_OK;		}		if (agscWratGetEnabledPinStatus._name.equalsIgnoreCase(name)) {			agscWratGetEnabledPinStatus._id = id;			return Status.STATUS_OK;		}		if (agscWratPinStatus._name.equalsIgnoreCase(name)) {			agscWratPinStatus._id = id;			return Status.STATUS_OK;		}		if (agscWratEnterPin._name.equalsIgnoreCase(name)) {			agscWratEnterPin._id = id;			return Status.STATUS_OK;		}		if (agscWratEnterPuk._name.equalsIgnoreCase(name)) {			agscWratEnterPuk._id = id;			return Status.STATUS_OK;		}		if (agscWratChangePin._name.equalsIgnoreCase(name)) {			agscWratChangePin._id = id;			return Status.STATUS_OK;		}		if (agscWratEnablePin._name.equalsIgnoreCase(name)) {			agscWratEnablePin._id = id;			return Status.STATUS_OK;		}		if (agscWratGetPinPukRetries._name.equalsIgnoreCase(name)) {			agscWratGetPinPukRetries._id = id;			return Status.STATUS_OK;		}		if (agscWratGetCellInfo._name.equalsIgnoreCase(name)) {			agscWratGetCellInfo._id = id;			return Status.STATUS_OK;		}		if (agscWratGetRadioLevel._name.equalsIgnoreCase(name)) {			agscWratGetRadioLevel._id = id;			return Status.STATUS_OK;		}		if (agscWratGetPhyStatsDl._name.equalsIgnoreCase(name)) {			agscWratGetPhyStatsDl._id = id;			return Status.STATUS_OK;		}		if (agscWratGetLinkSpeed._name.equalsIgnoreCase(name)) {			agscWratGetLinkSpeed._id = id;			return Status.STATUS_OK;		}		if (agscWratGetIdentities._name.equalsIgnoreCase(name)) {			agscWratGetIdentities._id = id;			return Status.STATUS_OK;		}		if (agscWratGetUeState._name.equalsIgnoreCase(name)) {			agscWratGetUeState._id = id;			return Status.STATUS_OK;		}		if (agscWratSetUeStarted._name.equalsIgnoreCase(name)) {			agscWratSetUeStarted._id = id;			return Status.STATUS_OK;		}		if (agscWratSendAtCommand._name.equalsIgnoreCase(name)) {			agscWratSendAtCommand._id = id;			return Status.STATUS_OK;		}		if (agscWratSetApn._name.equalsIgnoreCase(name)) {			agscWratSetApn._id = id;			return Status.STATUS_OK;		}		if (agscWratGetTechnology._name.equalsIgnoreCase(name)) {			agscWratGetTechnology._id = id;			return Status.STATUS_OK;		}		if (agscWratSetCellSearchMode._name.equalsIgnoreCase(name)) {			agscWratSetCellSearchMode._id = id;			return Status.STATUS_OK;		}		if (agscWratSetUsimOwner._name.equalsIgnoreCase(name)) {			agscWratSetUsimOwner._id = id;			return Status.STATUS_OK;		}		if (agscWratGetUsimOwner._name.equalsIgnoreCase(name)) {			agscWratGetUsimOwner._id = id;			return Status.STATUS_OK;		}		if (agscWratManualSelectSwitch._name.equalsIgnoreCase(name)) {			agscWratManualSelectSwitch._id = id;			return Status.STATUS_OK;		}		if (agscWratGetAvailableNetwork._name.equalsIgnoreCase(name)) {			agscWratGetAvailableNetwork._id = id;			return Status.STATUS_OK;		}		if (agscWratUeStateChanged._name.equalsIgnoreCase(name)) {			agscWratUeStateChanged._id = id;			return Status.STATUS_OK;		}		if (agscWratMsMainDevice._name.equalsIgnoreCase(name)) {			agscWratMsMainDevice._id = id;			return Status.STATUS_OK;		}		if (agscWratLteNetworkAvailable._name.equalsIgnoreCase(name)) {			agscWratLteNetworkAvailable._id = id;			return Status.STATUS_OK;		}		if (agscWratAvailableNetwork._name.equalsIgnoreCase(name)) {			agscWratAvailableNetwork._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		if (agscWratAvailablePlmn._id == id) return agscWratAvailablePlmn.notify(buf);		if (agscWratPdnEstablished._id == id) return agscWratPdnEstablished.notify(buf);		if (agscWratPdnReleased._id == id) return agscWratPdnReleased.notify(buf);		if (agscWratPinStatus._id == id) return agscWratPinStatus.notify(buf);		if (agscWratUeStateChanged._id == id) return agscWratUeStateChanged.notify(buf);		if (agscWratMsMainDevice._id == id) return agscWratMsMainDevice.notify(buf);		if (agscWratLteNetworkAvailable._id == id) return agscWratLteNetworkAvailable.notify(buf);		if (agscWratAvailableNetwork._id == id) return agscWratAvailableNetwork.notify(buf);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 38;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			name._value = agscWratGetFunctionalityLevel._name;			id._value = agscWratGetFunctionalityLevel._id;			return Status.STATUS_OK;		}		if (index==1) {			name._value = agscWratSetFunctionalityLevel._name;			id._value = agscWratSetFunctionalityLevel._id;			return Status.STATUS_OK;		}		if (index==2) {			name._value = agscWratSetPlmnSelectionMode._name;			id._value = agscWratSetPlmnSelectionMode._id;			return Status.STATUS_OK;		}		if (index==3) {			name._value = agscWratGetAvailablePlmnList._name;			id._value = agscWratGetAvailablePlmnList._id;			return Status.STATUS_OK;		}		if (index==4) {			name._value = agscWratGetPlmnSelectionMode._name;			id._value = agscWratGetPlmnSelectionMode._id;			return Status.STATUS_OK;		}		if (index==5) {			serviceType.value = (agscWratImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscWratAvailablePlmn._name;			id._value = agscWratAvailablePlmn._id;			return Status.STATUS_OK;		}		if (index==6) {			name._value = agscWratGetPdnList._name;			id._value = agscWratGetPdnList._id;			return Status.STATUS_OK;		}		if (index==7) {			serviceType.value = (agscWratImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscWratPdnEstablished._name;			id._value = agscWratPdnEstablished._id;			return Status.STATUS_OK;		}		if (index==8) {			serviceType.value = (agscWratImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscWratPdnReleased._name;			id._value = agscWratPdnReleased._id;			return Status.STATUS_OK;		}		if (index==9) {			name._value = agscWratGetDhcpConfig._name;			id._value = agscWratGetDhcpConfig._id;			return Status.STATUS_OK;		}		if (index==10) {			name._value = agscWratGetSimPresence._name;			id._value = agscWratGetSimPresence._id;			return Status.STATUS_OK;		}		if (index==11) {			name._value = agscWratGetPinStatus._name;			id._value = agscWratGetPinStatus._id;			return Status.STATUS_OK;		}		if (index==12) {			name._value = agscWratGetEnabledPinStatus._name;			id._value = agscWratGetEnabledPinStatus._id;			return Status.STATUS_OK;		}		if (index==13) {			serviceType.value = (agscWratImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscWratPinStatus._name;			id._value = agscWratPinStatus._id;			return Status.STATUS_OK;		}		if (index==14) {			name._value = agscWratEnterPin._name;			id._value = agscWratEnterPin._id;			return Status.STATUS_OK;		}		if (index==15) {			name._value = agscWratEnterPuk._name;			id._value = agscWratEnterPuk._id;			return Status.STATUS_OK;		}		if (index==16) {			name._value = agscWratChangePin._name;			id._value = agscWratChangePin._id;			return Status.STATUS_OK;		}		if (index==17) {			name._value = agscWratEnablePin._name;			id._value = agscWratEnablePin._id;			return Status.STATUS_OK;		}		if (index==18) {			name._value = agscWratGetPinPukRetries._name;			id._value = agscWratGetPinPukRetries._id;			return Status.STATUS_OK;		}		if (index==19) {			name._value = agscWratGetCellInfo._name;			id._value = agscWratGetCellInfo._id;			return Status.STATUS_OK;		}		if (index==20) {			name._value = agscWratGetRadioLevel._name;			id._value = agscWratGetRadioLevel._id;			return Status.STATUS_OK;		}		if (index==21) {			name._value = agscWratGetPhyStatsDl._name;			id._value = agscWratGetPhyStatsDl._id;			return Status.STATUS_OK;		}		if (index==22) {			name._value = agscWratGetLinkSpeed._name;			id._value = agscWratGetLinkSpeed._id;			return Status.STATUS_OK;		}		if (index==23) {			name._value = agscWratGetIdentities._name;			id._value = agscWratGetIdentities._id;			return Status.STATUS_OK;		}		if (index==24) {			name._value = agscWratGetUeState._name;			id._value = agscWratGetUeState._id;			return Status.STATUS_OK;		}		if (index==25) {			name._value = agscWratSetUeStarted._name;			id._value = agscWratSetUeStarted._id;			return Status.STATUS_OK;		}		if (index==26) {			name._value = agscWratSendAtCommand._name;			id._value = agscWratSendAtCommand._id;			return Status.STATUS_OK;		}		if (index==27) {			name._value = agscWratSetApn._name;			id._value = agscWratSetApn._id;			return Status.STATUS_OK;		}		if (index==28) {			name._value = agscWratGetTechnology._name;			id._value = agscWratGetTechnology._id;			return Status.STATUS_OK;		}		if (index==29) {			name._value = agscWratSetCellSearchMode._name;			id._value = agscWratSetCellSearchMode._id;			return Status.STATUS_OK;		}		if (index==30) {			name._value = agscWratSetUsimOwner._name;			id._value = agscWratSetUsimOwner._id;			return Status.STATUS_OK;		}		if (index==31) {			name._value = agscWratGetUsimOwner._name;			id._value = agscWratGetUsimOwner._id;			return Status.STATUS_OK;		}		if (index==32) {			name._value = agscWratManualSelectSwitch._name;			id._value = agscWratManualSelectSwitch._id;			return Status.STATUS_OK;		}		if (index==33) {			name._value = agscWratGetAvailableNetwork._name;			id._value = agscWratGetAvailableNetwork._id;			return Status.STATUS_OK;		}		if (index==34) {			serviceType.value = (agscWratImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscWratUeStateChanged._name;			id._value = agscWratUeStateChanged._id;			return Status.STATUS_OK;		}		if (index==35) {			serviceType.value = (agscWratImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscWratMsMainDevice._name;			id._value = agscWratMsMainDevice._id;			return Status.STATUS_OK;		}		if (index==36) {			serviceType.value = (agscWratImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscWratLteNetworkAvailable._name;			id._value = agscWratLteNetworkAvailable._id;			return Status.STATUS_OK;		}		if (index==37) {			serviceType.value = (agscWratImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscWratAvailableNetwork._name;			id._value = agscWratAvailableNetwork._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int GetFunctionalityLevel(OutValue<sqnModemFunctionalityLevel> funcLevel) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetFunctionalityLevel.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetFunctionalityLevel._id, agscWratGetFunctionalityLevel._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetFunctionalityLevel.unmarshall(returnBuf, returnBuf.length, _offset, funcLevel);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetFunctionalityLevel(sqnModemFunctionalityLevel funcLevel) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratSetFunctionalityLevel.marshall(marshallBuf, 16000, _offset, funcLevel);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratSetFunctionalityLevel._id, agscWratSetFunctionalityLevel._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratSetFunctionalityLevel.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetPlmnSelectionMode(final sqnPlmnSelectMode mode, final sqnPlmnFormat format, final String pPlmn, final sqnAct act) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratSetPlmnSelectionMode.marshall(marshallBuf, 16000, _offset, mode, format, pPlmn, act);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratSetPlmnSelectionMode._id, agscWratSetPlmnSelectionMode._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratSetPlmnSelectionMode.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetAvailablePlmnList() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetAvailablePlmnList.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetAvailablePlmnList._id, agscWratGetAvailablePlmnList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetAvailablePlmnList.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPlmnSelectionMode(OutValue<sqnPlmnSelectMode> plmnSelMode) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetPlmnSelectionMode.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetPlmnSelectionMode._id, agscWratGetPlmnSelectionMode._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetPlmnSelectionMode.unmarshall(returnBuf, returnBuf.length, _offset, plmnSelMode);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPdnList(OutArray<sqnPdnConfig> pdn) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetPdnList.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetPdnList._id, agscWratGetPdnList._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetPdnList.unmarshall(returnBuf, returnBuf.length, _offset, pdn);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetDhcpConfig(OutValue<Boolean> enabled) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetDhcpConfig.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetDhcpConfig._id, agscWratGetDhcpConfig._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetDhcpConfig.unmarshall(returnBuf, returnBuf.length, _offset, enabled);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetSimPresence(OutValue<Boolean> simPresent) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetSimPresence.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetSimPresence._id, agscWratGetSimPresence._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetSimPresence.unmarshall(returnBuf, returnBuf.length, _offset, simPresent);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPinStatus(OutValue<sqnPinStatus> pinStatus, OutValue<Short> remainingAttempts) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetPinStatus.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetPinStatus._id, agscWratGetPinStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetPinStatus.unmarshall(returnBuf, returnBuf.length, _offset, pinStatus, remainingAttempts);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetEnabledPinStatus(OutValue<Boolean> enabled) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetEnabledPinStatus.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetEnabledPinStatus._id, agscWratGetEnabledPinStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetEnabledPinStatus.unmarshall(returnBuf, returnBuf.length, _offset, enabled);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EnterPin(final String pin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratEnterPin.marshall(marshallBuf, 16000, _offset, pin);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratEnterPin._id, agscWratEnterPin._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratEnterPin.unmarshall(returnBuf, returnBuf.length, _offset, status, remainingAttempts);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EnterPuk(final String puk, final String newPin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratEnterPuk.marshall(marshallBuf, 16000, _offset, puk, newPin);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratEnterPuk._id, agscWratEnterPuk._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratEnterPuk.unmarshall(returnBuf, returnBuf.length, _offset, status, remainingAttempts);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ChangePin(final String oldPin, final String newPin, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratChangePin.marshall(marshallBuf, 16000, _offset, oldPin, newPin);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratChangePin._id, agscWratChangePin._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratChangePin.unmarshall(returnBuf, returnBuf.length, _offset, status, remainingAttempts);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int EnablePin(final String pin, boolean enable, OutValue<Integer> status, OutValue<Short> remainingAttempts) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratEnablePin.marshall(marshallBuf, 16000, _offset, pin, enable);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratEnablePin._id, agscWratEnablePin._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratEnablePin.unmarshall(returnBuf, returnBuf.length, _offset, status, remainingAttempts);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPinPukRetries(OutValue<Short> pinRetries, OutValue<Short> pinDefaultRetries, OutValue<Short> pukRetries, OutValue<Short> pukDefaultRetries) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetPinPukRetries.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetPinPukRetries._id, agscWratGetPinPukRetries._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetPinPukRetries.unmarshall(returnBuf, returnBuf.length, _offset, pinRetries, pinDefaultRetries, pukRetries, pukDefaultRetries);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetCellInfo(OutValue<sqnCellInfo> info) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetCellInfo.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetCellInfo._id, agscWratGetCellInfo._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetCellInfo.unmarshall(returnBuf, returnBuf.length, _offset, info);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetRadioLevel(OutValue<sqnRadioLevel> pRadioLevel) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetRadioLevel.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetRadioLevel._id, agscWratGetRadioLevel._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetRadioLevel.unmarshall(returnBuf, returnBuf.length, _offset, pRadioLevel);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPhyStatsDl(OutValue<PhyStatsDl> phyStatsDl) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetPhyStatsDl.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetPhyStatsDl._id, agscWratGetPhyStatsDl._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetPhyStatsDl.unmarshall(returnBuf, returnBuf.length, _offset, phyStatsDl);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetLinkSpeed(OutValue<Integer> ulBitRate, OutValue<Integer> dlBitRate) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetLinkSpeed.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetLinkSpeed._id, agscWratGetLinkSpeed._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetLinkSpeed.unmarshall(returnBuf, returnBuf.length, _offset, ulBitRate, dlBitRate);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetIdentities(OutValue<sqnUeIdentities> identities) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetIdentities.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetIdentities._id, agscWratGetIdentities._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetIdentities.unmarshall(returnBuf, returnBuf.length, _offset, identities);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetUeState(OutValue<sqnThpMcState> state) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetUeState.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetUeState._id, agscWratGetUeState._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetUeState.unmarshall(returnBuf, returnBuf.length, _offset, state);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetUeStarted(final boolean isStarted) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratSetUeStarted.marshall(marshallBuf, 16000, _offset, isStarted);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratSetUeStarted._id, agscWratSetUeStarted._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratSetUeStarted.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SendAtCommand(final String atCommand, OutValue<String> response) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratSendAtCommand.marshall(marshallBuf, 16000, _offset, atCommand);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratSendAtCommand._id, agscWratSendAtCommand._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratSendAtCommand.unmarshall(returnBuf, returnBuf.length, _offset, response);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetApn(final String apn) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratSetApn.marshall(marshallBuf, 16000, _offset, apn);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratSetApn._id, agscWratSetApn._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratSetApn.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetTechnology(OutValue<Long> technoBmp, OutValue<Long> duplexBmp) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetTechnology.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetTechnology._id, agscWratGetTechnology._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetTechnology.unmarshall(returnBuf, returnBuf.length, _offset, technoBmp, duplexBmp);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetCellSearchMode(final sqnRatPriorityList ratPriorityList, long scanInterval, short forceFreq) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratSetCellSearchMode.marshall(marshallBuf, 16000, _offset, ratPriorityList, scanInterval, forceFreq);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratSetCellSearchMode._id, agscWratSetCellSearchMode._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratSetCellSearchMode.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SetUsimOwner(sqnUsimOwner owner) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratSetUsimOwner.marshall(marshallBuf, 16000, _offset, owner);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratSetUsimOwner._id, agscWratSetUsimOwner._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratSetUsimOwner.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetUsimOwner(OutValue<sqnUsimOwner> owner) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetUsimOwner.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetUsimOwner._id, agscWratGetUsimOwner._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetUsimOwner.unmarshall(returnBuf, returnBuf.length, _offset, owner);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ManualSelectSwitch(int action) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratManualSelectSwitch.marshall(marshallBuf, 16000, _offset, action);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratManualSelectSwitch._id, agscWratManualSelectSwitch._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratManualSelectSwitch.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetAvailableNetwork() {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscWratGetAvailableNetwork.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscWratGetAvailableNetwork._id, agscWratGetAvailableNetwork._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscWratGetAvailableNetwork.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static WratClient _use;}