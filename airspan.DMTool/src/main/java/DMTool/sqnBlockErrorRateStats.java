/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnBlockErrorRateStats {	public long iBlerCode0;	public long iBlerCode1;	public long rBlerCode0;	public long rBlerCode1;	public long nbCrcOkCw0Init;	public long nbCrcNokCw0Init;	public long nbCrcOkCw1Init;	public long nbCrcNokCw1Init;	public long nbCrcOkCw0Res;	public long nbCrcNokCw0Res;	public long nbCrcOkCw1Res;	public long nbCrcNokCw1Res;	public sqnBlockErrorRateStats() {		// Initialization	}	public static int marshall(byte[] buf, final sqnBlockErrorRateStats p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+48)) return DccError.ERR_OVERFLOW;		// iBlerCode0		Util.Copy32ToBuffer(buf, p.iBlerCode0, _offset);		// iBlerCode1		Util.Copy32ToBuffer(buf, p.iBlerCode1, _offset);		// rBlerCode0		Util.Copy32ToBuffer(buf, p.rBlerCode0, _offset);		// rBlerCode1		Util.Copy32ToBuffer(buf, p.rBlerCode1, _offset);		// nbCrcOkCw0Init		Util.Copy32ToBuffer(buf, p.nbCrcOkCw0Init, _offset);		// nbCrcNokCw0Init		Util.Copy32ToBuffer(buf, p.nbCrcNokCw0Init, _offset);		// nbCrcOkCw1Init		Util.Copy32ToBuffer(buf, p.nbCrcOkCw1Init, _offset);		// nbCrcNokCw1Init		Util.Copy32ToBuffer(buf, p.nbCrcNokCw1Init, _offset);		// nbCrcOkCw0Res		Util.Copy32ToBuffer(buf, p.nbCrcOkCw0Res, _offset);		// nbCrcNokCw0Res		Util.Copy32ToBuffer(buf, p.nbCrcNokCw0Res, _offset);		// nbCrcOkCw1Res		Util.Copy32ToBuffer(buf, p.nbCrcOkCw1Res, _offset);		// nbCrcNokCw1Res		Util.Copy32ToBuffer(buf, p.nbCrcNokCw1Res, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnBlockErrorRateStats p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+48)) return DccError.ERR_OVERFLOW;		// iBlerCode0		p.iBlerCode0 = (long) Util.Copy32FromBuffer(buf, _offset);		// iBlerCode1		p.iBlerCode1 = (long) Util.Copy32FromBuffer(buf, _offset);		// rBlerCode0		p.rBlerCode0 = (long) Util.Copy32FromBuffer(buf, _offset);		// rBlerCode1		p.rBlerCode1 = (long) Util.Copy32FromBuffer(buf, _offset);		// nbCrcOkCw0Init		p.nbCrcOkCw0Init = (long) Util.Copy32FromBuffer(buf, _offset);		// nbCrcNokCw0Init		p.nbCrcNokCw0Init = (long) Util.Copy32FromBuffer(buf, _offset);		// nbCrcOkCw1Init		p.nbCrcOkCw1Init = (long) Util.Copy32FromBuffer(buf, _offset);		// nbCrcNokCw1Init		p.nbCrcNokCw1Init = (long) Util.Copy32FromBuffer(buf, _offset);		// nbCrcOkCw0Res		p.nbCrcOkCw0Res = (long) Util.Copy32FromBuffer(buf, _offset);		// nbCrcNokCw0Res		p.nbCrcNokCw0Res = (long) Util.Copy32FromBuffer(buf, _offset);		// nbCrcOkCw1Res		p.nbCrcOkCw1Res = (long) Util.Copy32FromBuffer(buf, _offset);		// nbCrcNokCw1Res		p.nbCrcNokCw1Res = (long) Util.Copy32FromBuffer(buf, _offset);		return st;	}}