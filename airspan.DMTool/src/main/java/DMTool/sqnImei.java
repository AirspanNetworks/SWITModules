/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnImei {	public long digitQty;	public char[] digits = new char[16];	public sqnImei() {		// Initialization	}	public static int marshall(byte[] buf, final sqnImei p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		// digitQty		Util.Copy32ToBuffer(buf, p.digitQty, _offset);		// digits		for (int i = 0; i<16; i++) {			Util.Copy8ToBuffer(buf, p.digits[i], _offset);		}		return st;	}	public static int unmarshall(final byte[] buf, sqnImei p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+4)) return DccError.ERR_OVERFLOW;		// digitQty		p.digitQty = (long) Util.Copy32FromBuffer(buf, _offset);		// digits		for (int i = 0; i<16; i++) {			p.digits[i] = (char) Util.Copy8FromBuffer(buf, _offset);		}		return st;	}}