/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnPdcpEntityParams {	public int discardTimerMs;	public long downlinkEntityCount;	public long maxRohcCid;	public boolean rohcEnabled;	public sqnSnBitsLength snBitLength;	public short rbId;	public short epsRbId;	public sqnRlcMode rlcMode;	public boolean stateReportFlagSent;	public long uplinkEntityCount;	public sqnPdcpEntityParams() {		// Initialization		// snBitLength		snBitLength = new sqnSnBitsLength();		// rlcMode		rlcMode = new sqnRlcMode();	}	public static int marshall(byte[] buf, final sqnPdcpEntityParams p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+34)) return DccError.ERR_OVERFLOW;		// discardTimerMs		Util.Copy32ToBuffer(buf, p.discardTimerMs, _offset);		// downlinkEntityCount		Util.Copy32ToBuffer(buf, p.downlinkEntityCount, _offset);		// maxRohcCid		Util.Copy32ToBuffer(buf, p.maxRohcCid, _offset);		// rohcEnabled		Util.Copy32ToBuffer(buf, p.rohcEnabled, _offset);		// snBitLength		if ( Status.STATUS_OK != (st = sqnSnBitsLength.marshall(buf, p.snBitLength, _offset)) ) return st;		// rbId		Util.Copy8ToBuffer(buf, p.rbId, _offset);		// epsRbId		Util.Copy8ToBuffer(buf, p.epsRbId, _offset);		// rlcMode		if ( Status.STATUS_OK != (st = sqnRlcMode.marshall(buf, p.rlcMode, _offset)) ) return st;		// stateReportFlagSent		Util.Copy32ToBuffer(buf, p.stateReportFlagSent, _offset);		// uplinkEntityCount		Util.Copy32ToBuffer(buf, p.uplinkEntityCount, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnPdcpEntityParams p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+34)) return DccError.ERR_OVERFLOW;		// discardTimerMs		p.discardTimerMs = (int) Util.Copy32FromBuffer(buf, _offset);		// downlinkEntityCount		p.downlinkEntityCount = (long) Util.Copy32FromBuffer(buf, _offset);		// maxRohcCid		p.maxRohcCid = (long) Util.Copy32FromBuffer(buf, _offset);		// rohcEnabled		p.rohcEnabled = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// snBitLength		if ( Status.STATUS_OK != (st = sqnSnBitsLength.unmarshall(buf, p.snBitLength, _offset)) ) return st;		// rbId		p.rbId = (short) Util.Copy8FromBuffer(buf, _offset);		// epsRbId		p.epsRbId = (short) Util.Copy8FromBuffer(buf, _offset);		// rlcMode		if ( Status.STATUS_OK != (st = sqnRlcMode.unmarshall(buf, p.rlcMode, _offset)) ) return st;		// stateReportFlagSent		p.stateReportFlagSent = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// uplinkEntityCount		p.uplinkEntityCount = (long) Util.Copy32FromBuffer(buf, _offset);		return st;	}}