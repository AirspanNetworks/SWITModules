/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class CommandArgDescr {	public String name;	public String type;	public String description;	public boolean isMandatory;	public int intRangeMin;	public int intRangeMax;	public String enumNames;	public CommandArgDescr() {		// Initialization		// name		name = "";		// type		type = "";		// description		description = "";		// enumNames		enumNames = "";	}	public static int marshall(byte[] buf, final CommandArgDescr p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+12)) return DccError.ERR_OVERFLOW;		// name		if (buf.length < (_offset._value+p.name.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.name.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.name.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// type		if (buf.length < (_offset._value+p.type.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.type.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.type.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// description		if (buf.length < (_offset._value+p.description.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.description.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.description.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		// isMandatory		Util.Copy32ToBuffer(buf, p.isMandatory, _offset);		// intRangeMin		Util.Copy32ToBuffer(buf, p.intRangeMin, _offset);		// intRangeMax		Util.Copy32ToBuffer(buf, p.intRangeMax, _offset);		// enumNames		if (buf.length < (_offset._value+p.enumNames.length())) return DccError.ERR_OVERFLOW;		for (int i=0; i<p.enumNames.length(); i++, _offset._value = _offset._value + 1) {			buf[_offset._value] = (byte) p.enumNames.charAt(i);		}		buf[_offset._value] = 0;		_offset._value = _offset._value + 1;		return st;	}	public static int unmarshall(final byte[] buf, CommandArgDescr p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+12)) return DccError.ERR_OVERFLOW;		// name		p.name = "";		while (buf[_offset._value] != 0) {			p.name += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		// type		p.type = "";		while (buf[_offset._value] != 0) {			p.type += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		// description		p.description = "";		while (buf[_offset._value] != 0) {			p.description += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		// isMandatory		p.isMandatory = Util.Copy32FromBuffer(buf, _offset) == 0? false:true;		// intRangeMin		p.intRangeMin = (int) Util.Copy32FromBuffer(buf, _offset);		// intRangeMax		p.intRangeMax = (int) Util.Copy32FromBuffer(buf, _offset);		// enumNames		p.enumNames = "";		while (buf[_offset._value] != 0) {			p.enumNames += (char) buf[_offset._value];			_offset._value = _offset._value + 1;		}		_offset._value = _offset._value + 1;		return st;	}}