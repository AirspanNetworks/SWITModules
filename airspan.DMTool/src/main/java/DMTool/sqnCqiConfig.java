/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnCqiConfig {	public short AckMcsOffsetIndex;	public sqnCqiAperiodicMode aperiodCqiReportMode;	public short bandwidsqnartNumber;	public short cqiMcsOffsetIndex;	public short multiRi;	public int nOffsetRi;	public short paraH;	public short paraK;	public short cqiPeriodicity;	public short pmiMode;	public short pucchFeedBackType;	public short riBitNumber;	public short riMcsOffsetIndex;	public short subFrameOffset;	public short transmitMode;	public sqnCqiConfig() {		// Initialization		// aperiodCqiReportMode		aperiodCqiReportMode = new sqnCqiAperiodicMode();	}	public static int marshall(byte[] buf, final sqnCqiConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+21)) return DccError.ERR_OVERFLOW;		// AckMcsOffsetIndex		Util.Copy8ToBuffer(buf, p.AckMcsOffsetIndex, _offset);		// aperiodCqiReportMode		if ( Status.STATUS_OK != (st = sqnCqiAperiodicMode.marshall(buf, p.aperiodCqiReportMode, _offset)) ) return st;		// bandwidsqnartNumber		Util.Copy8ToBuffer(buf, p.bandwidsqnartNumber, _offset);		// cqiMcsOffsetIndex		Util.Copy8ToBuffer(buf, p.cqiMcsOffsetIndex, _offset);		// multiRi		Util.Copy8ToBuffer(buf, p.multiRi, _offset);		// nOffsetRi		Util.Copy32ToBuffer(buf, p.nOffsetRi, _offset);		// paraH		Util.Copy8ToBuffer(buf, p.paraH, _offset);		// paraK		Util.Copy8ToBuffer(buf, p.paraK, _offset);		// cqiPeriodicity		Util.Copy8ToBuffer(buf, p.cqiPeriodicity, _offset);		// pmiMode		Util.Copy8ToBuffer(buf, p.pmiMode, _offset);		// pucchFeedBackType		Util.Copy8ToBuffer(buf, p.pucchFeedBackType, _offset);		// riBitNumber		Util.Copy8ToBuffer(buf, p.riBitNumber, _offset);		// riMcsOffsetIndex		Util.Copy8ToBuffer(buf, p.riMcsOffsetIndex, _offset);		// subFrameOffset		Util.Copy8ToBuffer(buf, p.subFrameOffset, _offset);		// transmitMode		Util.Copy8ToBuffer(buf, p.transmitMode, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnCqiConfig p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+21)) return DccError.ERR_OVERFLOW;		// AckMcsOffsetIndex		p.AckMcsOffsetIndex = (short) Util.Copy8FromBuffer(buf, _offset);		// aperiodCqiReportMode		if ( Status.STATUS_OK != (st = sqnCqiAperiodicMode.unmarshall(buf, p.aperiodCqiReportMode, _offset)) ) return st;		// bandwidsqnartNumber		p.bandwidsqnartNumber = (short) Util.Copy8FromBuffer(buf, _offset);		// cqiMcsOffsetIndex		p.cqiMcsOffsetIndex = (short) Util.Copy8FromBuffer(buf, _offset);		// multiRi		p.multiRi = (short) Util.Copy8FromBuffer(buf, _offset);		// nOffsetRi		p.nOffsetRi = (int) Util.Copy32FromBuffer(buf, _offset);		// paraH		p.paraH = (short) Util.Copy8FromBuffer(buf, _offset);		// paraK		p.paraK = (short) Util.Copy8FromBuffer(buf, _offset);		// cqiPeriodicity		p.cqiPeriodicity = (short) Util.Copy8FromBuffer(buf, _offset);		// pmiMode		p.pmiMode = (short) Util.Copy8FromBuffer(buf, _offset);		// pucchFeedBackType		p.pucchFeedBackType = (short) Util.Copy8FromBuffer(buf, _offset);		// riBitNumber		p.riBitNumber = (short) Util.Copy8FromBuffer(buf, _offset);		// riMcsOffsetIndex		p.riMcsOffsetIndex = (short) Util.Copy8FromBuffer(buf, _offset);		// subFrameOffset		p.subFrameOffset = (short) Util.Copy8FromBuffer(buf, _offset);		// transmitMode		p.transmitMode = (short) Util.Copy8FromBuffer(buf, _offset);		return st;	}}