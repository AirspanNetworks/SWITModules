/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class agscImsImpl extends DccClient {	public void initialize(final ImsClient c) {		_use = c;		name = "ims";		DeviceController.registerClient(this);	}	public int resolveService(final String name, int id) {		if (agscImsImsRegistrationStatusSuccess._name.equalsIgnoreCase(name)) {			agscImsImsRegistrationStatusSuccess._id = id;			return Status.STATUS_OK;		}		if (agscImsImsRegistrationFailure._name.equalsIgnoreCase(name)) {			agscImsImsRegistrationFailure._id = id;			return Status.STATUS_OK;		}		if (agscImsGetImpu._name.equalsIgnoreCase(name)) {			agscImsGetImpu._id = id;			return Status.STATUS_OK;		}		if (agscImsGetImpi._name.equalsIgnoreCase(name)) {			agscImsGetImpi._id = id;			return Status.STATUS_OK;		}		if (agscImsGetDomain._name.equalsIgnoreCase(name)) {			agscImsGetDomain._id = id;			return Status.STATUS_OK;		}		if (agscImsGetPcscfAddress._name.equalsIgnoreCase(name)) {			agscImsGetPcscfAddress._id = id;			return Status.STATUS_OK;		}		if (agscImsIsimStatus._name.equalsIgnoreCase(name)) {			agscImsIsimStatus._id = id;			return Status.STATUS_OK;		}		if (agscImsGetIsimStatus._name.equalsIgnoreCase(name)) {			agscImsGetIsimStatus._id = id;			return Status.STATUS_OK;		}		if (agscImsIsimPin._name.equalsIgnoreCase(name)) {			agscImsIsimPin._id = id;			return Status.STATUS_OK;		}		if (agscImsAkaReq._name.equalsIgnoreCase(name)) {			agscImsAkaReq._id = id;			return Status.STATUS_OK;		}		if (agscImsAkaResult._name.equalsIgnoreCase(name)) {			agscImsAkaResult._id = id;			return Status.STATUS_OK;		}		if (agscImsSmsPpDataDownloadRcd._name.equalsIgnoreCase(name)) {			agscImsSmsPpDataDownloadRcd._id = id;			return Status.STATUS_OK;		}		if (agscImsSmsPpDataDownloadResult._name.equalsIgnoreCase(name)) {			agscImsSmsPpDataDownloadResult._id = id;			return Status.STATUS_OK;		}		if (agscImsGetMsisdnNumber._name.equalsIgnoreCase(name)) {			agscImsGetMsisdnNumber._id = id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	public int processNotification(int id, final byte[] buf) {		if (agscImsIsimStatus._id == id) return agscImsIsimStatus.notify(buf);		if (agscImsAkaResult._id == id) return agscImsAkaResult.notify(buf);		if (agscImsSmsPpDataDownloadResult._id == id) return agscImsSmsPpDataDownloadResult.notify(buf);		return Status.STATUS_FAILURE;	}	public int getServicesQty() {		return 14;	}	public int getServiceFromIndex(int index, OutValue<String> name, OutValue<Integer> id, ServiceType serviceType) {		id._value = -1;		serviceType.value = ServiceType.SERVICE_COMMAND;		if (index==0) {			name._value = agscImsImsRegistrationStatusSuccess._name;			id._value = agscImsImsRegistrationStatusSuccess._id;			return Status.STATUS_OK;		}		if (index==1) {			name._value = agscImsImsRegistrationFailure._name;			id._value = agscImsImsRegistrationFailure._id;			return Status.STATUS_OK;		}		if (index==2) {			name._value = agscImsGetImpu._name;			id._value = agscImsGetImpu._id;			return Status.STATUS_OK;		}		if (index==3) {			name._value = agscImsGetImpi._name;			id._value = agscImsGetImpi._id;			return Status.STATUS_OK;		}		if (index==4) {			name._value = agscImsGetDomain._name;			id._value = agscImsGetDomain._id;			return Status.STATUS_OK;		}		if (index==5) {			name._value = agscImsGetPcscfAddress._name;			id._value = agscImsGetPcscfAddress._id;			return Status.STATUS_OK;		}		if (index==6) {			serviceType.value = (agscImsImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscImsIsimStatus._name;			id._value = agscImsIsimStatus._id;			return Status.STATUS_OK;		}		if (index==7) {			name._value = agscImsGetIsimStatus._name;			id._value = agscImsGetIsimStatus._id;			return Status.STATUS_OK;		}		if (index==8) {			name._value = agscImsIsimPin._name;			id._value = agscImsIsimPin._id;			return Status.STATUS_OK;		}		if (index==9) {			name._value = agscImsAkaReq._name;			id._value = agscImsAkaReq._id;			return Status.STATUS_OK;		}		if (index==10) {			serviceType.value = (agscImsImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscImsAkaResult._name;			id._value = agscImsAkaResult._id;			return Status.STATUS_OK;		}		if (index==11) {			name._value = agscImsSmsPpDataDownloadRcd._name;			id._value = agscImsSmsPpDataDownloadRcd._id;			return Status.STATUS_OK;		}		if (index==12) {			serviceType.value = (agscImsImpl._use!=null)?ServiceType.SERVICE_NOTIFICATION:ServiceType.SERVICE_UNBOUND_NOTIFICATION;			name._value = agscImsSmsPpDataDownloadResult._name;			id._value = agscImsSmsPpDataDownloadResult._id;			return Status.STATUS_OK;		}		if (index==13) {			name._value = agscImsGetMsisdnNumber._name;			id._value = agscImsGetMsisdnNumber._id;			return Status.STATUS_OK;		}		return Status.STATUS_FAILURE;	}	// Services	public static int ImsRegistrationStatusSuccess(final sqnString[] impu) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsImsRegistrationStatusSuccess.marshall(marshallBuf, 16000, _offset, impu);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscImsImsRegistrationStatusSuccess._id, agscImsImsRegistrationStatusSuccess._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscImsImsRegistrationStatusSuccess.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int ImsRegistrationFailure(final short[] statusCode) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsImsRegistrationFailure.marshall(marshallBuf, 16000, _offset, statusCode);		if (st != Status.STATUS_OK) return st;			byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification			System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);			byte[] returnBuf = DeviceController.invoke(agscImsImsRegistrationFailure._id, agscImsImsRegistrationFailure._name, queryBuf, false);		return Status.STATUS_OK;	}	public static int GetImpu(OutArray<sqnString> impu) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsGetImpu.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscImsGetImpu._id, agscImsGetImpu._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscImsGetImpu.unmarshall(returnBuf, returnBuf.length, _offset, impu);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetImpi(OutValue<String> impi) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsGetImpi.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscImsGetImpi._id, agscImsGetImpi._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscImsGetImpi.unmarshall(returnBuf, returnBuf.length, _offset, impi);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetDomain(OutValue<String> domain) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsGetDomain.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscImsGetDomain._id, agscImsGetDomain._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscImsGetDomain.unmarshall(returnBuf, returnBuf.length, _offset, domain);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetPcscfAddress(OutArray<sqnString> pcscf) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsGetPcscfAddress.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscImsGetPcscfAddress._id, agscImsGetPcscfAddress._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscImsGetPcscfAddress.unmarshall(returnBuf, returnBuf.length, _offset, pcscf);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetIsimStatus(OutValue<sqnIsimState> state) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsGetIsimStatus.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscImsGetIsimStatus._id, agscImsGetIsimStatus._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscImsGetIsimStatus.unmarshall(returnBuf, returnBuf.length, _offset, state);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int IsimPin(final String pin) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsIsimPin.marshall(marshallBuf, 16000, _offset, pin);		if (st != Status.STATUS_OK) return st;			byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification			System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);			byte[] returnBuf = DeviceController.invoke(agscImsIsimPin._id, agscImsIsimPin._name, queryBuf, false);		return Status.STATUS_OK;	}	public static int AkaReq(final sqnImsAkaData akaData) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsAkaReq.marshall(marshallBuf, 16000, _offset, akaData);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscImsAkaReq._id, agscImsAkaReq._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscImsAkaReq.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int SmsPpDataDownloadRcd(final sqnSmsDeliver sms) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsSmsPpDataDownloadRcd.marshall(marshallBuf, 16000, _offset, sms);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscImsSmsPpDataDownloadRcd._id, agscImsSmsPpDataDownloadRcd._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscImsSmsPpDataDownloadRcd.unmarshall(returnBuf, returnBuf.length, _offset);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	public static int GetMsisdnNumber(OutValue<String> number) {		int st = Status.STATUS_OK;		OutValue<Integer> _offset = new OutValue<Integer>(0);		byte[] marshallBuf = new byte[16000]; // Could be shared?		st = agscImsGetMsisdnNumber.marshall(marshallBuf, 16000, _offset);		if (st != Status.STATUS_OK) return st;		byte[] queryBuf = new byte[_offset._value]; // Because Java does not support array size modification		System.arraycopy(marshallBuf, 0, queryBuf, 0, _offset._value);		byte[] returnBuf = DeviceController.invoke(agscImsGetMsisdnNumber._id, agscImsGetMsisdnNumber._name, queryBuf, true);		if(returnBuf==null) return Status.STATUS_FAILURE;		_offset._value = 0;		try {			st = agscImsGetMsisdnNumber.unmarshall(returnBuf, returnBuf.length, _offset, number);		} catch (Exception e) {			st = Status.STATUS_FAILURE;		} catch (Error e) {			st = Status.STATUS_FAILURE;		}		return st;	}	// External services	public static ImsClient _use;}