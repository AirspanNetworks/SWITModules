/*  -*- java -*- ****************************************************************** * * Module  : DCC - Device Controller Client in Java for Sequans devices * * Purpose : THIS FILE IS AUTOMATICALLY GENERATED ! * ***************************************************************** * *  Copyright (c) 2009 SEQUANS Communications. *  All rights reserved. *   *  This is confidential and proprietary source code of SEQUANS *  Communications. The use of the present source code and all *  its derived forms is exclusively governed by the restricted *  terms and conditions set forth in the SEQUANS *  Communications' EARLY ADOPTER AGREEMENT and/or LICENCE *  AGREEMENT. The present source code and all its derived *  forms can ONLY and EXCLUSIVELY be used with SEQUANS *  Communications' products. The distribution/sale of the *  present source code and all its derived forms is EXCLUSIVELY *  RESERVED to regular LICENCE holder and otherwise STRICTLY *  PROHIBITED. * ***************************************************************** */package DMTool;public class sqnMacLchEntityParams {	public short logChanId;	public short priority;	public short groupId;	public int prioritizedBitRate;	public int buckSizeDuration;	public sqnMacLchEntityParams() {		// Initialization	}	public static int marshall(byte[] buf, final sqnMacLchEntityParams p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+7)) return DccError.ERR_OVERFLOW;		// logChanId		Util.Copy8ToBuffer(buf, p.logChanId, _offset);		// priority		Util.Copy8ToBuffer(buf, p.priority, _offset);		// groupId		Util.Copy8ToBuffer(buf, p.groupId, _offset);		// prioritizedBitRate		Util.Copy16ToBuffer(buf, p.prioritizedBitRate, _offset);		// buckSizeDuration		Util.Copy16ToBuffer(buf, p.buckSizeDuration, _offset);		return st;	}	public static int unmarshall(final byte[] buf, sqnMacLchEntityParams p, OutValue<Integer> _offset) {		int st = Status.STATUS_OK;		// Check the size of the fundamental types of the structure		if (buf.length < (_offset._value+7)) return DccError.ERR_OVERFLOW;		// logChanId		p.logChanId = (short) Util.Copy8FromBuffer(buf, _offset);		// priority		p.priority = (short) Util.Copy8FromBuffer(buf, _offset);		// groupId		p.groupId = (short) Util.Copy8FromBuffer(buf, _offset);		// prioritizedBitRate		p.prioritizedBitRate = (int) Util.Copy16FromBuffer(buf, _offset);		// buckSizeDuration		p.buckSizeDuration = (int) Util.Copy16FromBuffer(buf, _offset);		return st;	}}